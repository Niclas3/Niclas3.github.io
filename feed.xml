<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>朝四暮三</title>
    <description></description>
    <link>https://niclas3.github.io</link>
    
      
        <item>
          <title>[A]RTS 数据结构的基石3</title>
          <description>&lt;h2 id=&quot;树与递归&quot;&gt;树与递归&lt;/h2&gt;

&lt;p&gt;我们在&lt;a href=&quot;/a-rts_w2_data_structions&quot;&gt;基石1&lt;/a&gt;和&lt;a href=&quot;a-rts_w3_data_structions2&quot;&gt;基石2&lt;/a&gt;中探讨了线性结构链表和数组，这周开始讨论一种非线性结构&lt;strong&gt;树&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;树结构是结点之间的“分支”关系，就像树🌲从芽点发出新的枝干一样。&lt;/p&gt;

&lt;p&gt;树的&lt;strong&gt;形式化定义&lt;/strong&gt;是具有&lt;strong&gt;一个或多个&lt;/strong&gt;结点的有限集合$T$，使得&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;有一个作为树根的特定结点$root$。&lt;/li&gt;
  &lt;li&gt;剩下的结点，被划分结点$m \gt =0$个不相交的集合$T_i…T_m$，并且这个集合中的每一个都是树，并且这些
结点$T_i…T_m$被称为根的子树。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述定义可以得到一些关于&lt;strong&gt;树的性质&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;树的每一个结点都是包含在树中的某棵子树的根&lt;/li&gt;
  &lt;li&gt;一个结点的子树个数称之为这个结点的&lt;strong&gt;度（degree）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;度为零&lt;/strong&gt;的结点是这个树的&lt;strong&gt;叶子结点（leaf）&lt;/strong&gt;或者&lt;strong&gt;终端结点（terminal node）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;非叶子结点&lt;/strong&gt;的被称之为&lt;strong&gt;分支结点（branch node）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;一颗树的&lt;strong&gt;层&lt;/strong&gt;，&lt;strong&gt;root结点为第0层&lt;/strong&gt;，其他结点都比包含它的结点的root子树对应的层大一&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;树的表达方式有很多，这篇文章会使用传统&lt;strong&gt;根在上叶子在下&lt;/strong&gt;的方式绘制图像，也会提出一种&lt;strong&gt;嵌套括号&lt;/strong&gt;的代码表示方式。&lt;/p&gt;

&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: center;&quot;&gt;
graph TD
    A ---&amp;gt; B
    A ---&amp;gt; C
    B --&amp;gt; E
    B --&amp;gt; D
    C --&amp;gt; F
    C --&amp;gt; G
    C --&amp;gt; H
    G --&amp;gt; I

    class C,D blueNode;
    class E,F greenNode
    classDef blueNode fill:#aaaaff,stroke:#0000ff,stroke-width:2px;
    classDef greenNode fill:#aaccff,stroke:#00ffff,stroke-width:2px;
&lt;/pre&gt;

&lt;h2 id=&quot;二叉树&quot;&gt;二叉树&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;二叉树&lt;/strong&gt;是我们主要关注的树结构。在二叉树中，每个结点最多有两颗子树，在只有一颗子树的时候需要区分左右子树。
二叉树的结点可以是一个&lt;strong&gt;有限集合&lt;/strong&gt;，这个集合可以是&lt;strong&gt;空集&lt;/strong&gt;。二叉树由一个根结点和两棵作为该根结点的左右子树的二叉树（这两个二叉树不相交）&lt;/p&gt;

&lt;p&gt;二叉树并不是树的特殊情况，而是一种完全不同的概念。&lt;/p&gt;

&lt;p&gt;二叉树的一些&lt;strong&gt;性质&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;二叉树可以是一个空集&lt;/li&gt;
  &lt;li&gt;二叉树同样的集合，也可以因为左右子树位置不同而不是同样的二叉树&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下使用一种字符串表达方式来表示二叉树，之后我会在代码中使用这样的方式创建实验数据&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;5(4(2,3),7(0,9(8,10)))&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;二叉树遍历&quot;&gt;二叉树遍历&lt;/h2&gt;
&lt;p&gt;非常多的算法都需要走遍一棵树，不多不少的遍历树的每一个结点有3种方案，前、中、后序遍历,
遍历方案让我们可以在谈论一棵树的结点的时候可以通过上一个和下一个结点来讨论。&lt;/p&gt;

&lt;p&gt;这里有个可以强调的地方二叉树的x序遍历的x代表的是&lt;strong&gt;根结点&lt;/strong&gt;被遍历的顺序，前则是先遍历根，依次是中间遍历根和最后遍历根。左右子树的遍历从来都是先左后右。&lt;/p&gt;
&lt;h2 id=&quot;前序遍历preorder&quot;&gt;前序遍历（preorder）&lt;/h2&gt;

&lt;p&gt;先访问根结点，遍历左子树，遍历右子树&lt;/p&gt;
&lt;h2 id=&quot;中序遍历inorder&quot;&gt;中序遍历（inorder）&lt;/h2&gt;
&lt;p&gt;先访问左子树，访问根，遍历右子树&lt;/p&gt;
&lt;h2 id=&quot;后序遍历postorder&quot;&gt;后序遍历（postorder）&lt;/h2&gt;
&lt;p&gt;先访问左子树，遍历右边子树，访问根&lt;/p&gt;

&lt;h2 id=&quot;层序遍历&quot;&gt;层序遍历&lt;/h2&gt;
&lt;p&gt;层序遍历是通过一个队列或者栈的数据结构来跟踪每层的结点，我在下面的题目里也会用到类似的手段&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;大概了解树和二叉树后我们来通过几个题目看看怎么处理树的问题&quot;&gt;大概了解树和二叉树后我们来通过几个题目看看怎么处理树的问题&lt;/h1&gt;

&lt;h2 id=&quot;leetcode-226-反转二叉树&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/invert-binary-tree/&quot;&gt;leetcode 226 反转二叉树&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这代码非常简单，只是在后序遍历的基础上递归的替换左右子树的位置。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invertTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invertTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invertTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果你对这个代码有疑惑你可能需要了解一下关于递归的事情。&lt;/p&gt;

&lt;h2 id=&quot;leetcode-116-populating-net-right-pointers-in-each-node&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/&quot;&gt;leetcode 116 Populating Net Right Pointers in Each Node&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们继续解这个问题。
这个题目的难度也不是很大，题目要求我们保持前序遍历的顺序。自然可以想到使用前序遍历的逻辑先遍历整个树。
&lt;img src=&quot;/assets/20250314_leetcode116.jpg&quot; alt=&quot;tree&quot; /&gt;
题目要求构造一棵新的树，很自然的就能注意到，给出的函数签名是没法使用的。这时候可以思考一下这个问题是不是一个递归子问题，
一棵树想要flatten，就等于这个棵树的左子树的flatten连接右子树的flatten就好了。&lt;/p&gt;

&lt;p&gt;所以这个问题是有递归子问题的，当碰到叶子结点的时候就返回结点本身并停止递归。
我如下代码就是基于如此概念写下来的。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatten_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flatten_tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;了解了这一种解法，我们一起看一下别的解法&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Move the left node to the right node */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;cm&quot;&gt;/* Move to the end of the prev left node which is the new right node */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;cm&quot;&gt;/* Append the right node to its end */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个解法的逻辑和我上文的写法差不多，我上文的写法很清楚。&lt;/p&gt;

&lt;p&gt;下一个解法&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stackNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stackNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stackNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个逻辑简单说就是使用前序遍历把树的结点放入栈中，然后压出栈来处理。其实无论是第一种还是第二种情况都是一种隐式的使用
栈的，他们使用的是调用栈来保存信息。所以这三者看似不同其实核心逻辑几乎相同。&lt;/p&gt;

&lt;h2 id=&quot;leetcode-654-maximum-binary-tree&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-binary-tree/description/&quot;&gt;leetcode 654 Maximum Binary tree&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个很简单，没什么需要聊的，处理好左右子树就可以递归的解决了。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_bigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;big_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;big_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;big_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constructMaximumBinaryTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_bigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructMaximumBinaryTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructMaximumBinaryTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面是更快的算法。我们试着分析一下，&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constructMaximumBinaryTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;leetcode-105-construct-binary-tree-from-preorder-and-inorder-traversal&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/&quot;&gt;leetcode 105 Construct Binary Tree from Preorder and Inorder Traversal&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这题很有趣，通过前序遍历和中序遍历，感受不同种遍历的位置关系存储的不同。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;为什么单一遍历的串没法唯一的返回一个树?&lt;/li&gt;
  &lt;li&gt;前序遍历和中序遍历有什么特点?&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_preo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_preo_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_preo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_preo_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_inordero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_inorder_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_preo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_preo_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_preo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_preo_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_inordero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_inorder_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;leetcode_106-construct-binary-tree-from-inorder-and-postorder-traversal&quot;&gt;[leetcode_106 Construct Binary Tree from Inorder and Postorder Traversal]&lt;a href=&quot;https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这道题是用后序遍历和中序遍历来构造，逻辑差不多，三种遍历构造结束之后会一起说。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_insz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_postsz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_insz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_postsz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_insz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_postsz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_insz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_postsz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;leetcode-889-construct-binary-tree-from-preorder-and-postorder-traversal&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/&quot;&gt;leetcode 889 Construct Binary Tree from Preorder and postorder Traversal&lt;/a&gt;&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constructFromPrePost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_pre_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_post_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_pre_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_post_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;postorderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructFromPrePost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_pre_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l_post_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructFromPrePost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r_pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_pre_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r_post_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;以上三个题目分别使用遍历信息得出一棵树，前序+中序、后序+中序都是可以得到唯一的树，
但前序+后序是没法得出唯一的树。
前序和后序遍历是没法把确认左右子树的，唯有中序遍历可以分辨左右子树。所以前序和后序遍历没法唯一确定一个树。&lt;/p&gt;

&lt;h2 id=&quot;leetcode_912-sort-an-array&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/sort-an-array/description/&quot;&gt;leetcode_912 sort an array&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这题的难点是使用时间复杂度小于$\mathcal{O}(nlog(n))$的排序算法
这题我使用merge sort来演示，merge sort本质上是在问题域中使用缩小问题的方式，把待处理的数据以树的结构分解，之后再依次合并，这样可以有效的控制时间复杂度再目标以内。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* int *res = calloc(1, sizeof(int)); */&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* *res = *nums; */&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* return res; */&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sortArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;merge sort没有什么难点，从代码形式上看merge sort是一种对问题树的后序遍历。这个算法的关键是有序数组的合并。&lt;/p&gt;

&lt;h2 id=&quot;引用&quot;&gt;引用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://epaperpress.com/sortsearch/has.html&quot;&gt;数据结构的网站&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;
&lt;p&gt;这周有些不舒服，没有完成树的很多背景知识，二叉搜索树和别的树的介绍得下周才行了。
这周只是介绍了二叉树的遍历方式，如果让我一句话概括一下，树和递归有很强的联系，从某种程度上说，递归本身就是一种树。
树相关的题目难度很低，基本上可以通过遍历树的方式和建立递归，这两种方式解决。下周会详细介绍更多的树的类型，他们各自有各自的
性质，这些性质保证了算法的性质。需要的是理解这些性质。&lt;/p&gt;

&lt;p&gt;Sun Mar 16 10:26:58 PM CST 2025&lt;/p&gt;
</description>
          <pubDate>2025-03-08T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/a-rts_w4_data_structions3</link>
          <guid isPermaLink="true">https://niclas3.github.io/a-rts_w4_data_structions3</guid>
        </item>
      
    
      
        <item>
          <title>[A]RTS 数据结构的基石2</title>
          <description>&lt;h2 id=&quot;数组&quot;&gt;数组&lt;/h2&gt;

&lt;p&gt;我们在&lt;a href=&quot;/a-rts_w2_data_structions&quot;&gt;上一篇&lt;/a&gt;文章里探讨了一些以链表为主的线性表的算法，这周我们会探讨数组。&lt;/p&gt;

&lt;p&gt;数组和链表都是一种线性表，但是他们的静态表现不同。数组是&lt;strong&gt;紧密排列&lt;/strong&gt;的内存区域，而链表
是&lt;strong&gt;随机排布&lt;/strong&gt;的内存。【&lt;em&gt;链表的发明&lt;/em&gt;是有原因的，&lt;a href=&quot;https://en.wikipedia.org/wiki/Drum_memory&quot;&gt;磁鼓存储&lt;/a&gt;】&lt;/p&gt;

&lt;p&gt;关于数组的使用，关键在与其指针的运用。这里引入一个滑动窗口问题来介绍。&lt;/p&gt;

&lt;h2 id=&quot;发现滑动窗口&quot;&gt;发现滑动窗口&lt;/h2&gt;

&lt;p&gt;在讨论滑动窗口之前，我们先看看，使用滑动窗口的场景有什么特点？
用一个leetcode的题目来看看。&lt;/p&gt;

&lt;h2 id=&quot;leetcode-76-minimum-window-substring&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-window-substring/description/&quot;&gt;leetcode 76 Minimum window Substring&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这题是从一个字符串里找到最短的包含指定字符的字符串。&lt;/p&gt;

&lt;p&gt;比如目标字串 &lt;strong&gt;s=”ADOBECODEBANC”&lt;/strong&gt;, 指定的字符是 &lt;strong&gt;t=”ABC”&lt;/strong&gt;
那么答案就是 &lt;strong&gt;BANC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;讨论这个问题的时候，很容易就想到使用两个指针来创造一个窗口来判断这个窗口的字符串是否符合要求。
我们先根据这个朴素的逻辑写一个代码。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_target_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;set_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%c &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_target_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;print_range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样如上代码所演示的逻辑。我们挑一个来解释。&lt;/p&gt;

&lt;p&gt;当s=ADOBECODEBANC&lt;/p&gt;

&lt;p&gt;i=0, j=0&lt;/p&gt;

&lt;p&gt;t=ABC&lt;/p&gt;

&lt;p&gt;大概当j=5的时候ABC的target就都被满足了，这时候就找到了指定字符。这样就只要把所有字符串
挑短的留下来，这样就能找到最短的情况&lt;/p&gt;

&lt;p&gt;来算一下这个函数的时间复杂度看看&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_target_char(from,to,s,t)&lt;/code&gt;
$ \mathcal{O}(w \times |t|) $&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minWindow(s,t)&lt;/code&gt;
$\mathcal{O}(|s| \times |t|)\times \mathcal{O}(|s|^2)$&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01. A D O B E C 
02. A D O B E C O 
03. A D O B E C O D 
04. A D O B E C O D E 
05. A D O B E C O D E B 
06. A D O B E C O D E B A 
07. A D O B E C O D E B A N 
08. A D O B E C O D E B A N C 
09.   D O B E C O D E B A 
10.   D O B E C O D E B A N 
11.   D O B E C O D E B A N C 
12.     O B E C O D E B A 
13.     O B E C O D E B A N 
14.     O B E C O D E B A N C 
15.       B E C O D E B A 
16.       B E C O D E B A N 
17.       B E C O D E B A N C 
18.         E C O D E B A 
19.         E C O D E B A N 
20.         E C O D E B A N C 
21.           C O D E B A 
22.           C O D E B A N 
23.           C O D E B A N C 
24.             O D E B A N C 
25.               D E B A N C 
26.                 E B A N C 
27.                   B A N C 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;想想看这个思路&lt;strong&gt;重复计算&lt;/strong&gt;了什么？&lt;/p&gt;

&lt;p&gt;如果我们需要的是最小的串那在我们发现&lt;strong&gt;ADBEC&lt;/strong&gt;后的所有串都是不需要的,但是这个方法是必须把这些串都算完才能找下一组。
也就是说在发现一个串之后，应该立刻break当前循环，continue外层循环。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_target_char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;print_range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;修改之后得出的数据明显少了很多。这样相当于只调控&lt;strong&gt;右边&lt;/strong&gt;的指针让右边指针及时退出，明显
还可以通过调整&lt;strong&gt;左边&lt;/strong&gt;的指针来让数据变更少。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. A D O B E C
2.   D O B E C O D E B A
3.     O B E C O D E B A
4.       B E C O D E B A
5.         E C O D E B A
6.           C O D E B A
7.             O D E B A N C
8.               D E B A N C
9.                 E B A N C
10.                  B A N C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;经过观察你可以发现第二次的数据的最右边都是target数组里的字符 。上图的&lt;strong&gt;2-6&lt;/strong&gt;和&lt;strong&gt;7-10&lt;/strong&gt;都是同一个字串的简化。所以其实同样的，在确定右边指针后就可以调整左边指针来寻找最好&lt;em&gt;情况&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;滑动窗口，几乎要被发明出来了。&lt;/p&gt;

&lt;h2 id=&quot;滑动窗口&quot;&gt;滑动窗口&lt;/h2&gt;

&lt;p&gt;很自然的我们发现如果有一个既可以控制左边指针又能控制右边指针的算法，就能再一次简化搜索范围。&lt;/p&gt;

&lt;h2 id=&quot;滑动窗口的算法&quot;&gt;滑动窗口的算法&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先需要left-right指针这两个指针构成我们需要的窗口。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过循环增加right指针从而扩大窗口，直到在窗口中看到所有目标元素。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;窗口包含所有目标元素后，right指针停止扩大，增加left指针，从而缩小窗口直到窗口中的字符串不符合要求&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重复2.3.步骤，直到right到达字符串的末尾&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下是我给出的一个C的方案。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_target_char_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* int map[24] = {0}; */&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// test [from, to] range&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;set_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;set_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minWindow_opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 这里的left和right构成了一个窗口&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// map负责记录当前的窗口的字符串有没有满足字符串t要求&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// lastmap是为了记录上一个满足要求的字符串&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 为了记录最短的窗口&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// 右边的指针从0的位置开始到目标s字符串结束为止&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 大多数情况right会遍历完字符串&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// hastargetcharmap函数判断当前的窗口是否满足字符串t的要求&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_target_char_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 如果满足要求，就需要缩小left的窗口，即left++&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;// 保存这个满足要求的map到lastmap&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;// 这里判断一下当前这个满足要求的窗口是不是最小的窗口&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;// 如果比最小的窗口还要小那么就记录下来&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;// 如果left==right且他们也是满足要求的字符串说明就是他们&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;// 缩小left窗口&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;c1&quot;&gt;// 判断缩小后的窗口是不是满足要求，如果满足就继续缩小&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_target_char_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// left缩小窗口后没有满足要求，就需要扩大窗口，直到字符串末尾&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;下面修改过的方案，可以发现这个方案还是没法通过leetcode最后几个test case, 这时候我们可以通过算函数的时间复杂度来判断如何修改策略。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_target_char_map(from,to,s,t,t_len,target_map)&lt;/code&gt; $ \mathcal{O}( (to-from) \times tlen + mapsize)$
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minWindow_opt(s,t)&lt;/code&gt; $\mathcal{O}(slen) \times \mathcal{O}( (to-from) \times tlen + mapsize) $&lt;/p&gt;

&lt;p&gt;整体应该是  $\mathcal{O}(N \times K \times M)$&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define MAP_SIZE 128
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define set_key(map, c) map[c - &apos;A&apos;] += 1;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_target_char_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* int map[24] = {0}; */&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// test [from, to] range&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;set_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\0&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minWindow_opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAP_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;set_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;has_target_char_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortest_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面会给出一个更简单效率更高的方案，我通过分析他们的不同来写出滑动窗口需要关注的点。&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minWindow_opt_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// 这里有个关键就是怎么判断当前窗口的字符串已经是合适的字符串了&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// 这里使用了cnt变量来控制。&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// 假设 t=ABC 如果一个字符串str完全包含这三个字符，我只需要在str有相关&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// 字符出现的时候增加cnt的值就行了，即使存在t = AA两个字符相同，也可以通过&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// 判断need和window中实际字符对应的个数来判断。&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// &lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// cnt更像是一个检查记录，维护这个记录就不需要像上面那个代码一样遍历整个map&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// &lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;need&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;整体应该是  $\mathcal{O}(N \times M)$ 因为只有两个嵌套循环。
滑动窗口是一种双指针在矩阵中的应用。&lt;/p&gt;

&lt;p&gt;上文我们看的滑动窗口的例子，应该着重看滑动窗口的思路如何一步步展开优化的，可以对比倒数第一个和第二个代码，
他们的代码思路差不多，但是整体的时间复杂度完全不同。抓住问题的本质才是减少时间复杂度的关键。&lt;/p&gt;

&lt;p&gt;我们看一下另一个双指针应用的问题&lt;/p&gt;

&lt;h2 id=&quot;binary_search&quot;&gt;二分搜索&lt;/h2&gt;

&lt;p&gt;二分搜索是一个很容易出错也很容易理解的算法。简单来说就是通过不断寻找剩下的数据的中间值
来搜索目标数字。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Knuth&lt;/a&gt;在他的&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&quot;&gt;《计算机程序设计与艺术》&lt;/a&gt;卷三6.2.1中提到“尽管二分查找的基本思想相当简单，但细节可能需要更强的技巧，许多优秀的程序员在最初尝试的时候，
都有可能多次犯错。”&lt;/p&gt;

&lt;p&gt;既然是这样不如我们自己试试看先。既然是这样不如我们自己试试看先&lt;/p&gt;

&lt;h2 id=&quot;leetcode-704-binary-search&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-search/&quot;&gt;leetcode 704 Binary Search&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;问题很简单我会提供一个我初次尝试这个问题的一个答案（这是一个错误答案）通过这个错误答案我想分析一下思考上的问题。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_first_seen_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;二分搜索的逻辑很简单，我来详细的描述一下&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;【初始化】定义两个指针left，right，left初始为0,right初始为目标集合的最后一个元素。&lt;/li&gt;
  &lt;li&gt;【找中项】中项$mid =\lfloor (left + right) \div 2 \rfloor$,我们处理的集合是一个有序集合如果寻找的元素K 在集合中必然存在$K_l \leq K \leq K_r$, 如果不存在K， 则等到 $right &amp;lt; left$ 代表没有找到目标&lt;/li&gt;
  &lt;li&gt;【比较值】如果$K&amp;lt; K_i$,去4, 如果$K&amp;gt;K_i$ 去5 如果$K = K_i$ 找到。&lt;/li&gt;
  &lt;li&gt;【调整右】right = mid + 1， 并跳转到2.&lt;/li&gt;
  &lt;li&gt;【调整左】left = mid - 1， 并跳转到2.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: left;&quot;&gt;
graph TD
    A[&quot;1.【初始化】&quot;] ==&amp;gt; B[&quot;2.【找中项】&quot;]
    B --&amp;gt; C[&quot;3.【比较值】&quot;]
    D[&quot;4.【调整右】&quot;] ----&amp;gt; B
    E[&quot;5.【调整左】&quot;] ----&amp;gt; B
    C --&amp;gt; D
    C --&amp;gt; E
    C -.-&amp;gt; F[&quot;SUCCESS&quot;]
    B -.-&amp;gt; G[&quot;FAILURE&quot;]

    class C,D blueNode;
    class E,F greenNode
    classDef blueNode fill:#aaaaff,stroke:#0000ff,stroke-width:2px;
    classDef greenNode fill:#aaccff,stroke:#00ffff,stroke-width:2px;
&lt;/pre&gt;

&lt;p&gt;结合&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_first_seen_search()&lt;/code&gt; 的代码和二分搜索逻辑来反思错误的思考逻辑。&lt;/p&gt;

&lt;p&gt;拿到二分搜索的问题，首先就知道需要通过不断的取中值来获得目标，这样自然需要2个指针来维护一个搜索空间。然后你需要一个中间项的获取逻辑，和判断是否命中target，
单纯只是给左右边界赋值mid会导致在某些情况没有办法缩小空间。&lt;/p&gt;

&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
  &lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;int nums[] = {-1, 0, 3, 5, 9, 12};&lt;/li&gt;
    &lt;li&gt;int target = 2;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;ol&gt;
    &lt;li&gt;left=0 right=5 mid=2 nums[2]=3&lt;/li&gt;
    &lt;li&gt;left=0 right=2 mid=1 nums[1]=0&lt;/li&gt;
    &lt;li&gt;left=1 right=2 mid=1 nums[1]=0&lt;/li&gt;
    &lt;li&gt;left=1 right=2 mid=1 nums[1]=0&lt;/li&gt;
  &lt;/ol&gt;

&lt;/div&gt;

&lt;p&gt;上面的例子就显示了left right指针被被“固定”在一个地方了。首先,我们使用$\lfloor
(left + right) \div 2 \rfloor$ 来计算mid值，二分搜索就是把当前数聚集分成偏大和偏小两种集合，
无论选择哪个集合当前这个mid点都被判断过了所以不应该加入下一次的迭代。&lt;/p&gt;

&lt;p&gt;我们期待的表现应该是这样。&lt;/p&gt;
&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;int nums[] = {-1, 0, 3, 5, 9, 12};&lt;/li&gt;
    &lt;li&gt;int target = 2;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;ol&gt;
    &lt;li&gt;left=0 right=1 mid=2 nums[2]=3&lt;/li&gt;
    &lt;li&gt;left=1 right=1 mid=0 nums[0]=-1&lt;/li&gt;
    &lt;li&gt;left=2 right=1 mid=1 nums[1]=0&lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;下面给出二分搜索的正确逻辑&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里使用 l+（r-l）是为了处理加的溢出&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当我们完全了解如何写一个二分搜索之后，我们可以再细分的了解这个算法。为了了解二分搜索我们应该
把这个算法执行当作一个二叉决策树。&lt;/p&gt;

&lt;p&gt;这是一个N=16的二叉树&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: left;&quot;&gt;
graph TD;
    8 --&amp;gt; 4;
    8 --&amp;gt; 12;
    
    4 --&amp;gt; 2;
    4 --&amp;gt; 6;
    12 --&amp;gt; 10;
    12 --&amp;gt; 14;
    
    2 --&amp;gt; 1;
    2 --&amp;gt; 3;
    6 --&amp;gt; 5;
    6 --&amp;gt; 7;
    10 --&amp;gt; 9;
    10 --&amp;gt; 11;
    14 --&amp;gt; 13;
    14 --&amp;gt; 15;
    
    1 --&amp;gt; a[&quot;0&quot;];
    1 --&amp;gt; b[&quot;1&quot;];
    3 --&amp;gt; c[&quot;2&quot;];
    3 --&amp;gt; d[&quot;3&quot;];
    5 --&amp;gt; e[&quot;4&quot;];
    5 --&amp;gt; f[&quot;5&quot;];
    7 --&amp;gt; g[&quot;6&quot;];
    7 --&amp;gt; h[&quot;7&quot;];
    9 --&amp;gt; i[&quot;8&quot;];
    9 --&amp;gt; z[&quot;9&quot;];
    11 --&amp;gt; k[&quot;11&quot;];
    11 --&amp;gt; l[&quot;12&quot;];
    13 --&amp;gt; m[&quot;13&quot;];
    13 --&amp;gt; n[&quot;14&quot;];
    15 --&amp;gt; o[&quot;15&quot;];
    15 --&amp;gt; q[&quot;16&quot;];
&lt;/pre&gt;

&lt;p&gt;如图你可以很直观发现，这个算法每一次选择都会减少当前集合K的一半，也就是N次选择，就会有
$ K / 2^N $数据被排除。当成功选择到target number时候$K / 2^N = 1$ 所以 $N=log_2 K$ 所以这时候
时间复杂度是 $\mathcal{O}(log K)$&lt;/p&gt;

&lt;p&gt;二分查找有他的局限性，但二分查找的分而治之的逻辑值得借鉴，类似的还有&lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_sequence&quot;&gt;斐波那契&lt;/a&gt;查找和&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpolation_search&quot;&gt;插值查找&lt;/a&gt;。之后可能会
补充说明。&lt;/p&gt;

&lt;h2 id=&quot;二分搜索的两种变种-搜索左边界和搜索右边界&quot;&gt;二分搜索的两种变种 搜索左边界和搜索右边界&lt;/h2&gt;
&lt;p&gt;上述的二分算法是没法处理类似{1,2,2,2,2,2,5,6}寻找“2”，这种类型的数据。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search_l_most&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里就是右边的部分&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里是处理hit target的部分&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这里处理左边的部分&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;同样的逻辑你可以写出最右边的那个位置的函数。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search_r_most&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre_mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;看完二叉查找之后我们继续对于数组的另一个处理技巧前缀和数组&lt;/p&gt;

&lt;h2 id=&quot;前缀和数组&quot;&gt;前缀和数组&lt;/h2&gt;
&lt;h2 id=&quot;leetcode-303-range-sum-query-immutable&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-immutable/&quot;&gt;leetcode 303 Range Sum Query-Immutable&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;前缀和&lt;/strong&gt;没有什么理解上的难度，就是一组数据，计算他们前N个元素的和并记录下来。&lt;/p&gt;
&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sum_lst&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cond&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;null?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;else&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sum_lst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面给出303的答案&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;NumArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;numArrayCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NumArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numsSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numArraySumRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;numArrayFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以构造前缀和的原因是因为加法具有累加性，这种累加性可以构造一种递归结构，从而通过记录上次的值来减少重复的遍历数组。&lt;/p&gt;

&lt;p&gt;$prefix[i] = arr[0] + arr[1]+ … + arr[i]$&lt;/p&gt;

&lt;p&gt;$prefix[i] = prefix[i-1] + arr[i]$&lt;/p&gt;

&lt;p&gt;这样的构造方式我们只需要从左往右遍历一次数组，就可以算出每一个元素的前缀和了，这时候时间复杂度是$\mathcal{O}(N)$
而区间的和$sum(L,R) = prefix[R] - prefix[L-1]$
推导很简单带入上面的算式就可。这样求解区间的总和的时间复杂度是$\mathcal{O}(1)$。&lt;/p&gt;

&lt;h2 id=&quot;前缀和的二维拓展&quot;&gt;前缀和的二维拓展&lt;/h2&gt;
&lt;h2 id=&quot;leetcode-304-range-sum-query-2d-immutable&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-2d-immutable/description/&quot;&gt;leetcode 304 Range Sum Query 2D-Immutable&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;二维拓展的逻辑和一维类似，这里唯一需要关心的是当预处理矩阵的时候直接遍历的复杂度是$\mathcal{O}(N)$
而前缀和的预处理$\mathcal{O}(N)$和查询$\mathcal{O}(1)$，如果把预处理耗时也算上单次查询前缀和不一定是一个更好的选择，但是可以肯定的是，大量查询的情况下前缀和依然非常值的使用。&lt;/p&gt;

&lt;p&gt;这里可以学习的就是通过预先构造数据结构（preprocessed data）来避免后期重复计算类似的预处理数据结构还有差分数组，树状数组（fenwick tree），线段树（segment tree）&lt;/p&gt;

&lt;h2 id=&quot;差分数组&quot;&gt;差分数组&lt;/h2&gt;
&lt;h2 id=&quot;leetcode-1109-corporate-flight-bookings&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/corporate-flight-bookings/&quot;&gt;leetcode 1109 corporate flight bookings&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个题目很容易就能想到一个时间复杂度为 $\mathcal{O}(N \times (end-start))$ 的算法，如下。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;corpFlightBookings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookingsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookingsColSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;returnSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookingsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corpFlightBookings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARRAY_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;csize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果构造一个差分数组就可以在$\mathcal{O}(1)$时间内处理了。&lt;/p&gt;

&lt;p&gt;差分数组是前缀和的逆运算, 差分数组记录了相邻元素的变化，通过对D进行前缀和累加，就可以恢复原始数组A&lt;/p&gt;

&lt;p&gt;$diff[i] = arr[i] - arr[i-1]$&lt;/p&gt;

&lt;p&gt;$arr[i] = arr[i-1] + diff[i]$&lt;/p&gt;

&lt;p&gt;考虑到差分数组需要前缀和才能恢复原来数据，所以差分数组分为两个时间复杂度，更新$\mathcal{O}(1)$
还原 $\mathcal{O}(N)$ 但是直接修改是 $\mathcal{O}(N \times M)$, 所以差分数组在计算区域位置的增量更新有效率的。&lt;/p&gt;

&lt;p&gt;为什么只需要改两头而不需要处理中间的情况，其实关键在于还原的操作，还原操作是前一项和差分数组的和，所以只要
改第一个就会一直影响到后面，这也说明了为什么需要在right+1处还原增量。&lt;/p&gt;

&lt;p&gt;我随便给一个演示&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;# 原始数组
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;# 差分数组
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;额外加一个&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;以便处理边界&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# 假设我们要对区间 [2, 4] (即 A[2] 到 A[4]) 进行 +3 操作
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;# 通过前缀和恢复修改后的 A
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;

&lt;p&gt;这周处理了滑动窗口，二分搜索和一些数据预处理的技巧。下周是树的相关&lt;/p&gt;

&lt;p&gt;Fri Mar  7 05:51:30 PM CST 2025&lt;/p&gt;
</description>
          <pubDate>2025-03-07T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/a-rts_w3_data_structions2</link>
          <guid isPermaLink="true">https://niclas3.github.io/a-rts_w3_data_structions2</guid>
        </item>
      
    
      
        <item>
          <title>[Share]就像我们知道的一样编程被AI终结了 </title>
          <description>&lt;p&gt;&lt;a href=&quot;https://www.oreilly.com/radar/the-end-of-programming-as-we-know-it/&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我这周想要换一个方式来分享文章。这周分享的是OREILLY的一篇文章。文章大概说明，我们先在面对的
AI替代程序员开发的事件并不是不可预料的，就像工业革命时期的工人们，也是淘汰使用旧技术，转而使用
效率更高的新技术。&lt;/p&gt;

&lt;p&gt;而计算机发展从来都是越来越容易编程，从卡片到接线到开发了操作系统到更新了OO的编程语言，编程作为
一种技能越来越容易被人掌握，从而完成更多的需求。&lt;/p&gt;

&lt;p&gt;文章里提到了一个经济学悖论，jevons
paradox，这个悖论大概的意思是当你提升资源使用率后，由于成本降低导致需求增加，这样使得资源消耗的速度
不减少反而增加。AI越好用就会越来越快越大量被攫取。&lt;/p&gt;

&lt;p&gt;也许编程不会被取代，但一定会被改变，也许你可以了解一下&lt;a href=&quot;https://www.anthropic.com/news/model-context-protocol&quot;&gt;MCP&lt;/a&gt;，把AI加入你的开发流程里去。&lt;/p&gt;

&lt;p&gt;我这里留一个问题给之后的我，或者看这个文字的你。&lt;/p&gt;

&lt;p&gt;AI时代的程序员，应该积累什么样的知识呢？
“You are getting left behind if you do not adopt chat-based programming as your primary modality.”对于这句话
你怎么看？ 对话式编程真的是未来AI编程的终极状态了吗？真的吗？&lt;/p&gt;
</description>
          <pubDate>2025-03-02T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/art-s-w2_the_end_of_programming_as_we_know_it</link>
          <guid isPermaLink="true">https://niclas3.github.io/art-s-w2_the_end_of_programming_as_we_know_it</guid>
        </item>
      
    
      
        <item>
          <title>AR[T]S vim 使用小贴士</title>
          <description>&lt;p&gt;今天分享一个我看到的Vim使用的&lt;a href=&quot;https://www.youtube.com/watch?v=ePzAP38NZ1I&quot;&gt;tricks&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用 VISUAL-MODE 选中一段英文后按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g?&lt;/code&gt; ,可以得到&lt;a href=&quot;https://en.wikipedia.org/wiki/ROT13&quot;&gt;rot-13&lt;/a&gt;加密后的文字。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用 VISUAL-MODE 选中一段文字后按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!command&lt;/code&gt; ,就可以使用linux命令来filter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 INSERT-MODE 的时候按 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;C-r&amp;gt;=&lt;/code&gt; 可以做数学运算可以做数学运算&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;后&quot;&gt;后&lt;/h1&gt;
&lt;p&gt;我找了3个我可能会用的小技巧，之后也许会使用这种形式来记录一些tips。&lt;/p&gt;

&lt;p&gt;Sun Mar  2 10:00:56 PM CST 2025&lt;/p&gt;
</description>
          <pubDate>2025-03-02T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/ar-t-s_w2_vim_tips</link>
          <guid isPermaLink="true">https://niclas3.github.io/ar-t-s_w2_vim_tips</guid>
        </item>
      
    
      
        <item>
          <title>[A]RTS 数据结构的基石 </title>
          <description>&lt;h2 id=&quot;数据---结构---信息&quot;&gt;数据 - 结构 - 信息&lt;/h2&gt;

&lt;p&gt;数据（data）： 是符号、数字、字母或者二进制序列，数据本身可能没有意义。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;11110000100111111001001110001000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这只是比特的排列，但没有赋予特定的解释。&lt;/p&gt;

&lt;p&gt;结构（structure）：是数据的组织方式，决定了数据的可用性&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;11110000 10011111 10010011 10001000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果按照UTF-8来解读，它可能是某个emoji&lt;/p&gt;

&lt;p&gt;信息（infomation）：是数据在某种结构下被解读后的可用内容。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;11110000 10011111 10010011 10001000 -&amp;gt; 🐸
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;表list思维里的结构&quot;&gt;表（list）思维里的结构&lt;/h2&gt;
&lt;p&gt;说到数据结构的基本组成，Knuth告诉我们有两种，一种是线性表，一种则是树。&lt;/p&gt;

&lt;p&gt;回想一下我可不可以回溯的找到一种原因去解释为什么是这两者，线性表是一种线性结构，
而树是一种非线性结构。似乎在名字里给出了我们一些线索&lt;strong&gt;线性&lt;/strong&gt;。计算机从图灵机开始就是
假设一种在纸带上运作的读写头，这整个纸带就是一个表（list）似乎所有的计算机操作都
离不开这样一种假设，表结构从根本上与计算这个概念契合。&lt;/p&gt;

&lt;p&gt;表结构在很多情况下可以最自然的表示顺序关系。在自然种，前后关系几乎是不可避免的，任何
一组元素，只要他们聚集在一起，都会存在一种顺序，这时候就可以认为他们构成了一个表结构。
小到自然数的构成。&lt;/p&gt;

&lt;p&gt;表结构这种强调前后的位置关系的结构的引入也带来一种特性，局部性原理，cache的出现就是根据
如此原理。这也是表结构带来的特性。&lt;/p&gt;

&lt;h2 id=&quot;树tree关系里的结构&quot;&gt;树（tree）关系里的结构&lt;/h2&gt;
&lt;p&gt;虽然线性结构也可以通过一个元素和周围元素的距离代表他们之间的关系，但远远没有树这种数据结构
直观。这篇文章会聚焦在线性结构，树会在之后.&lt;/p&gt;

&lt;h2 id=&quot;评价数据结构&quot;&gt;评价数据结构&lt;/h2&gt;
&lt;p&gt;评价一种数据结构，大概可以从其静态和动态性质，结构化数据的存储和表示，创建，修改，访问和销毁结构化数据的算法,
这些层面观察。&lt;/p&gt;

&lt;h2 id=&quot;线性表linear-list&quot;&gt;线性表（linear list）&lt;/h2&gt;
&lt;p&gt;线性表, n&amp;gt;=0个结点的序列X[1],X[2],…,X[n],&lt;/p&gt;

&lt;p&gt;它的基本结构性质&lt;strong&gt;仅是各项排成一行的相对位置&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在这种结构里，如果n大于0则 x1是第一个元素，xn是最后一个元素；
如果1 k n，则第k个结点xk之前的是xk-1,之后的是xk+1.&lt;/p&gt;

&lt;p&gt;线性表的操作&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问表的第k个元素，查看或者改变其内容&lt;/li&gt;
  &lt;li&gt;在第k个结点的前或后插入一个新结点&lt;/li&gt;
  &lt;li&gt;删除第k个结点&lt;/li&gt;
  &lt;li&gt;把两个或多个线性表合并为一个表&lt;/li&gt;
  &lt;li&gt;把一个线性表划分为两个或者多个表&lt;/li&gt;
  &lt;li&gt;复制一个线性表&lt;/li&gt;
  &lt;li&gt;确定表中的结点数&lt;/li&gt;
  &lt;li&gt;根据结点中的值，排序表中结点&lt;/li&gt;
  &lt;li&gt;搜索线性表，找出一个在某个具有特定值的结点&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;之后的内容会通过一系列的leetcode题目来培养和线性表的感觉。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;21-merge-two-sorted-lists-合并两个有序链表&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/description/&quot;&gt;21 Merge Two Sorted Lists （合并两个有序链表）&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这题比较简单。我先给一个常规解法然后在给出一个可以优化的方案&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//常规逻辑&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_big&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list_big&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;两个有序的线性表合并，没有什么复杂的逻辑按理说30-40min应该可以想出一个跑的通的方案。
记录一下我的思路，既然需要合并两个表，肯定需要遍历两个表的所有元素。使用一个嵌套的
for-each就可以一个不落的遍历所有表中元素了，这里有一个限制，这里提供的表只有它的下一个
位置的信息，也就是它是一个单向链。&lt;/p&gt;

&lt;p&gt;我的基本思路是，确定一个base表，另一个表负责提供元素添加到这个base表里。这样只需要考虑
从元素表中拿到元素试着插入base表里。&lt;/p&gt;

&lt;p&gt;由于单向表限制，我没办法操作一个元素的前一个元素，
又因为2个表都是有序线性表，所以两张表中的元素有单调性，我可以从第1个元素就判断如何合并
两个表。我总是从相对大的表向小的表合并。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在leetcode搜到的另一个写法，明显比我写的更加优雅简洁。我再看之前先问几个问题。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;这个代码怎么处理有序单向表导致没法访问前一个元素的问题？&lt;/li&gt;
  &lt;li&gt;这个代码怎么确定合并顺序的就是大合并小还是小合并大？
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//使用dummy结点&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dummy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dummy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;首先这位提供了叫做dummy的空结点当作输出。他这个的核心逻辑很像我们找一个空白纸，
然后一起从头数给定的两个数列谁比较小就先把那个node写在纸上。直到跑完所有结点。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;回答一下问题，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;问题1,他不需要处理访问上一个元素的情况，他只需要1遍pass就可以处理所有数据&lt;/li&gt;
  &lt;li&gt;问题2，他的合并顺序是小的先合并。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个方法的确减少了很多代码复杂性，看起来也更顺畅。值的学习。&lt;/p&gt;

&lt;h2 id=&quot;32-merge-k-lists&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-k-sorted-lists/description/&quot;&gt;32 merge K lists&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_big&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list_big&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;inner_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                        &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_small&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mergeKLists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listsSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因为刚刚我们才做过2个有序表的合并，所以自然而然的就会想到多个有序表的合并可以通过2个
有序表合并来实做。代码很简单，没什么可以聊。&lt;/p&gt;

&lt;p&gt;但是。&lt;/p&gt;

&lt;p&gt;很明显这个解法是有问题的。在一个巨大lists的test case 会出现超时问题。&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; 详情
&lt;/summary&gt;
[[7],[49],[73],[58],[30],[72],[44],[78],[23],[9],[40],[65],[92],[42],[87],[3],[27],[29],[40],[12],[3],[69],[9],[57],[60],[33],[99],[78],[16],[35],[97],[26],[12],[67],[10],[33],[79],[49],[79],[21],[67],[72],[93],[36],[85],[45],[28],[91],[94],[57],[1],[53],[8],[44],[68],[90],[24],[96],[30],[3],[22],[66],[49],[24],[1],[53],[77],[8],[28],[33],[98],[81],[35],[13],[65],[14],[63],[36],[25],[69],[15],[94],[29],[1],[17],[95],[5],[4],[51],[98],[88],[23],[5],[82],[52],[66],[16],[37],[38],[44],[1],[97],[71],[28],[37],[58],[77],[97],[94],[4],[9],[31],[45],[75],[35],[98],[42],[99],[68],[12],[60],[57],[94],[8],[95],[68],[13],[30],[6],[62],[42],[65],[82],[52],[67],[21],[95],[12],[71],[1],[90],[31],[38],[57],[16],[90],[40],[79],[35],[6],[72],[98],[95],[19],[54],[23],[89],[60],[5],[26],[23],[6],[13],[70],[38],[94],[20],[44],[66],[34],[26],[94],[63],[38],[44],[90],[50],[59],[23],[47],[85],[17],[72],[39],[47],[85],[96],[85],[23],[20],[44],[68],[35],[15],[25],[34],[42],[11],[79],[52],[44],[95],[18],[96],[92],[15],[91],[33],[69],[97],[53],[47],[25],[10],[62],[11],[8],[77],[61],[25],[35],[68],[95],[76],[67],[39],[74],[31],[56],[1],[72],[60],[94],[84],[55],[89],[7],[15],[93],[69],[80],[55],[55],[6],[63],[2],[76],[8],[49],[31],[44],[38],[8],[97],[51],[49],[3],[31],[31],[14],[19],[75],[9],[80],[29],[23],[54],[60],[37],[45],[17],[25],[0],[56],[64],[97],[48],[4],[50],[50],[76],[12],[54],[97],[4],[81],[48],[65],[78],[99],[9],[29],[53],[83],[47],[7],[73],[22],[5],[76],[53],[24],[30],[66],[0],[44],[70],[85],[16],[98],[55],[33],[57],[76],[78],[66],[57],[11],[78],[14],[19],[37],[33],[91],[20],[62],[33],[97],[31],[88],[89],[73],[77],[4],[58],[0],[54],[60],[15],[47],[80],[30],[55],[46],[7],[38],[0],[26],[35],[57],[13],[14],[93],[60],[54],[18],[57],[85],[29],[15],[63],[2],[17],[43],[19],[67],[47],[69],[95],[3],[73],[3],[48],[85],[58],[59],[6],[30],[24],[32],[73],[3],[97],[20],[50],[31],[80],[3],[0],[20],[33],[58],[3],[76],[50],[34],[80],[79],[32],[74],[49],[42],[49],[71],[10],[79],[83],[70],[40],[23],[50],[71],[29],[18],[46],[99],[30],[21],[76],[24],[44],[58],[96],[71],[64],[60],[98],[51],[40],[3],[51],[1],[5],[80],[18],[74],[49],[13],[20],[25],[12],[83],[88],[17],[8],[50],[24],[95],[57],[11],[90],[66],[10],[93],[53],[65],[60],[42],[3],[52],[7],[41],[10],[0],[99],[27],[71],[87],[14],[25],[41],[17],[48],[42],[15],[74],[45],[73],[20],[11],[39],[54],[5],[29],[53],[89],[66],[56],[4],[60],[98],[92],[20],[16],[80],[67],[52],[39],[98],[1],[11],[16],[91],[71],[28],[71],[61],[45],[20],[40],[58],[53],[27],[50],[11],[63],[94],[33],[27],[27],[95],[31],[42],[16],[6],[15],[24],[1],[97],[61],[3],[24],[8],[36],[81],[15],[10],[16],[5],[73],[81],[20],[91],[69],[65],[27],[36],[28],[25],[84],[67],[49],[76],[46],[76],[66],[67],[20],[84],[91],[10],[58],[11],[44],[18],[18],[34],[25],[67],[89],[18],[14],[25],[18],[28],[29],[34],[27],[40],[54],[40],[96],[35],[83],[48],[65],[11],[52],[64],[76],[37],[75],[45],[10],[15],[92],[10],[47],[37],[99],[47],[15],[93],[79],[29],[64],[79],[1],[25],[89],[58],[33],[0],[89],[70],[17],[46],[38],[43],[38],[36],[21],[19],[96],[47],[88],[59],[87],[35],[35],[12],[84],[89],[84],[34],[67],[19],[15],[45],[76],[61],[25],[19],[31],[3],[98],[98],[39],[4],[3],[79],[65],[91],[7],[24],[65],[21],[54],[6],[50],[3],[32],[32],[41],[54],[77],[17],[0],[89],[65],[47],[22],[79],[17],[16],[48],[62],[29],[39],[8],[3],[57],[61],[52],[66],[21],[57],[96],[55],[30],[94],[55],[21],[12],[93],[27],[32],[44],[91],[98],[52],[56],[70],[3],[39],[14],[99],[66],[35],[21],[43],[52],[86],[19],[50],[10],[23],[69],[5],[43],[11],[31],[92],[16],[99],[71],[39],[70],[36],[91],[57],[33],[28],[77],[10],[83],[76],[89],[91],[34],[11],[4],[26],[91],[90],[22],[64],[90],[84],[13],[41],[27],[79],[84],[37],[70],[61],[81],[65],[2],[32],[32],[54],[59],[47],[77],[62],[10],[19],[50],[77],[41],[36],[20],[99],[12],[59],[56],[90],[52],[48],[14],[44],[18],[50],[1],[95],[21],[31],[1],[45],[61],[57],[10],[28],[5],[73],[37],[69],[96],[3],[21],[75],[18],[0],[89],[62],[54],[63],[43],[89],[50],[35],[15],[64],[94],[63],[58],[52],[92],[16],[14],[20],[60],[50],[68],[41],[47],[96],[87],[1],[34],[28],[71],[48],[75],[53],[71],[29],[93],[19],[71],[20],[64],[79],[30],[10],[80],[13],[42],[38],[82],[44],[28],[93],[75],[80],[0],[96],[47],[70],[87],[43],[33],[52],[61],[24],[0],[80],[78],[57],[23],[98],[14],[45],[62],[9],[10],[49],[18],[90],[55],[43],[55],[85],[34],[75],[21],[51],[26],[51],[59],[83],[14],[37],[79],[98],[0],[37],[85],[78],[84],[42],[15],[60],[67],[40],[7],[66],[28],[62],[63],[69],[90],[23],[78],[13],[61],[10],[40],[78],[0],[94],[7],[56],[51],[86],[31],[44],[39],[76],[84],[52],[8],[14],[54],[19],[28],[71],[70],[63],[47],[24],[43],[54],[8],[81],[52],[88],[63],[59],[19],[79],[56],[61],[87],[53],[99],[88],[44],[80],[66],[83],[74],[36],[9],[67],[34],[39],[84],[51],[49],[66],[67],[10],[89],[27],[73],[81],[95],[36],[74],[35],[31],[72],[28],[98],[70],[87],[97],[89],[46],[90],[11],[12],[63],[12],[81],[51],[30],[21],[13],[28],[50],[0],[59],[54],[92],[94],[30],[32],[59],[77],[79],[32],[72],[83],[81],[53],[22],[21],[56],[18],[91],[0],[96],[20],[4],[99],[29],[44],[75],[70],[16],[99],[80],[18],[88],[52],[28],[0],[62],[40],[49],[85],[83],[15],[59],[78],[59],[61],[82],[48],[54],[40],[81],[70],[28],[51],[44],[69],[95],[69],[10],[72],[23],[25],[19],[50],[31],[43],[46],[69],[70],[94],[10],[92],[64],[24],[61],[19],[20],[62],[61],[25],[34],[49],[90],[22],[60],[93],[28],[22],[81],[66],[68],[23],[22],[39],[17],[93],[64],[78],[56],[71],[41],[55],[36],[89],[28],[20],[2],[12],[16],[47],[46],[51],[72],[11],[23],[36],[5],[7],[33],[66],[53],[12],[25],[40],[53],[57],[33],[95],[39],[51],[58],[94],[60],[38],[29],[75],[98],[92],[33],[62],[76],[36],[46],[73],[64],[84],[92],[19],[42],[28],[59],[62],[45],[16],[27],[72],[48],[0],[70],[98],[92],[45],[28],[0],[43],[92],[63],[83],[72],[1],[9],[21],[86],[13],[69],[31],[57],[19],[86],[56],[16],[54],[54],[14],[15],[37],[66],[97],[77],[60],[12],[91],[31],[74],[63],[77],[24],[84],[33],[50],[27],[99],[29],[9],[44],[64],[51],[12],[79],[34],[7],[83],[0],[59],[10],[53],[91],[21],[25],[53],[29],[96],[53],[61],[58],[91],[63],[20],[68],[87],[26],[72],[19],[41],[4],[51],[92],[45],[70],[74],[62],[76],[17],[26],[13],[44],[71],[79],[35],[29],[88],[48],[78],[17],[23],[38],[8],[29],[26],[68],[6],[99],[55],[29],[76],[88],[96],[19],[64],[37],[16],[18],[91],[83],[98],[20],[48],[61],[51],[18],[77],[46],[61],[78],[28],[63],[35],[6],[8],[68],[79],[19],[23],[77],[92],[53],[78],[53],[95],[71],[75],[4],[62],[32],[19],[31],[35],[68],[68],[10],[34],[70],[78],[65],[45],[79],[75],[27],[87],[63],[37],[66],[34],[83],[75],[84],[55],[56],[99],[64],[93],[86],[33],[24],[47],[94],[30],[67],[65],[10],[82],[5],[14],[52],[41],[85],[91],[6],[60],[60],[12],[3],[30],[85],[0],[85],[67],[84],[88],[0],[86],[0],[95],[99],[2],[28],[83],[17],[36],[2],[89],[78],[25],[89],[22],[95],[5],[19],[91],[21],[74],[14],[62],[6],[83],[26],[19],[1],[30],[44],[75],[58],[62],[31],[36],[20],[8],[24],[47],[8],[11],[97],[0],[14],[96],[99],[45],[33],[62],[39],[54],[21],[86],[36],[10],[62],[73],[93],[35],[88],[71],[38],[21],[91],[13],[60],[57],[92],[43],[75],[68],[13],[15],[36],[91],[47],[69],[32],[34],[28],[43],[79],[6],[54],[7],[37],[3],[21],[47],[34],[49],[16],[59],[38],[50],[83],[86],[96],[85],[24],[22],[63],[81],[12],[51],[2],[95],[36],[54],[8],[80],[31],[30],[95],[14],[12],[36],[37],[9],[85],[19],[81],[10],[8],[9],[39],[67],[19],[66],[99],[20],[15],[77],[22],[42],[80],[81],[85],[30],[25],[36],[94],[45],[2],[33],[80],[56],[34],[17],[81],[81],[58],[5],[92],[60],[51],[1],[42],[44],[35],[55],[72],[43],[22],[13],[41],[81],[79],[18],[60],[29],[55],[82],[64],[32],[13],[95],[28],[4],[55],[11],[81],[10],[4],[51],[16],[61],[64],[5],[22],[13],[43],[36],[18],[94],[88],[43],[39],[2],[43],[70],[19],[12],[17],[32],[82],[97],[59],[73],[90],[19],[10],[11],[15],[78],[42],[45],[70],[62],[8],[83],[99],[9],[13],[50],[51],[65],[2],[17],[53],[99],[16],[84],[69],[42],[3],[15],[29],[57],[82],[64],[52],[54],[26],[27],[55],[59],[52],[86],[22],[29],[86],[49],[79],[98],[90],[3],[86],[43],[27],[85],[98],[87],[17],[31],[76],[61],[63],[14],[83],[32],[22],[11],[91],[71],[42],[33],[53],[30],[80],[4],[15],[87],[10],[81],[58],[86],[33],[40],[59],[36],[62],[38],[54],[26],[26],[12],[95],[21],[77],[41],[58],[54],[20],[97],[27],[51],[62],[32],[37],[4],[57],[5],[7],[43],[58],[39],[43],[97],[81],[65],[57],[5],[17],[12],[24],[84],[59],[99],[16],[40],[51],[46],[22],[93],[15],[49],[61],[49],[31],[96],[23],[96],[44],[50],[38],[31],[59],[35],[65],[1],[87],[37],[48],[20],[24],[94],[75],[3],[89],[86],[45],[43],[57],[32],[61],[78],[4],[2],[31],[20],[86],[30],[43],[67],[48],[44],[17],[49],[25],[73],[63],[16],[80],[48],[79],[57],[14],[5],[89],[7],[5],[27],[14],[15],[8],[97],[49],[95],[29],[26],[66],[98],[85],[62],[18],[53],[79],[3],[83],[23],[59],[21],[74],[34],[75],[2],[36],[79],[15],[50],[13],[50],[92],[48],[83],[81],[47],[8],[6],[78],[6],[67],[14],[10],[70],[58],[17],[46],[4],[56],[63],[37],[98],[34],[56],[8],[12],[13],[80],[24],[4],[13],[73],[62],[79],[77],[69],[47],[31],[53],[33],[39],[20],[94],[97],[24],[71],[58],[20],[48],[18],[1],[17],[92],[13],[80],[56],[40],[94],[68],[70],[63],[49],[34],[25],[71],[91],[50],[17],[10],[54],[25],[1],[94],[92],[34],[70],[46],[87],[21],[65],[89],[71],[65],[60],[10],[75],[9],[94],[23],[34],[74],[14],[94],[23],[75],[77],[57],[27],[22],[74],[72],[39],[39],[83],[17],[30],[90],[6],[96],[12],[95],[38],[16],[21],[84],[27],[78],[60],[72],[87],[35],[81],[26],[94],[30],[95],[58],[19],[12],[43],[12],[6],[28],[93],[26],[26],[26],[33],[81],[96],[92],[61],[9],[77],[24],[22],[40],[52],[15],[80],[92],[51],[52],[73],[77],[17],[26],[65],[61],[39],[49],[7],[19],[30],[76],[25],[81],[27],[59],[97],[93],[25],[29],[22],[48],[53],[79],[68],[27],[24],[31],[77],[6],[0],[72],[1],[30],[98],[77],[49],[94],[27],[52],[59],[77],[70],[51],[24],[84],[20],[15],[19],[77],[95],[95],[64],[0],[18],[17],[23],[17],[54],[68],[87],[75],[13],[22],[57],[16],[82],[42],[62],[8],[40],[5],[70],[6],[1],[19],[20],[62],[17],[35],[52],[94],[35],[10],[31],[63],[51],[47],[51],[10],[49],[47],[34],[48],[23],[88],[71],[32],[59],[56],[45],[2],[23],[89],[19],[94],[86],[7],[92],[0],[46],[1],[65],[44],[56],[74],[17],[75],[95],[66],[64],[91],[91],[40],[56],[59],[97],[97],[9],[63],[22],[85],[99],[19],[20],[92],[48],[53],[76],[76],[33],[97],[93],[3],[8],[74],[66],[3],[30],[81],[86],[25],[69],[25],[58],[85],[99],[21],[14],[60],[56],[72],[53],[53],[75],[81],[55],[62],[48],[45],[52],[70],[31],[0],[63],[47],[19],[70],[1],[59],[82],[79],[96],[29],[1],[56],[30],[81],[20],[62],[51],[45],[70],[54],[57],[93],[15],[8],[61],[66],[73],[78],[86],[30],[52],[26],[79],[10],[32],[51],[72],[1],[87],[79],[8],[37],[36],[2],[78],[23],[88],[74],[9],[96],[23],[62],[23],[46],[79],[55],[74],[22],[31],[57],[71],[79],[94],[27],[56],[36],[16],[47],[13],[84],[57],[60],[57],[0],[36],[13],[33],[75],[10],[62],[66],[6],[8],[7],[73],[37],[96],[55],[24],[66],[8],[33],[61],[57],[71],[76],[14],[14],[89],[35],[59],[38],[94],[60],[27],[43],[42],[55],[21],[11],[80],[12],[9],[90],[83],[45],[38],[34],[38],[64],[81],[40],[50],[18],[75],[98],[74],[87],[42],[88],[20],[82],[5],[34],[20],[46],[3],[20],[50],[75],[62],[42],[70],[38],[42],[15],[35],[77],[34],[67],[74],[80],[90],[96],[6],[81],[43],[72],[55],[38],[75],[20],[75],[86],[97],[5],[37],[95],[83],[95],[76],[83],[82],[27],[51],[99],[5],[51],[77],[6],[90],[95],[96],[61],[31],[25],[6],[79],[70],[24],[57],[22],[53],[73],[80],[3],[83],[34],[82],[57],[63],[41],[37],[29],[87],[86],[51],[94],[22],[30],[30],[54],[6],[19],[17],[83],[39],[13],[92],[39],[44],[68],[83],[29],[65],[5],[87],[40],[87],[97],[79],[68],[63],[0],[99],[47],[1],[88],[5],[20],[44],[72],[76],[30],[19],[69],[88],[29],[52],[32],[58],[7],[81],[62],[16],[9],[45],[48],[85],[8],[13],[67],[5],[14],[54],[35],[70],[63],[79],[58],[39],[59],[45],[23],[48],[44],[77],[37],[91],[42],[98],[77],[4],[82],[56],[75],[33],[10],[92],[70],[70],[53],[53],[28],[28],[73],[82],[71],[0],[5],[55],[21],[84],[34],[47],[28],[88],[85],[8],[58],[74],[23],[61],[72],[24],[35],[89],[56],[44],[98],[47],[95],[67],[83],[76],[43],[36],[37],[46],[62],[57],[42],[96],[3],[81],[81],[94],[88],[4],[55],[87],[83],[17],[65],[93],[56],[38],[51],[87],[90],[80],[32],[26],[29],[7],[14],[17],[25],[38],[26],[45],[57],[25],[7],[79],[51],[41],[59],[81],[65],[25],[94],[93],[64],[63],[29],[1],[72],[40],[53],[29],[32],[80],[59],[74],[40],[76],[89],[4],[18],[68],[86],[66],[62],[74],[98],[21],[27],[15],[27],[41],[9],[58],[35],[65],[61],[61],[32],[72],[19],[94],[3],[54],[31],[16],[4],[83],[74],[13],[11],[44],[8],[59],[5],[72],[92],[72],[15],[29],[13],[43],[80],[9],[5],[84],[49],[11],[9],[83],[48],[85],[7],[60],[80],[89],[63],[33],[66],[85],[0],[85],[42],[74],[91],[63],[93],[3],[98],[63],[61],[91],[77],[89],[97],[29],[12],[69],[60],[31],[65],[11],[13],[96],[50],[4],[23],[88],[22],[20],[16],[65],[77],[72],[12],[80],[76],[0],[41],[18],[75],[19],[43],[63],[81],[58],[82],[67],[52],[51],[61],[95],[17],[29],[27],[91],[86],[60],[56],[92],[1],[39],[11],[84],[70],[13],[70],[8],[85],[20],[57],[45],[97],[79],[99],[2],[83],[67],[19],[69],[37],[29],[99],[18],[18],[5],[15],[37],[15],[29],[24],[15],[66],[72],[96],[60],[78],[79],[71],[24],[45],[80],[77],[58],[54],[15],[8],[21],[8],[45],[52],[95],[11],[10],[60],[82],[10],[82],[10],[1],[60],[35],[20],[84],[6],[5],[8],[77],[24],[49],[93],[44],[16],[24],[81],[61],[85],[38],[3],[7],[22],[13],[95],[51],[83],[98],[57],[0],[56],[89],[1],[99],[10],[74],[95],[28],[91],[47],[81],[93],[20],[68],[15],[76],[24],[53],[64],[87],[95],[19],[93],[6],[5],[31],[78],[49],[30],[9],[87],[32],[74],[84],[70],[53],[11],[88],[64],[38],[88],[7],[62],[58],[16],[75],[77],[92],[77],[29],[90],[60],[51],[27],[21],[39],[40],[64],[77],[36],[5],[11],[84],[55],[75],[59],[39],[49],[99],[72],[74],[90],[66],[42],[22],[21],[60],[34],[47],[93],[17],[1],[65],[48],[74],[32],[88],[65],[58],[2],[10],[19],[10],[37],[92],[36],[48],[8],[50],[33],[19],[37],[32],[94],[93],[10],[11],[5],[58],[7],[53],[74],[64],[7],[2],[14],[69],[39],[14],[87],[95],[48],[67],[13],[67],[60],[53],[70],[83],[56],[68],[26],[0],[22],[37],[99],[71],[96],[17],[41],[58],[35],[88],[71],[73],[7],[20],[92],[93],[52],[89],[13],[28],[3],[98],[17],[50],[88],[46],[43],[65],[88],[11],[66],[43],[38],[4],[67],[57],[22],[46],[31],[3],[20],[27],[64],[51],[5],[29],[42],[16],[88],[50],[85],[2],[73],[45],[97],[15],[52],[88],[86],[28],[17],[22],[23],[26],[96],[61],[79],[84],[42],[90],[97],[28],[11],[43],[44],[52],[25],[38],[72],[87],[57],[15],[27],[61],[82],[77],[44],[28],[13],[35],[1],[39],[23],[23],[64],[91],[58],[59],[43],[48],[27],[52],[33],[8],[41],[21],[99],[69],[30],[81],[76],[13],[7],[54],[98],[69],[15],[80],[47],[27],[75],[88],[86],[64],[47],[6],[38],[27],[2],[31],[79],[57],[46],[27],[40],[38],[41],[42],[2],[65],[69],[11],[8],[2],[43],[73],[80],[36],[2],[64],[70],[1],[87],[40],[8],[55],[5],[87],[14],[1],[65],[99],[59],[57],[90],[43],[82],[82],[3],[39],[84],[61],[4],[32],[27],[84],[24],[56],[14],[7],[48],[8],[4],[87],[35],[32],[36],[57],[25],[64],[54],[28],[33],[23],[30],[44],[70],[32],[4],[85],[79],[64],[55],[26],[79],[10],[20],[90],[1],[24],[49],[67],[2],[10],[4],[63],[60],[64],[28],[27],[1],[0],[82],[44],[85],[69],[23],[55],[68],[78],[27],[69],[74],[21],[37],[57],[20],[89],[12],[42],[83],[2],[41],[52],[67],[87],[88],[7],[33],[32],[81],[3],[32],[27],[50],[85],[70],[19],[23],[65],[74],[17],[18],[93],[0],[34],[91],[57],[19],[45],[93],[12],[79],[69],[18],[30],[98],[49],[57],[90],[68],[8],[26],[72],[52],[17],[93],[11],[41],[31],[7],[68],[63],[1],[22],[37],[58],[78],[46],[94],[63],[83],[10],[84],[73],[87],[32],[69],[7],[62],[84],[48],[35],[30],[98],[94],[26],[50],[34],[15],[68],[91],[99],[71],[69],[1],[96],[10],[73],[92],[11],[28],[0],[12],[79],[39],[69],[51],[14],[64],[84],[11],[44],[91],[27],[41],[99],[97],[95],[6],[91],[11],[38],[82],[53],[18],[23],[3],[80],[8],[73],[37],[80],[99],[93],[49],[43],[18],[46],[75],[75],[81],[76],[30],[35],[28],[48],[97],[62],[61],[47],[37],[14],[95],[30],[7],[56],[25],[43],[66],[15],[50],[42],[75],[23],[65],[12],[29],[80],[73],[57],[56],[23],[53],[6],[52],[76],[62],[38],[11],[66],[94],[9],[82],[96],[9],[96],[44],[35],[65],[58],[3],[3],[4],[46],[55],[50],[75],[27],[63],[52],[11],[84],[87],[16],[77],[51],[90],[83],[20],[99],[90],[42],[11],[36],[62],[60],[69],[14],[78],[66],[57],[99],[50],[19],[98],[43],[68],[76],[1],[46],[88],[20],[81],[49],[11],[47],[44],[76],[96],[78],[56],[36],[62],[39],[39],[79],[87],[66],[0],[6],[91],[56],[98],[46],[70],[33],[1],[90],[84],[58],[27],[94],[86],[97],[89],[35],[27],[68],[0],[64],[40],[88],[10],[83],[23],[31],[23],[56],[14],[12],[69],[52],[62],[81],[35],[35],[71],[24],[70],[66],[93],[28],[26],[33],[99],[3],[26],[88],[41],[89],[19],[81],[15],[23],[98],[52],[68],[61],[89],[1],[83],[93],[20],[13],[42],[26],[50],[56],[32],[6],[92],[64],[2],[6],[90],[19],[2],[34],[75],[92],[32],[94],[69],[43],[47],[27],[95],[64],[93],[66],[94],[84],[58],[21],[66],[70],[42],[92],[54],[29],[45],[47],[72],[80],[96],[97],[46],[40],[6],[0],[43],[81],[14],[75],[17],[2],[92],[11],[68],[75],[37],[98],[32],[37],[66],[86],[92],[4],[60],[59],[15],[95],[85],[81],[63],[68],[64],[78],[25],[4],[15],[26],[86],[40],[23],[8],[50],[59],[20],[97],[79],[18],[17],[57],[30],[21],[51],[71],[28],[22],[99],[52],[56],[49],[76],[4],[48],[87],[33],[14],[57],[59],[10],[76],[0],[16],[70],[72],[55],[42],[86],[14],[86],[29],[83],[87],[87],[31],[59],[85],[99],[19],[71],[69],[3],[53],[96],[41],[98],[48],[37],[26],[21],[28],[94],[63],[27],[47],[98],[31],[90],[90],[30],[23],[17],[29],[7],[83],[39],[74],[33],[46],[89],[31],[71],[55],[36],[79],[46],[84],[76],[74],[84],[85],[87],[45],[49],[0],[86],[8],[13],[12],[27],[50],[42],[85],[71],[49],[54],[68],[60],[96],[59],[73],[98],[85],[48],[19],[67],[4],[33],[29],[90],[94],[66],[31],[11],[69],[58],[99],[57],[45],[23],[55],[75],[20],[76],[75],[85],[68],[92],[67],[24],[44],[86],[90],[13],[25],[38],[43],[3],[12],[11],[96],[72],[63],[96],[27],[65],[3],[19],[43],[71],[0],[49],[29],[38],[97],[65],[16],[43],[79],[47],[48],[77],[48],[80],[60],[38],[92],[61],[17],[76],[88],[42],[45],[4],[79],[69],[75],[65],[53],[15],[40],[69],[27],[1],[56],[10],[85],[93],[6],[93],[72],[15],[99],[5],[46],[53],[37],[49],[22],[20],[54],[22],[46],[59],[96],[28],[52],[16],[57],[76],[99],[93],[3],[36],[63],[35],[15],[19],[21],[93],[52],[44],[15],[76],[23],[80],[9],[37],[23],[85],[42],[41],[57],[2],[98],[43],[62],[85],[34],[92],[23],[79],[83],[94],[86],[52],[93],[77],[9],[54],[67],[68],[98],[50],[52],[54],[32],[8],[1],[90],[41],[44],[94],[87],[74],[31],[37],[82],[96],[81],[72],[82],[33],[56],[36],[30],[15],[70],[11],[33],[46],[45],[20],[97],[26],[12],[14],[33],[1],[77],[83],[35],[45],[66],[70],[69],[47],[84],[81],[32],[41],[81],[1],[47],[23],[15],[61],[61],[32],[26],[40],[62],[64],[59],[77],[35],[55],[23],[26],[59],[23],[65],[39],[46],[67],[21],[83],[51],[73],[43],[86],[99],[17],[61],[93],[55],[14],[94],[16],[73],[7],[1],[80],[58],[4],[91],[44],[81],[63],[98],[92],[90],[20],[54],[29],[40],[81],[60],[55],[82],[79],[65],[95],[15],[50],[88],[89],[25],[57],[86],[82],[45],[14],[93],[42],[81],[12],[96],[66],[66],[90],[61],[89],[59],[35],[19],[36],[92],[23],[81],[2],[5],[27],[18],[5],[63],[92],[38],[49],[33],[8],[36],[31],[96],[28],[9],[44],[17],[36],[36],[9],[39],[90],[14],[4],[68],[56],[84],[17],[75],[65],[12],[10],[59],[88],[48],[33],[32],[34],[6],[50],[10],[7],[75],[20],[8],[21],[7],[99],[57],[61],[7],[90],[10],[0],[36],[78],[38],[93],[15],[15],[72],[47],[43],[51],[39],[95],[26],[14],[85],[19],[80],[98],[56],[9],[89],[45],[65],[76],[51],[41],[73],[15],[44],[46],[3],[83],[40],[33],[53],[86],[52],[12],[68],[82],[87],[68],[62],[4],[96],[12],[64],[9],[45],[16],[9],[61],[78],[61],[31],[12],[11],[56],[60],[99],[97],[42],[6],[23],[44],[7],[84],[87],[80],[57],[78],[40],[9],[62],[66],[21],[36],[7],[26],[37],[36],[6],[52],[30],[67],[0],[36],[16],[15],[46],[99],[77],[12],[80],[36],[24],[10],[87],[54],[35],[23],[31],[73],[77],[57],[94],[16],[65],[71],[12],[76],[25],[7],[9],[75],[50],[92],[6],[63],[88],[29],[0],[36],[3],[15],[31],[75],[97],[8],[96],[9],[16],[77],[75],[24],[57],[19],[92],[44],[57],[15],[72],[54],[25],[67],[37],[48],[96],[70],[36],[13],[42],[41],[78],[3],[81],[62],[19],[8],[11],[76],[82],[67],[23],[68],[20],[51],[20],[49],[62],[24],[91],[65],[71],[29],[69],[73],[83],[27],[68],[88],[11],[30],[24],[57],[39],[59],[60],[79],[24],[77],[86],[1],[65],[32],[47],[62],[91],[79],[91],[0],[87],[31],[23],[18],[35],[10],[24],[19],[57],[92],[64],[76],[5],[36],[31],[66],[92],[26],[20],[77],[4],[85],[7],[5],[12],[6],[71],[18],[94],[81],[69],[33],[71],[81],[86],[62],[0],[19],[41],[79],[9],[85],[79],[82],[80],[56],[19],[94],[86],[59],[22],[63],[83],[30],[28],[50],[99],[65],[97],[39],[83],[13],[53],[92],[24],[53],[13],[95],[11],[20],[69],[43],[68],[67],[51],[10],[15],[64],[91],[49],[40],[87],[23],[44],[38],[21],[67],[52],[52],[12],[56],[62],[51],[84],[0],[16],[27],[17],[20],[8],[10],[61],[90],[63],[90],[58],[4],[32],[42],[73],[10],[11],[57],[53],[14],[72],[0],[7],[21],[38],[60],[81],[34],[37],[82],[41],[10],[33],[37],[4],[9],[91],[49],[60],[71],[36],[59],[49],[75],[25],[87],[28],[80],[7],[55],[72],[7],[23],[97],[62],[12],[14],[38],[96],[19],[47],[63],[74],[58],[69],[32],[12],[67],[79],[22],[66],[48],[54],[63],[84],[47],[79],[0],[37],[23],[20],[11],[55],[38],[45],[19],[9],[77],[43],[8],[92],[76],[49],[2],[52],[13],[71],[74],[71],[4],[1],[86],[91],[0],[22],[15],[64],[57],[71],[13],[82],[77],[85],[50],[58],[70],[54],[9],[5],[10],[74],[91],[58],[66],[77],[83],[71],[15],[33],[91],[58],[21],[44],[83],[18],[73],[85],[40],[84],[27],[61],[28],[6],[15],[73],[14],[31],[54],[12],[32],[12],[39],[79],[12],[57],[18],[1],[47],[35],[87],[25],[93],[59],[33],[53],[7],[7],[52],[93],[90],[69],[33],[35],[23],[76],[61],[18],[15],[49],[79],[32],[2],[88],[35],[56],[5],[22],[34],[46],[4],[75],[93],[20],[48],[98],[87],[46],[97],[67],[20],[39],[73],[99],[16],[5],[56],[64],[34],[0],[17],[61],[56],[0],[29],[99],[4],[88],[27],[60],[96],[34],[82],[53],[48],[1],[4],[40],[36],[50],[22],[84],[81],[19],[72],[1],[90],[43],[69],[74],[79],[8],[85],[85],[22],[11],[78],[87],[2],[75],[21],[82],[16],[93],[70],[60],[81],[75],[12],[63],[51],[28],[48],[87],[57],[89],[90],[5],[89],[5],[89],[85],[67],[36],[5],[23],[59],[36],[88],[34],[51],[32],[66],[88],[35],[15],[69],[97],[87],[86],[90],[90],[69],[52],[96],[55],[1],[0],[90],[34],[94],[0],[74],[88],[86],[25],[53],[91],[68],[75],[20],[81],[99],[85],[95],[19],[51],[95],[39],[95],[69],[45],[98],[94],[79],[47],[43],[96],[26],[63],[45],[26],[71],[19],[85],[19],[80],[79],[34],[26],[47],[58],[24],[96],[73],[98],[91],[53],[39],[0],[30],[6],[60],[28],[38],[0],[10],[28],[58],[87],[94],[52],[80],[56],[98],[15],[55],[22],[43],[59],[49],[28],[0],[70],[65],[92],[89],[66],[92],[52],[57],[24],[90],[87],[5],[31],[89],[56],[38],[90],[50],[67],[96],[91],[44],[16],[33],[58],[62],[66],[19],[32],[2],[18],[77],[81],[93],[89],[47],[71],[49],[47],[41],[65],[79],[14],[99],[60],[66],[27],[71],[94],[17],[41],[95],[15],[97],[74],[51],[74],[46],[17],[79],[66],[79],[1],[97],[52],[37],[50],[70],[31],[14],[68],[97],[91],[78],[13],[19],[29],[12],[3],[36],[98],[89],[86],[9],[43],[95],[99],[4],[75],[33],[4],[61],[63],[61],[22],[51],[61],[42],[62],[88],[85],[3],[74],[18],[56],[96],[78],[11],[37],[36],[89],[60],[20],[77],[98],[18],[97],[80],[38],[35],[62],[3],[40],[92],[76],[74],[26],[34],[64],[47],[43],[92],[76],[63],[68],[90],[16],[96],[53],[60],[57],[77],[58],[65],[94],[38],[30],[13],[27],[11],[51],[46],[48],[82],[26],[71],[8],[78],[73],[5],[15],[42],[22],[90],[18],[84],[50],[44],[69],[10],[97],[2],[53],[60],[42],[91],[56],[57],[36],[89],[26],[58],[57],[1],[40],[12],[67],[48],[13],[23],[32],[75],[36],[71],[97],[54],[41],[21],[37],[72],[81],[46],[36],[32],[45],[91],[24],[69],[41],[81],[18],[83],[77],[93],[68],[8],[90],[20],[47],[6],[15],[41],[39],[35],[33],[94],[16],[35],[70],[76],[96],[63],[40],[91],[91],[51],[89],[80],[85],[17],[17],[23],[2],[29],[8],[50],[67],[86],[32],[39],[88],[15],[29],[92],[0],[4],[12],[7],[39],[77],[7],[85],[76],[14],[60],[22],[35],[9],[97],[93],[86],[76],[13],[63],[42],[1],[77],[71],[92],[84],[95],[11],[93],[79],[77],[39],[19],[49],[40],[75],[55],[33],[34],[65],[82],[48],[21],[7],[67],[3],[44],[30],[78],[50],[51],[95],[66],[95],[65],[58],[84],[14],[56],[10],[48],[43],[55],[62],[57],[44],[62],[86],[57],[85],[95],[57],[99],[77],[36],[30],[84],[47],[71],[96],[6],[93],[53],[83],[55],[38],[80],[5],[15],[33],[34],[47],[89],[94],[83],[3],[0],[19],[5],[14],[74],[64],[95],[38],[93],[20],[5],[35],[49],[14],[8],[29],[33],[83],[36],[40],[82],[36],[6],[78],[4],[46],[4],[7],[24],[83],[44],[19],[51],[6],[88],[19],[92],[17],[92],[52],[80],[20],[81],[22],[96],[1],[93],[38],[53],[74],[97],[69],[59],[61],[55],[14],[19],[7],[27],[58],[66],[1],[73],[1],[83],[12],[76],[88],[85],[69],[9],[66],[99],[64],[0],[95],[2],[24],[18],[11],[56],[34],[0],[73],[84],[94],[23],[69],[67],[71],[45],[76],[35],[97],[41],[76],[54],[88],[3],[95],[37],[45],[58],[89],[4],[47],[14],[83],[61],[13],[25],[54],[60],[76],[71],[79],[70],[99],[21],[92],[88],[89],[37],[79],[12],[97],[27],[15],[96],[23],[46],[59],[62],[68],[68],[61],[38],[68],[11],[82],[31],[95],[99],[23],[26],[97],[9],[67],[16],[90],[29],[69],[78],[9],[1],[89],[66],[40],[49],[18],[14],[75],[41],[63],[20],[64],[76],[9],[93],[34],[45],[20],[80],[54],[3],[78],[43],[88],[78],[15],[84],[95],[83],[7],[9],[33],[85],[96],[37],[13],[87],[60],[25],[45],[16],[74],[51],[68],[66],[30],[53],[4],[41],[63],[39],[90],[37],[70],[40],[51],[85],[71],[26],[22],[63],[24],[6],[91],[51],[5],[4],[61],[8],[51],[97],[48],[64],[26],[8],[24],[54],[88],[45],[91],[18],[22],[19],[68],[82],[89],[48],[82],[43],[74],[7],[26],[95],[46],[15],[4],[30],[4],[50],[14],[84],[13],[24],[93],[17],[62],[13],[59],[63],[95],[64],[17],[30],[62],[46],[13],[90],[19],[59],[34],[73],[98],[7],[82],[81],[72],[58],[87],[62],[84],[46],[42],[53],[84],[69],[87],[62],[49],[16],[41],[52],[37],[84],[87],[43],[0],[13],[49],[36],[53],[61],[97],[82],[76],[28],[83],[9],[68],[46],[75],[56],[80],[98],[54],[61],[69],[83],[78],[86],[17],[94],[61],[81],[31],[82],[89],[81],[16],[44],[8],[17],[48],[95],[59],[28],[81],[91],[81],[77],[8],[58],[56],[12],[61],[96],[12],[38],[51],[50],[69],[37],[10],[26],[91],[37],[20],[96],[21],[3],[89],[29],[79],[44],[48],[94],[88],[3],[33],[29],[69],[33],[73],[14],[84],[21],[70],[55],[57],[82],[14],[28],[48],[14],[91],[97],[4],[47],[17],[74],[14],[36],[86],[20],[75],[79],[74],[16],[53],[36],[52],[72],[62],[3],[64],[98],[39],[18],[7],[60],[11],[52],[22],[2],[76],[46],[20],[42],[95],[1],[64],[82],[91],[92],[98],[85],[96],[62],[41],[6],[72],[76],[73],[3],[96],[31],[54],[50],[69],[57],[51],[62],[92],[64],[99],[58],[78],[78],[7],[67],[21],[85],[69],[56],[50],[78],[10],[5],[39],[57],[40],[17],[83],[85],[34],[40],[20],[95],[81],[53],[19],[71],[28],[92],[28],[6],[86],[26],[63],[76],[61],[56],[62],[53],[39],[67],[60],[82],[0],[30],[20],[34],[69],[40],[12],[59],[67],[23],[25],[34],[19],[67],[45],[10],[20],[30],[36],[33],[46],[70],[60],[59],[43],[71],[21],[97],[10],[1],[43],[85],[53],[53],[81],[63],[21],[20],[11],[10],[67],[9],[64],[65],[97],[6],[67],[8],[9],[61],[57],[35],[45],[53],[12],[40],[83],[34],[65],[31],[75],[35],[4],[83],[15],[0],[86],[64],[31],[59],[35],[79],[52],[19],[58],[29],[69],[90],[92],[32],[43],[65],[93],[14],[72],[56],[71],[45],[27],[98],[61],[15],[78],[12],[31],[71],[10],[12],[32],[79],[23],[79],[69],[28],[41],[45],[9],[91],[43],[53],[46],[86],[47],[26],[6],[12],[4],[58],[3],[41],[10],[57],[48],[91],[56],[94],[37],[13],[13],[32],[66],[54],[54],[66],[90],[72],[19],[69],[94],[31],[25],[9],[68],[6],[14],[62],[67],[38],[38],[92],[19],[43],[26],[34],[6],[50],[26],[60],[69],[91],[15],[71],[66],[41],[39],[84],[12],[25],[61],[40],[19],[6],[40],[96],[41],[59],[10],[72],[13],[67],[42],[14],[96],[42],[27],[93],[78],[44],[64],[8],[91],[16],[97],[73],[80],[88],[90],[12],[61],[53],[41],[71],[30],[33],[58],[39],[16],[3],[73],[73],[11],[69],[7],[23],[81],[35],[9],[39],[5],[63],[26],[52],[47],[88],[84],[86],[69],[99],[11],[34],[13],[40],[96],[78],[52],[42],[84],[1],[37],[40],[25],[43],[43],[56],[74],[34],[62],[58],[29],[22],[6],[92],[64],[63],[1],[75],[85],[40],[23],[88],[14],[95],[59],[99],[95],[10],[81],[33],[46],[49],[36],[91],[68],[81],[39],[80],[78],[58],[63],[7],[40],[75],[68],[60],[90],[35],[55],[53],[94],[44],[68],[46],[61],[26],[26],[29],[89],[84],[25],[10],[77],[14],[68],[50],[31],[93],[38],[4],[28],[72],[1],[65],[79],[26],[93],[62],[58],[32],[16],[41],[16],[90],[89],[45],[32],[51],[29],[33],[73],[95],[95],[73],[81],[48],[50],[15],[49],[22],[87],[65],[40],[67],[73],[65],[23],[36],[8],[52],[17],[14],[33],[39],[34],[60],[86],[67],[21],[49],[81],[79],[70],[10],[0],[7],[64],[81],[29],[34],[79],[14],[22],[23],[38],[5],[12],[52],[26],[79],[33],[94],[97],[72],[71],[31],[91],[52],[42],[12],[60],[94],[76],[39],[86],[84],[82],[7],[68],[2],[17],[34],[24],[76],[87],[77],[91],[32],[70],[24],[57],[96],[82],[96],[96],[31],[9],[27],[22],[56],[98],[66],[51],[37],[0],[62],[60],[1],[55],[28],[20],[65],[1],[53],[54],[57],[72],[26],[8],[0],[95],[96],[77],[51],[1],[84],[43],[64],[83],[63],[79],[60],[53],[39],[27],[65],[40],[60],[85],[2],[10],[63],[32],[10],[27],[84],[3],[22],[14],[87],[46],[76],[72],[86],[56],[58],[16],[4],[19],[74],[28],[94],[38],[22],[66],[62],[76],[84],[71],[79],[60],[96],[56],[73],[55],[24],[57],[63],[73],[43],[35],[43],[61],[35],[58],[82],[34],[81],[61],[73],[22],[94],[83],[31],[17],[19],[46],[96],[62],[75],[89],[43],[43],[83],[20],[17],[64],[20],[55],[38],[86],[55],[20],[0],[50],[95],[17],[41],[28],[85],[15],[37],[12],[28],[29],[52],[33],[71],[86],[78],[34],[30],[52],[65],[48],[39],[75],[23],[9],[83],[5],[42],[58],[26],[25],[57],[15],[38],[44],[2],[91],[61],[27],[21],[0],[88],[16],[51],[93],[47],[9],[5],[71],[24],[47],[91],[96],[66],[18],[59],[18],[29],[2],[25],[61],[42],[4],[80],[58],[44],[99],[14],[24],[75],[37],[39],[8],[83],[51],[84],[54],[99],[95],[79],[4],[23],[90],[18],[54],[18],[61],[13],[40],[38],[42],[11],[10],[36],[42],[73],[81],[40],[25],[80],[9],[77],[23],[75],[10],[65],[25],[65],[13],[12],[69],[75],[7],[83],[46],[47],[26],[64],[74],[28],[16],[6],[22],[11],[22],[81],[69],[40],[13],[32],[91],[40],[90],[13],[59],[46],[16],[7],[51],[58],[20],[9],[20],[56],[0],[68],[39],[95],[40],[36],[69],[24],[89],[45],[17],[5],[40],[98],[97],[73],[46],[67],[85],[88],[98],[80],[74],[13],[22],[37],[83],[28],[14],[63],[58],[42],[84],[40],[45],[87],[19],[12],[47],[99],[50],[8],[76],[6],[76],[93],[92],[75],[23],[53],[50],[87],[25],[38],[23],[63],[64],[58],[48],[85],[63],[20],[24],[30],[0],[93],[93],[68],[4],[69],[3],[43],[49],[79],[38],[10],[43],[60],[46],[43],[54],[35],[29],[90],[1],[66],[78],[33],[87],[87],[94],[91],[97],[30],[59],[31],[83],[26],[0],[27],[47],[50],[27],[48],[22],[37],[75],[85],[79],[75],[63],[6],[50],[1],[47],[46],[14],[28],[73],[34],[80],[91],[3],[74],[61],[12],[65],[58],[49],[79],[22],[7],[81],[49],[49],[57],[11],[94],[34],[31],[48],[33],[22],[60],[22],[13],[8],[81],[46],[31],[95],[97],[87],[24],[27],[92],[17],[76],[67],[11],[97],[55],[2],[18],[68],[23],[48],[24],[51],[68],[92],[68],[63],[44],[48],[27],[78],[43],[80],[43],[58],[16],[14],[33],[96],[74],[42],[35],[81],[31],[45],[0],[91],[20],[7],[72],[53],[33],[29],[2],[81],[32],[94],[65],[38],[97],[48],[54],[40],[11],[18],[90],[9],[84],[63],[50],[40],[23],[67],[48],[19],[98],[17],[57],[97],[29],[95],[63],[34],[54],[44],[4],[70],[5],[14],[36],[9],[31],[70],[33],[97],[64],[69],[39],[28],[90],[42],[63],[17],[10],[17],[7],[24],[4],[36],[77],[57],[10],[87],[84],[19],[51],[10],[57],[14],[75],[20],[21],[55],[95],[54],[18],[70],[62],[86],[52],[91],[67],[71],[88],[23],[63],[22],[91],[68],[32],[93],[6],[74],[69],[41],[60],[21],[94],[67],[18],[36],[24],[19],[84],[34],[45],[99],[75],[86],[85],[2],[21],[78],[65],[19],[29],[68],[18],[59],[17],[26],[24],[95],[94],[16],[69],[74],[28],[20],[54],[54],[68],[21],[79],[30],[59],[61],[65],[34],[94],[29],[22],[18],[27],[80],[45],[55],[2],[75],[65],[36],[94],[98],[93],[77],[76],[42],[44],[33],[69],[46],[8],[81],[92],[8],[5],[56],[69],[86],[27],[30],[92],[95],[61],[16],[86],[77],[32],[72],[56],[44],[88],[88],[34],[37],[57],[11],[9],[33],[76],[70],[10],[91],[51],[21],[31],[30],[10],[23],[75],[88],[27],[43],[0],[19],[17],[51],[79],[3],[81],[48],[96],[10],[44],[3],[4],[87],[44],[35],[83],[81],[73],[61],[46],[88],[31],[34],[44],[91],[2],[62],[57],[81],[3],[65],[69],[19],[99],[62],[76],[96],[48],[8],[78],[9],[40],[27],[67],[39],[39],[94],[75],[96],[2],[40],[42],[16],[87],[28],[29],[71],[84],[93],[83],[88],[12],[6],[1],[60],[5],[8],[11],[93],[64],[27],[5],[26],[93],[3],[20],[25],[15],[51],[14],[46],[72],[34],[44],[9],[93],[75],[83],[71],[59],[15],[91],[93],[95],[74],[95],[12],[52],[56],[46],[45],[66],[78],[25],[67],[78],[66],[60],[41],[12],[31],[1],[90],[33],[75],[98],[95],[17],[64],[6],[35],[90],[69],[32],[42],[66],[71],[89],[32],[76],[19],[8],[53],[16],[67],[25],[66],[84],[27],[33],[10],[94],[65],[73],[46],[79],[41],[93],[86],[99],[63],[93],[2],[4],[59],[47],[8],[50],[40],[4],[7],[48],[84],[12],[94],[33],[93],[2],[53],[99],[10],[84],[73],[7],[98],[54],[90],[27],[18],[69],[15],[76],[35],[22],[4],[89],[5],[74],[45],[81],[87],[56],[63],[93],[54],[49],[45],[34],[69],[67],[87],[67],[9],[62],[97],[8],[2],[17],[54],[54],[83],[44],[61],[25],[3],[5],[27],[43],[69],[68],[44],[70],[18],[75],[78],[61],[1],[45],[39],[31],[57],[60],[0],[57],[64],[55],[36],[44],[37],[46],[1],[31],[83],[74],[64],[35],[50],[13],[29],[70],[40],[16],[99],[12],[57],[69],[57],[23],[72],[84],[62],[35],[83],[75],[72],[71],[64],[25],[63],[92],[8],[20],[62],[38],[33],[45],[3],[16],[23],[45],[19],[90],[58],[50],[58],[62],[4],[54],[4],[16],[18],[44],[20],[95],[23],[95],[86],[78],[6],[77],[17],[86],[63],[56],[88],[63],[79],[73],[92],[4],[75],[37],[26],[86],[17],[94],[7],[75],[26],[8],[69],[94],[69],[71],[26],[86],[41],[69],[10],[45],[13],[7],[78],[28],[78],[45],[78],[22],[74],[50],[62],[36],[51],[41],[52],[87],[44],[18],[73],[70],[31],[3],[55],[48],[92],[85],[83],[94],[89],[89],[7],[61],[86],[51],[40],[58],[34],[94],[23],[61],[39],[74],[32],[1],[80],[91],[32],[91],[5],[39],[11],[43],[56],[23],[89],[24],[13],[9],[81],[60],[5],[75],[47],[70],[38],[9],[95],[92],[30],[67],[52],[28],[55],[6],[51],[76],[78],[41],[23],[17],[56],[60],[20],[37],[7],[19],[16],[48],[39],[31],[25],[54],[56],[11],[23],[9],[84],[3],[58],[6],[68],[56],[66],[22],[59],[9],[24],[79],[64],[20],[38],[60],[75],[97],[63],[28],[63],[11],[8],[9],[32],[31],[48],[17],[5],[87],[86],[71],[86],[46],[58],[28],[19],[19],[16],[57],[99],[93],[32],[60],[75],[20],[31],[49],[73],[37],[76],[34],[80],[28],[89],[52],[70],[55],[43],[43],[59],[16],[34],[61],[17],[2],[58],[45],[98],[90],[45],[9],[59],[76],[78],[37],[15],[89],[27],[71],[57],[76],[56],[70],[72],[73],[12],[11],[82],[93],[70],[17],[5],[20],[46],[63],[24],[2],[7],[17],[5],[67],[15],[68],[99],[79],[77],[42],[27],[91],[91],[29],[49],[19],[81],[68],[5],[57],[65],[53],[62],[0],[30],[69],[87],[6],[47],[42],[51],[32],[90],[53],[15],[44],[4],[20],[81],[79],[52],[40],[50],[65],[41],[38],[36],[33],[27],[2],[23],[48],[18],[16],[40],[89],[81],[83],[41],[88],[79],[54],[73],[7],[5],[71],[11],[69],[78],[92],[74],[13],[10],[84],[97],[87],[12],[14],[76],[6],[14],[48],[73],[14],[38],[46],[11],[18],[47],[34],[90],[5],[41],[36],[24],[47],[8],[21],[74],[27],[17],[25],[59],[5],[38],[69],[55],[74],[64],[51],[84],[9],[95],[19],[55],[79],[71],[49],[86],[48],[99],[91],[81],[13],[64],[71],[50],[26],[14],[61],[71],[87],[49],[8],[96],[9],[19],[89],[1],[90],[34],[21],[62],[1],[85],[21],[58],[72],[87],[93],[16],[49],[98],[18],[43],[18],[5],[68],[83],[47],[2],[82],[14],[0],[15],[47],[34],[44],[75],[77],[83],[8],[81],[5],[92],[40],[51],[47],[96],[47],[16],[99],[44],[74],[89],[38],[89],[3],[24],[75],[1],[34],[23],[95],[60],[72],[45],[9],[68],[8],[48],[88],[65],[44],[49],[6],[65],[24],[39],[52],[33],[35],[33],[36],[89],[15],[67],[19],[85],[3],[54],[68],[65],[46],[52],[35],[18],[80],[53],[56],[51],[46],[52],[74],[94],[52],[83],[16],[24],[90],[43],[12],[23],[26],[81],[19],[85],[62],[7],[13],[18],[30],[83],[15],[48],[58],[48],[55],[16],[33],[38],[66],[89],[15],[92],[1],[44],[47],[41],[67],[57],[7],[11],[23],[51],[97],[22],[53],[9],[58],[88],[10],[87],[75],[62],[55],[48],[77],[74],[14],[21],[7],[98],[24],[91],[13],[64],[94],[32],[0],[47],[3],[0],[30],[45],[44],[14],[66],[66],[92],[26],[66],[84],[19],[96],[89],[47],[26],[27],[16],[16],[16],[16],[19],[96],[88],[23],[59],[90],[85],[78],[58],[37],[72],[13],[24],[77],[25],[11],[80],[89],[16],[55],[20],[58],[98],[54],[73],[80],[68],[2],[65],[87],[81],[64],[64],[82],[32],[48],[13],[34],[96],[42],[89],[39],[47],[61],[71],[17],[7],[51],[52],[82],[55],[69],[56],[9],[54],[28],[71],[40],[68],[83],[58],[29],[75],[92],[64],[52],[94],[10],[49],[19],[78],[28],[87],[59],[31],[6],[95],[2],[68],[84],[36],[80],[60],[20],[16],[46],[27],[56],[80],[98],[67],[76],[99],[56],[79],[26],[12],[58],[44],[7],[83],[5],[48],[36],[61],[71],[61],[0],[17],[70],[39],[2],[95],[43],[32],[77],[57],[94],[2],[26],[70],[96],[49],[16],[40],[36],[52],[73],[84],[34],[6],[70],[0],[4],[7],[57],[96],[9],[15],[69],[19],[39],[63],[27],[88],[82],[2],[42],[55],[78],[41],[56],[56],[34],[48],[69],[17],[55],[97],[98],[1],[74],[83],[26],[5],[70],[58],[54],[4],[66],[85],[92],[60],[49],[29],[80],[60],[99],[62],[46],[87],[37],[16],[38],[33],[89],[74],[9],[56],[85],[58],[79],[57],[24],[0],[56],[38],[37],[33],[82],[59],[67],[41],[24],[80],[22],[80],[68],[40],[24],[72],[36],[26],[69],[88],[12],[88],[97],[91],[8],[33],[89],[48],[94],[50],[76],[68],[61],[70],[24],[78],[63],[1],[70],[58],[64],[53],[60],[44],[0],[91],[20],[61],[63],[32],[1],[8],[50],[5],[94],[12],[21],[88],[30],[59],[25],[80],[5],[81],[63],[25],[1],[54],[7],[87],[77],[71],[82],[56],[48],[79],[75],[93],[47],[75],[81],[77],[3],[88],[32],[53],[35],[21],[71],[79],[14],[46],[77],[5],[61],[0],[55],[68],[29],[69],[28],[74],[85],[3],[62],[50],[15],[64],[1],[10],[58],[36],[64],[87],[31],[45],[83],[4],[52],[89],[85],[63],[11],[6],[79],[46],[51],[44],[58],[38],[54],[38],[56],[23],[0],[12],[55],[13],[98],[33],[44],[2],[80],[81],[33],[2],[49],[0],[19],[37],[35],[99],[79],[42],[69],[32],[12],[6],[48],[51],[64],[73],[84],[96],[86],[27],[44],[24],[14],[67],[99],[68],[35],[94],[6],[91],[20],[10],[88],[60],[93],[57],[51],[29],[63],[31],[61],[61],[79],[6],[71],[88],[27],[9],[44],[30],[32],[37],[54],[20],[32],[11],[31],[79],[68],[6],[53],[87],[14],[11],[92],[78],[25],[5],[85],[77],[62],[93],[34],[8],[38],[55],[20],[75],[4],[60],[42],[29],[22],[13],[4],[76],[12],[73],[74],[97],[53],[59],[58],[70],[36],[63],[60],[56],[20],[35],[54],[26],[63],[72],[73],[34],[3],[24],[66],[70],[54],[75],[42],[3],[66],[88],[67],[86],[90],[70],[80],[70],[30],[69],[92],[87],[58],[46],[22],[42],[37],[64],[28],[35],[22],[47],[59],[16],[19],[80],[92],[40],[11],[26],[65],[24],[72],[5],[82],[43],[92],[62],[17],[0],[28],[59],[30],[95],[64],[88],[54],[34],[5],[59],[23],[38],[46],[62],[46],[18],[73],[63],[56],[9],[71],[0],[13],[99],[14],[40],[4],[88],[87],[5],[94],[56],[10],[45],[17],[39],[36],[69],[84],[16],[79],[16],[41],[40],[81],[54],[63],[7],[67],[5],[95],[73],[80],[67],[28],[50],[29],[41],[70],[54],[35],[28],[80],[46],[11],[51],[91],[45],[50],[0],[82],[82],[5],[19],[87],[38],[28],[46],[38],[96],[31],[45],[87],[60],[42],[2],[36],[30],[33],[18],[94],[98],[5],[26],[27],[88],[99],[11],[13],[7],[37],[85],[70],[84],[68],[74],[50],[67],[13],[32],[99],[22],[72],[55],[59],[69],[87],[81],[11],[90],[57],[1],[66],[71],[86],[13],[81],[47],[53],[70],[39],[50],[16],[45],[94],[23],[68],[72],[18],[44],[49],[1],[26],[25],[29],[79],[44],[96],[49],[7],[79],[73],[50],[13],[48],[56],[78],[87],[5],[3],[82],[7],[43],[23],[22],[56],[34],[11],[97],[97],[78],[97],[34],[66],[15],[11],[78],[0],[20],[88],[48],[63],[63],[34],[17],[63],[2],[12],[12],[77],[60],[28],[73],[69],[95],[68],[90],[82],[36],[23],[9],[97],[29],[94],[2],[14],[7],[96],[31],[68],[69],[18],[0],[23],[39],[7],[80],[65],[74],[17],[56],[34],[2],[12],[58],[60],[54],[87],[55],[66],[33],[62],[66],[63],[11],[81],[21],[86],[91],[38],[57],[35],[38],[73],[81],[93],[73],[22],[8],[68],[14],[20],[93],[86],[81],[53],[40],[35],[56],[3],[72],[65],[79],[64],[19],[12],[99],[33],[53],[10],[7],[27],[29],[96],[16],[0],[89],[22],[89],[57],[96],[70],[30],[59],[51],[25],[35],[27],[7],[95],[49],[43],[3],[85],[9],[22],[22],[37],[91],[35],[81],[98],[2],[84],[84],[89],[65],[63],[17],[87],[36],[60],[72],[85],[79],[90],[49],[98],[3],[1],[86],[59],[2],[36],[18],[74],[84],[9],[52],[69],[71],[65],[99],[85],[84],[25],[95],[34],[94],[29],[52],[85],[6],[13],[51],[61],[77],[74],[93],[81],[51],[45],[48],[97],[98],[39],[58],[87],[45],[75],[74],[49],[60],[89],[52],[21],[22],[66],[6],[20],[71],[88],[74],[95],[52],[64],[0],[87],[21],[8],[49],[89],[69],[46],[0],[79],[90],[82],[73],[90],[55],[68],[72],[75],[55],[30],[4],[47],[32],[59],[13],[96],[97],[95],[79],[44],[33],[38],[56],[21],[16],[29],[84],[6],[78],[20],[40],[37],[91],[29],[92],[70],[45],[67],[44],[53],[71],[30],[31],[5],[10],[21],[35],[55],[63],[53],[19],[13],[71],[64],[98],[97],[55],[87],[83],[61],[31],[41],[62],[34],[15],[56],[49],[87],[95],[26],[42],[20],[5],[78],[28],[44],[70],[1],[89],[71],[58],[53],[74],[62],[89],[18],[58],[62],[43],[93],[42],[6],[89],[95],[79],[49],[40],[86],[88],[62],[80],[93],[15],[45],[3],[28],[31],[62],[54],[76],[5],[1],[81],[20],[86],[75],[19],[21],[2],[72],[99],[91],[37],[86],[66],[43],[20],[29],[99],[76],[13],[79],[44],[35],[96],[32],[97],[82],[46],[83],[35],[83],[15],[21],[26],[23],[47],[15],[28],[28],[87],[70],[44],[7],[99],[34],[62],[47],[16],[85],[61],[24],[34],[21],[36],[30],[59],[84],[65],[6],[70],[18],[45],[47],[77],[57],[72],[92],[68],[34],[73],[16],[54],[73],[48],[3],[11],[47],[43],[79],[17],[75],[2],[29],[69],[78],[28],[54],[43],[61],[93],[32],[40],[98],[3],[92],[64],[81],[41],[76],[77],[71],[75],[84],[22],[23],[1],[27],[74],[13],[30],[29],[65],[41],[85],[24],[83],[61],[44],[24],[40],[70],[86],[89],[21],[28],[92],[98],[25],[63],[77],[11],[72],[85],[31],[44],[66],[57],[52],[24],[43],[73],[84],[70],[99],[2],[24],[73],[97],[48],[73],[54],[93],[25],[21],[1],[92],[69],[37],[71],[99],[33],[97],[52],[14],[1],[63],[54],[47],[72],[46],[47],[10],[92],[51],[81],[62],[73],[6],[63],[3],[53],[39],[42],[69],[10],[94],[61],[85],[97],[35],[18],[97],[52],[70],[84],[21],[73],[60],[14],[34],[86],[39],[48],[42],[26],[73],[48],[10],[47],[0],[24],[13],[69],[25],[2],[9],[77],[66],[94],[16],[37],[51],[39],[37],[67],[19],[70],[89],[50],[48],[66],[44],[64],[71],[89],[20],[78],[33],[53],[1],[2],[31],[50],[77],[54],[52],[51],[85],[83],[47],[38],[59],[37],[16],[42],[71],[87],[33],[22],[12],[74],[40],[21],[12],[85],[92],[82],[84],[60],[68],[72],[35],[65],[77],[20],[92],[86],[58],[9],[87],[18],[49],[96],[50],[61],[0],[41],[98],[3],[11],[2],[28],[87],[62],[38],[58],[55],[22],[87],[25],[50],[80],[16],[49],[75],[82],[78],[44],[97],[89],[77],[92],[30],[31],[42],[61],[12],[74],[85],[4],[40],[94],[74],[26],[54],[31],[25],[83],[69],[0],[37],[92],[85],[39],[9],[38],[93],[23],[75],[27],[49],[29],[99],[95],[61],[4],[88],[91],[85],[92],[5],[31],[86],[68],[36],[28],[99],[4],[22],[49],[20],[73],[83],[93],[58],[89],[2],[93],[52],[2],[0],[2],[13],[80],[40],[4],[86],[76],[48],[5],[97],[5],[50],[25],[55],[88],[84],[37],[30],[78],[26],[21],[56],[14],[3],[85],[95],[31],[9],[63],[96],[10],[29],[13],[55],[53],[34],[14],[1],[99],[37],[76],[84],[89],[3],[87],[71],[20],[13],[32],[85],[45],[24],[82],[10],[18],[20],[45],[32],[68],[34],[90],[35],[84],[32],[40],[21],[32],[50],[92],[28],[96],[98],[94],[11],[87],[49],[83],[77],[64],[31],[28],[18],[93],[56],[13],[57],[12],[46],[25],[75],[27],[33],[2],[10],[74],[55],[46],[16],[91],[12],[96],[65],[94],[82],[20],[28],[66],[94],[17],[39],[95],[42],[49],[61],[76],[24],[41],[96],[73],[89],[55],[19],[91],[43],[33],[80],[33],[89],[58],[64],[55],[60],[24],[56],[7],[62],[89],[29],[92],[84],[81],[11],[95],[79],[17],[2],[24],[8],[32],[30],[34],[7],[26],[14],[90],[57],[37],[16],[45],[3],[7],[53],[80],[62],[3],[29],[42],[40],[20],[37],[40],[85],[79],[28],[11],[49],[45],[26],[35],[45],[19],[72],[54],[33],[19],[26],[46],[47],[74],[68],[94],[62],[47],[46],[37],[71],[4],[13],[84],[76],[97],[14],[73],[52],[77],[61],[54],[82],[25],[47],[6],[87],[92],[39],[65],[3],[27],[3],[70],[42],[65],[67],[77],[94],[94],[61],[52],[37],[58],[6],[0],[44],[67],[74],[37],[32],[71],[18],[94],[79],[22],[71],[67],[59],[69],[39],[24],[76],[46],[39],[23],[39],[92],[79],[76],[98],[72],[36],[16],[62],[66],[4],[98],[57],[38],[67],[49],[27],[52],[33],[16],[48],[13],[46],[78],[56],[72],[73],[78],[65],[94],[67],[8],[87],[73],[54],[15],[7],[33],[35],[1],[95],[49],[39],[90],[79],[65],[52],[97],[89],[71],[54],[56],[6],[55],[50],[62],[48],[35],[79],[92],[99],[72],[57],[52],[30],[83],[6],[17],[61],[75],[76],[22],[2],[50],[44],[91],[27],[39],[54],[88],[65],[23],[84],[50],[32],[23],[51],[53],[69],[49],[12],[95],[33],[43],[79],[87],[0],[44],[72],[43],[79],[53],[56],[16],[21],[22],[24],[96],[67],[48],[3],[57],[75],[4],[68],[21],[83],[24],[98],[34],[2],[99],[56],[78],[3],[34],[63],[79],[12],[90],[92],[32],[93],[8],[59],[41],[53],[87],[87],[39],[66],[51],[76],[50],[57],[74],[97],[74],[83],[64],[39],[74],[49],[12],[85],[82],[39],[56],[51],[72],[38],[48],[77],[95],[90],[73],[6],[75],[2],[2],[65],[36],[42],[39],[61],[21],[48],[82],[39],[29],[54],[6],[77],[42],[18],[66],[79],[18],[86],[96],[39],[56],[6],[64],[96],[21],[18],[9],[41],[87],[93],[87],[86],[75],[52],[57],[42],[73],[30],[66],[91],[77],[17],[61],[49],[42],[20],[45],[79],[16],[15],[84],[71],[5],[34],[61],[61],[70],[34],[75],[44],[57],[78],[38],[32],[56],[59],[83],[57],[4],[25],[16],[96],[63],[44],[1],[85],[9],[39],[79],[13],[7],[34],[41],[43],[39],[38],[35],[72],[98],[24],[87],[15],[54],[96],[83],[34],[22],[75],[34],[43],[54],[10],[38],[34],[20],[53],[17],[6],[92],[18],[74],[96],[60],[57],[78],[26],[36],[20],[76],[15],[17],[19],[83],[65],[50],[6],[7],[71],[39],[70],[77],[71],[57],[42],[56],[75],[40],[2],[62],[71],[18],[76],[96],[21],[62],[79],[39],[58],[24],[56],[23],[88],[79],[98],[2],[26],[80],[99],[6],[85],[9],[45],[92],[15],[66],[69],[78],[64],[11],[76],[75],[80],[43],[30],[78],[90],[94],[47],[85],[63],[23],[52],[11],[59],[8],[39],[27],[28],[2],[43],[0],[96],[75],[38],[91],[84],[63],[32],[39],[66],[88],[67],[64],[32],[44],[68],[58],[11],[31],[77],[29],[52],[45],[18],[13],[91],[55],[77],[5],[0],[22],[30],[0],[41],[3],[62],[90],[96],[11],[76],[5],[54],[46],[80],[0],[90],[32],[49],[57],[57],[36],[32],[22],[1],[72],[14],[41],[44],[55],[8],[14],[54],[13],[98],[47],[96],[25],[80],[77],[61],[69],[71],[66],[77],[22],[92],[1],[66],[12],[1],[10],[24],[26],[70],[99],[66],[3],[32],[78],[86],[25],[16],[36],[50],[39],[44],[98],[93],[24],[10],[5],[50],[77],[12],[34],[93],[13],[53],[57],[28],[25],[75],[50],[25],[50],[80],[52],[59],[83],[29],[47],[78],[45],[90],[2],[91],[42],[0],[72],[2],[27],[60],[9],[48],[31],[0],[48],[5],[39],[12],[48],[71],[52],[74],[34],[44],[89],[6],[45],[34],[18],[0],[40],[34],[91],[59],[67],[7],[97],[80],[77],[99],[54],[45],[4],[85],[56],[89],[53],[48],[23],[98],[95],[91],[39],[83],[0],[40],[93],[45],[36],[71],[69],[87],[25],[80],[93],[87],[32],[61],[10],[39],[57],[48],[85],[97],[84],[6],[61],[40],[45],[85],[50],[12],[83],[46],[48],[98],[99],[57],[27],[92],[79],[66],[21],[0],[83],[51],[5],[99],[73],[48],[60],[85],[55],[55],[95],[20],[54],[51],[52],[66],[77],[94],[21],[51],[80],[26],[3],[82],[52],[44],[20],[2],[5],[96],[70],[88],[5],[71],[37],[79],[66],[62],[31],[7],[3],[70],[47],[91],[87],[87],[12],[20],[85],[38],[42],[5],[60],[22],[69],[58],[37],[47],[75],[1],[51],[33],[64],[52],[49],[35],[2],[34],[90],[69],[74],[2],[90],[74],[21],[50],[29],[15],[89],[9],[19],[7],[17],[72],[68],[84],[96],[66],[27],[29],[9],[17],[67],[87],[59],[47],[60],[86],[18],[32],[44],[12],[53],[66],[96],[55],[27],[3],[96],[47],[60],[14],[58],[63],[0],[87],[96],[14],[0],[91],[65],[28],[32],[50],[75],[81],[40],[58],[75],[6],[58],[15],[63],[50],[71],[39],[11],[53],[15],[36],[19],[79],[60],[60],[52],[67],[6],[95],[81],[48],[58],[69],[50],[37],[93],[5],[64],[55],[99],[61],[45],[82],[36],[14],[40],[6],[57],[94],[77],[97],[25],[98],[36],[52],[12],[86],[19],[1],[97],[75],[7],[43],[48],[51],[53],[28],[65],[7],[48],[33],[85],[96],[76],[44],[80],[72],[20],[46],[37],[66],[27],[49],[5],[33],[45],[46],[23],[43],[2],[79],[72],[19],[46],[16],[96],[6],[57],[37],[86],[83],[14],[37],[6],[42],[51],[95],[58],[95],[72],[47],[99],[48],[70],[15],[53],[22],[15],[22],[94],[94],[73],[93],[12],[36],[61],[35],[4],[79],[12],[8],[74],[93],[21],[51],[68],[48],[48],[17],[52],[14],[2],[89],[15],[96],[70],[48],[39],[53],[28],[42],[66],[45],[48],[54],[48],[84],[35],[30],[96],[14],[89],[40],[48],[50],[33],[40],[86],[9],[25],[24],[63],[68],[40],[34],[39],[18],[72],[39],[71],[25],[91],[94],[22],[24],[45],[46],[94],[69],[59],[38],[14],[3],[15],[22],[27],[47],[91],[16],[63],[98],[58],[5],[51],[76],[92],[65],[9],[91],[16],[29],[47],[33],[56],[82],[82],[78],[48],[14],[58],[91],[37],[91],[8],[36],[35],[27],[96],[12],[69],[13],[92],[44],[26],[15],[82],[47],[53],[90],[62],[33],[67],[31],[32],[97],[88],[31],[60],[69],[32],[11],[53],[49],[73],[7],[65],[61],[60],[26],[46],[69],[78],[64],[85],[70],[83],[27],[33],[41],[32],[60],[57],[85],[96],[61],[15],[97],[81],[17],[88],[49],[93],[77],[68],[41],[92],[13],[66],[0],[34],[20],[30],[38],[15],[8],[55],[41],[91],[78],[55],[60],[14],[78],[30],[61],[56],[12],[15],[48],[50],[95],[88],[43],[27],[1],[88],[88],[41],[89],[5],[24],[31],[21],[31],[23],[62],[9],[14],[79],[19],[66],[53],[85],[15],[65]]
&lt;/details&gt;
&lt;p&gt;我们来分析一下超时问题，大概就是调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergeTwoLists&lt;/code&gt;的调用成本和这个函数有调用成本加上这个函数的时间成本 
$ \mathcal {O}(N \times M)$
发现问题了吧，N和M会因为数列的膨胀而变得很大，相当于重复遍历了好几遍非常大的node数列才导致超时的。
所以mergeKLists的时间复杂度是$ \mathcal {O}(K \times N \times M)$
如果K巨大，而且这个K会线性递增。所以mergeTwoLists的方案不能直接写在这个上面。需要别的思路。&lt;/p&gt;

&lt;p&gt;思路也很简单，上面我们碰到的问题在于每一次合并两个数列之后都会加长需要遍历的数列，这样mergeTwoLists的参数list1就会越来越长。如果我可以把所有
结点都放在一个容器里，这个容器可以提供一个当前最小的结点，这样只需要放所有节点进入容器，然后取出最小节点，记录，直到容器内节点被取完。&lt;/p&gt;

&lt;p&gt;这样相当于只需要遍历所有节点两遍。&lt;/p&gt;

&lt;p&gt;当然存在这种容器，它叫做“最小堆”这是一种自平衡二叉树，之后在说树这个结构的时候会详细说它的，今天只会给一个用法和实现。&lt;/p&gt;

&lt;p&gt;如果K巨大，而且这个K会线性递增。所以mergeTwoLists的方案不能直接写在这个上面。需要别的思路。&lt;/p&gt;

&lt;p&gt;思路也很简单，上面我们碰到的问题在于每一次合并两个数列之后都会加长需要遍历的数列，这样mergeTwoLists的参数list1就会越来越长。如果我可以把所有
 结点都放在一个容器里，这个容器可以提供一个当前最小的结点，这样只需要放所有节点进入容器，然后取出最小节点，记录，直到容器内节点被取完。&lt;/p&gt;

&lt;p&gt;这样相当于只需要遍历所有节点两遍。&lt;/p&gt;

&lt;p&gt;当然存在这种容器，它叫做“最小堆”这是一种自平衡二叉树，之后在说树这个结构的时候会详细说它的，今天只会给一个用法和实现。&lt;/p&gt;

&lt;h2 id=&quot;单链表的倒数第k个节点&quot;&gt;&lt;a href=&quot;https://leetcode.cn/problems/kth-node-from-end-of-list-lcci/description/&quot;&gt;单链表的倒数第k个节点&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个比较简单，就是简单的，双指针的使用，这个逻辑很好想拉，前一个指针为了探路，后一个指针隔着一个k的距离，第一个指针碰到NULL之后就表示链表结束
那么刚好后一个指针就是从后往前数的第k个。&lt;/p&gt;

&lt;p&gt;如下是&lt;a href=&quot;https://leetcode.com/problems/remove-nth-node-from-end-of-list/submissions/&quot;&gt;leetcode 19&lt;/a&gt;的代码&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;kthToLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeNthFromEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;del_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;del_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;kthp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;del_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;del_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;同样的我们看一下这个函数的时间复杂度只有一个循环所以是 $ \mathcal{O}(N) $
和需要处理的链表的长度有关。这个比较粗糙的版本有一些问题，比如说这个循环里的条件句是不是
可以不用。我找了一个更简洁的代码，我们一起看一下&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeNthFromEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个代码处理的就很漂亮，结构化的看一下，删除倒数k个节点会面临什么问题。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;输入的值等于列表长度的情况，这时候就是删除第一个节点。&lt;/li&gt;
  &lt;li&gt;启动第二个指针的时机怎么把握。&lt;/li&gt;
  &lt;li&gt;怎么删除目标节点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个代码把一个循环拆分成两个循环，这样可以避免循环内的条件判断。最后删除的代码
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;second-&amp;gt;next-&amp;gt;next&lt;/code&gt; 没有问题是因为第二个指针不会比第一个指针更接近NULL，所以当
第一个指针的next是NULL的时候第二个指针的下一个的下一个也不会有问题。&lt;/p&gt;

&lt;h2 id=&quot;876-middle-of-the-linked-list&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/middle-of-the-linked-list/description/&quot;&gt;876 Middle of the linked list&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个题目比较简单，但是提供了一个从物理世界借镜的视角。
S = V * T
距离、速度和时间这三者存在一种线性关系，这种线性关系是可以通过比例转换的。
节点数、节点的访问跨度、节点的访问次数，也保持这样的线性关系，所以控制节点的访问
速度是可以控制访问的节点数的。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;middleNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: left;&quot;&gt;
graph LR
    A[&quot;1&quot;] --&amp;gt; B[&quot;2&quot;]
    B --&amp;gt; C[&quot;3&quot;]
    C --&amp;gt; D[&quot;4&quot;]
    D --&amp;gt; E[&quot;5&quot;]
    E --&amp;gt; F[&quot;6&quot;]
    F --&amp;gt; G[&quot;7&quot;]
    G --&amp;gt; D

    class C,D blueNode;
    class E,F greenNode
    classDef blueNode fill:#aaaaff,stroke:#0000ff,stroke-width:2px;
    classDef greenNode fill:#aaccff,stroke:#00ffff,stroke-width:2px;
&lt;/pre&gt;

&lt;p&gt;同样的思路还可以&lt;em&gt;判断链表是否存在环&lt;/em&gt;。如果存在环，不同移动速率的指针一定会在链表某处相遇&lt;/p&gt;

&lt;p&gt;这里我还能在扩展一下，假设链表上有环，环长度为k。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;慢指针速度为1.&lt;/li&gt;
  &lt;li&gt;快指针速度为f，每次移动f步长&lt;/li&gt;
  &lt;li&gt;慢指针在环内移动时，经过时间t后，位置是1 * t mod k&lt;/li&gt;
  &lt;li&gt;快指针在同一时间的位置是 f * t mod k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以他们相遇就是 1 * t mod k == f * t mod k。
也就意味着（f-1） * t是k的倍数。
最小相遇时间，
也就是t = k / gcd(f-1, k)&lt;/p&gt;

&lt;p&gt;这个问题就变成了一个最大公约数问题了.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ture&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;判断链表中，如何计算这个环的起点？&lt;/p&gt;

&lt;p&gt;刚刚我已经说了快慢指针在链表相遇点是一个gcd问题和环的大小有关，这个相遇点并不一定是
环的起点。&lt;/p&gt;

&lt;p&gt;设环长度是n。
使用快慢指针速度比2：1，指针必然在环中相遇。相遇时slow走了k步，fast走了2k步。假设
相遇点距离环入口的长度是m，环起点距离入口的距离就是k-m，也就是从头再走k-m就能到环的入口
，那就是k-m怎么算。
因为fast比slow指针多走了k步，这个k步就是在环中绕圈，所以k是环长度的整数倍。
只是看fast指针，它走k步就能到相遇点，相遇点距离环入口就是m。所以fast指针走k-m步也能到
环入口。&lt;/p&gt;

&lt;p&gt;这样slow和fast指针就能在环起点重合。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findCycleStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;【这里想做一个快慢指针的动画】&lt;/p&gt;

&lt;h2 id=&quot;leetcode-160-两个链表是否相交&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-linked-lists/description/&quot;&gt;Leetcode 160 两个链表是否相交&lt;/a&gt;&lt;/h2&gt;

&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: left;&quot;&gt;
graph LR
    A1[&quot;A1&quot;] --&amp;gt; A2[&quot;A2&quot;]
    A2 --&amp;gt; A3[&quot;A3&quot;]
    A3 --&amp;gt; C1[&quot;C1&quot;]
    C1 --&amp;gt; C2[&quot;C2&quot;]
    
    B1[&quot;B1&quot;] --&amp;gt; B2[&quot;B2&quot;]
    B2 --&amp;gt; C1
&lt;/pre&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getIntersectionNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;curr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;curr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;curr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;curr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据上文那个S = T *
V的逻辑我们只需要构造同样的速度和长度就可以在一个相同的节点相遇了。&lt;/p&gt;

&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;
&lt;p&gt;这周是链表，下周是数组。&lt;/p&gt;

&lt;p&gt;Sun Mar  2 08:46:58 PM CST 2025&lt;/p&gt;

</description>
          <pubDate>2025-02-26T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/a-rts_w2_data_structions</link>
          <guid isPermaLink="true">https://niclas3.github.io/a-rts_w2_data_structions</guid>
        </item>
      
    
      
        <item>
          <title>[A]RTS   当我们在谈论算法的时候我们在谈论什么</title>
          <description>&lt;h2 id=&quot;计算机算法-vs-数学算法&quot;&gt;计算机算法 VS 数学算法&lt;/h2&gt;

&lt;p&gt;首先我们需要分清楚什么是&lt;strong&gt;计算机算法&lt;/strong&gt;什么是&lt;strong&gt;数学算法&lt;/strong&gt;。简单来说&lt;a href=&quot;https://en.wikipedia.org/wiki/Numerical_analysis&quot;&gt;数学算法&lt;/a&gt;是把数论的证明或者推论使用程序的方式展现，比如说RAS加密算法。而计算机算法更像是一种“枚举”，比如说算出第k个素数是什么？&lt;/p&gt;

&lt;p&gt;这两者有微妙的不同再于，数学算法偏向于找到一个通用的解，计算机算法偏向于解决一个问题，是否通用或者形式上合理不太重要。&lt;/p&gt;

&lt;p&gt;如果你和我一样数学不好，只是希望使用算法找个工作。我们就一起看看计算机算法是如何“枚举”的。&lt;/p&gt;

&lt;h2 id=&quot;枚举&quot;&gt;枚举&lt;/h2&gt;

&lt;p&gt;枚举也可以叫穷举，就是一个一个数的意思。这件事看上去很简单，但其实要做到完美需要&lt;strong&gt;恰好&lt;/strong&gt;数完所有情况
不能多不能少。“恰好”并不容易，我们可以从怎么枚举开始，到如何优化枚举。&lt;/p&gt;

&lt;p&gt;大多数算法会围绕着这两件事情进行，有些问题容易写出枚举但是会超出时间或者空间，有些问题很难写出枚举手段找到枚举手段就是关键。&lt;/p&gt;

&lt;h2 id=&quot;找到枚举&quot;&gt;找到枚举&lt;/h2&gt;
&lt;p&gt;先说一下“递归问题”代表什么？&lt;/p&gt;

&lt;p&gt;递归问题是一种存在重复且可以分解的子问题的一种问题，简单来说假设这个问题的解是一个函数那么这个函数
可以应用在这个问题的各个子问题上。&lt;/p&gt;

&lt;p&gt;递归类问题可以来演示什么是“找到枚举”。&lt;/p&gt;

&lt;h2 id=&quot;动态规划dynamic-programming&quot;&gt;动态规划（Dynamic Programming）&lt;/h2&gt;
&lt;p&gt;一种典型的递归类问题。大部分使用动态规划的问题是求极值或者是计数。&lt;br /&gt;
如果一个问题的最优解可以由它的子问题的最优解构成。那么这个问题就具有“最优子结构”，这种性质是动态规划可以
通过递归来拆分问题的关键。&lt;/p&gt;

&lt;p&gt;简单来看，动态规划通过一个可以递归的函数，把问题划分为多个子问题。我们就得到了子问题的集合，我们只需要遍历这些
子问题，就可以找到对应情况的值，从而发现“极值”或者给各个值计数。&lt;/p&gt;

&lt;p&gt;总的来说可以使用动态规划的问题有4个要点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;最优递归子结构 （最优子结构是可以使用DP的关键）&lt;/li&gt;
  &lt;li&gt;重叠子问题     （重叠子问题会重复遍历同一个问题，这会拖慢效率，所以要避免）&lt;/li&gt;
  &lt;li&gt;状态定义与转移方程&lt;/li&gt;
  &lt;li&gt;边界条件&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;斐波那契数列&quot;&gt;斐波那契数列&lt;/h2&gt;
&lt;p&gt;我们来使用斐波那契数列来感受动态规划。&lt;br /&gt;
首先，斐波那契数列的递推公式是：$ F(n) = F(n-1) + F(n-2), F(0) = 0, F(1) = 1.$&lt;/p&gt;

&lt;p&gt;来分析一下斐波那契数列&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;存在最优子结构。每一项都是前两项的和&lt;/li&gt;
  &lt;li&gt;重叠子问题。    求第N项的时候可能重复计算前两项。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: center;&quot;&gt;
graph TD
    A[&quot;f(10)&quot;] --&amp;gt; B[&quot;f(9)&quot;]
    A --&amp;gt; C[&quot;f(8)&quot;]
    B --&amp;gt; D[&quot;f(8)&quot;]
    B --&amp;gt; E[&quot;f(7)&quot;]
    C --&amp;gt; F[&quot;f(7)&quot;]
    C --&amp;gt; G[&quot;f(6)&quot;]

    class C,D blueNode;
    class E,F greenNode
    classDef blueNode fill:#aaaaff,stroke:#0000ff,stroke-width:2px;
    classDef greenNode fill:#aaccff,stroke:#00ffff,stroke-width:2px;
&lt;/pre&gt;
&lt;p&gt;算一下时间复杂度，也就是$\mathcal{O}()$,时间复杂度是单个子问题的处理时间乘以子问题个数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;算第3项子问题有两个需要计算$f(1)$和$f(2)$.&lt;/li&gt;
  &lt;li&gt;算第4项子问题有四个需要计算$f(3)-f(2)$和$f(2)-f(1)$&lt;/li&gt;
  &lt;li&gt;算第5项子问题有六个需要计算$f(4)-f(3)$和$f(3)-f(2)$和$f(2)-f(1)$&lt;/li&gt;
  &lt;li&gt;算第6项子问题有八个需要计算$f(5)-f(4)$和$f(4)-f(3)$和$f(3)-f(2)$和$f(2)-f(1)$&lt;/li&gt;
  &lt;li&gt;算第n项子问题有$\mathcal{O}(2^n)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为每个子问题都是两项的加法所以单个子问题处理时间是$\mathcal{O}(1)$.&lt;/p&gt;

&lt;p&gt;$\mathcal{O}(2^n) \times \mathcal{O}(1) = \mathcal{O}(2^n)$&lt;/p&gt;

&lt;p&gt;计算某一个项的时间复杂度是&lt;strong&gt;指数级别&lt;/strong&gt;，效率很差。原因是重复计算，类似图中其中&lt;strong&gt;第7&lt;/strong&gt;和&lt;strong&gt;第8&lt;/strong&gt;项都重复计算了
我也标记了相同的颜色。&lt;/p&gt;

&lt;p&gt;如下是2的指数级别的算法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int fib(int n) {
  if (n == 0 || n == 1) {
    return n;
  } else {
    return fib(n - 1) + fib(n - 2);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;时间消耗曲线如下&lt;/p&gt;

&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: center;&quot;&gt;
xychart-beta
    title &quot;Fib(n) in O(2^n)&quot;
    x-axis &quot;number&quot; [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    y-axis &quot;time cost (in ms)&quot; 0.001 --&amp;gt; 0.081
    line [0.001,0.000,0.000,0.001,0.001,0.000,0.001,0.001,0.001,0.001,0.002,0.002,0.003,0.005,0.008,0.012,0.020,0.032,0.050,0.081]
&lt;/pre&gt;

&lt;h2 id=&quot;自顶向下---备忘录&quot;&gt;自顶向下 - 备忘录&lt;/h2&gt;

&lt;p&gt;随之而来的就是引入&lt;strong&gt;备忘录（Memoization）&lt;/strong&gt;来解决DP的特征之一&lt;strong&gt;重叠子问题&lt;/strong&gt;。这也是&lt;strong&gt;以时间换空间&lt;/strong&gt;的体现。&lt;/p&gt;

&lt;p&gt;备忘录的引入逻辑很简单类似考试的小抄一样，它可以让你不必再计算一遍同样的答案只需要查找对应的题号就会得到对应的答案。
使用这种逻辑加速运算在历史上也比比皆是，1614年John Napier发明&lt;a href=&quot;https://blog.csdn.net/ComputerInBook/article/details/129696172&quot;&gt;对数表&lt;/a&gt;；intel在CPU中使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Translation_lookaside_buffer&quot;&gt;TLB&lt;/a&gt;加速虚拟地址转换等等。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: center;&quot;&gt;
xychart-beta
    title &quot;Fib(n) in O(n)&quot;
    x-axis &quot;number&quot; [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    y-axis &quot;time cost (in ms)&quot; 0.001 --&amp;gt; 0.049
    line [0.049,0.003,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.000,0.001,0.001,0.001,0.001,0.001,0.001]
&lt;/pre&gt;
&lt;p&gt;你可能好奇为什么第一个数花这么久时间，这可能需要谈到计算机内存的知识，之后如果我有写文章会连接起来的。&lt;/p&gt;

&lt;p&gt;这样一来使用了Memo的计算变少了
算一下时间复杂度&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;算第5项需要f4-f3和f3-f2和f2-f1,因为使用了memo所以只需要计算一次f1、f2、f3、f4、f5就可以了&lt;/li&gt;
  &lt;li&gt;算第N项也就是$\mathcal{O}(n)$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;子问题的处理时间因为没有递归和循环所以也是$\mathcal{O}(1)$&lt;/p&gt;

&lt;p&gt;$\mathcal{O}(n) \times \mathcal{O}(1) = \mathcal{O}(n)$&lt;/p&gt;

&lt;p&gt;目前为值这就是DP的&lt;strong&gt;自顶向下&lt;/strong&gt;的思路，也就是把大问题分解成小问题从大问题出发来分解规模的方式。&lt;/p&gt;

&lt;h2 id=&quot;自底向上---dp-table&quot;&gt;自底向上 - DP table&lt;/h2&gt;

&lt;p&gt;接下来我们来处理&lt;strong&gt;自底向上&lt;/strong&gt;的思路，bottom-up的思路就是从基本情况向复杂情况推论的思路，使用
FP举例就是当F1=1,F2=1,那么按照公式F3=2。一步一步的填出一张表这个表一般叫他&lt;strong&gt;DP
table&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
long *memo = malloc(MAX_NUM * sizeof(long));

long fib_bottomup(int n, long *memo)
{
        for (int i = 1; i &amp;lt;= n; i++) {
                if (i == 0 || i == 1) {
                        memo[i] = i;
                } else {
                        memo[i] = memo[i - 2] + memo[i - 1];
                }
        }
        return memo[n];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: center;&quot;&gt;
xychart-beta
    title &quot;Fib(n) in bottom-up&quot;
    x-axis &quot;number&quot; [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    y-axis &quot;time cost (in ms)&quot; 0.001 --&amp;gt; 0.049
    line [0.040,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.000,0.001,0.001,0.001,0.000,0.001,0.001,0.001,0.001,0.001,0.001]
&lt;/pre&gt;

&lt;p&gt;这里会引入一个概念&lt;strong&gt;状态转移方程&lt;/strong&gt;。这个词语相信有些人在&lt;strong&gt;FSM有限状态机&lt;/strong&gt;里也听过，这两者虽然都描述着
从一个状态到另一个状态的转移，但DP是通过递归关系从子问题和之前状态推算出现在子问题的解。而FSM是通过
外部输入或者上一个状态，转移到另一个状态以用来做过程控制。&lt;/p&gt;

&lt;p&gt;FP的状态转移方程我在上面给过了。
&lt;strong&gt;状态转移&lt;/strong&gt;
把每一个项当作一个状态，这个状态是通过别的状态和输入参数组合来得出新状态。&lt;/p&gt;

&lt;p&gt;仔细来看从base case出发一个一个填入数据这个过程和之前自上而下使用memo一样。只需要计算N个状态就好了。
所以bottom-up的思路的时间复杂度也是 $\mathcal{O}(n)$。&lt;/p&gt;

&lt;p&gt;进一步你可以通过优化dptable的大小来优化这个算法&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long *small_memo = malloc(2 * sizeof(long));
long fib_bottomup_opt(int n, long *memo)
{
        long res = 0;

        for (int i = 1; i &amp;lt;= n; i++) {
                if (i == 1) {
                        memo[i] = i;
                        res = 1;
                } else {
                        res = memo[1] + memo[0];
                        memo[0] = memo[1];
                        memo[1] = res;
                }
        }
        return res;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: center;&quot;&gt;
xychart-beta
    title &quot;Fib(n) in bottom-up with space optimization&quot;
    x-axis &quot;number&quot; [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    y-axis &quot;time cost (in ms)&quot; 0.000 --&amp;gt; 0.049
    line [0.034,0.001,0.000,0.000,0.001,0.001,0.001,0.000,0.001,0.000,0.001,0.000,0.001,0.000,0.001,0.001,0.001,0.001,0.000]
&lt;/pre&gt;

&lt;p&gt;我们首先想到的是一个长度为N的数组来充当dp table，其实计算第k项只需要知道前两项的值就可以了 于是空间复杂度就可以从&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;由于FP没有极值的需求，所以没有最优子结构的问题。下面用&lt;a href=&quot;https://leetcode.com/problems/coin-change/description/&quot;&gt;leetcode 322&lt;/a&gt;来作为例子谈论
最优子结构。&lt;/p&gt;

&lt;h2 id=&quot;零钱兑换&quot;&gt;零钱兑换&lt;/h2&gt;

&lt;p&gt;You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;最优子结构&lt;/em&gt;&lt;/strong&gt;，我们可以想像一下，最优子结构这个概念是什么？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;首先是最优的，也就是这个概念在寻找一个极值。&lt;/li&gt;
  &lt;li&gt;其次是子结构，也就是这个结构是蕴含在每一次状态转换中的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上文说到FP是没有最优子结构的，但是FP的确存在子结构，也就是&lt;/p&gt;

&lt;p&gt;$ Fn=Fn-1 + Fn-2；n &amp;gt; 2 $&lt;/p&gt;

&lt;p&gt;这个也是上文里提到的状态转移方程。大概可以如此断言，&lt;strong&gt;所有的DP问题是可以用状态转移方程来描述其子结构&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我这里有一个没有证实的猜想:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;所有DP问题都有唯一的子问题结构，最优子结构的意思并不是有众多子结构，选择了最优的子结构
而是这个子结构是解决极值问题.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们来谈论一下&lt;strong&gt;零钱兑换&lt;/strong&gt;这个问题。
给定一个总数x和有可能组成其部分的集合s。&lt;/p&gt;

&lt;p&gt;我们想要的&lt;strong&gt;极限值&lt;/strong&gt;是&lt;strong&gt;最小的硬币类型使用量&lt;/strong&gt;。
我们试着看看能不能把这个问题的&lt;strong&gt;规模缩小&lt;/strong&gt;试着看看能不能找到基本情况。&lt;/p&gt;

&lt;p&gt;假设总数是18元，可用的零钱集合是｛2，3，5｝&lt;br /&gt; 
使用分解18元的策略（自顶向下）{这是贪心逻辑}&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;18元 ｛｝&lt;/li&gt;
  &lt;li&gt;13元 ｛5｝&lt;/li&gt;
  &lt;li&gt;08元  ｛5，5｝&lt;/li&gt;
  &lt;li&gt;03元  ｛5，5，5｝&lt;/li&gt;
  &lt;li&gt;00元  ｛5，5，5，3｝&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;每一次从硬币堆中挑选一枚硬币，就会获得新的状态。{这是动态规划逻辑}&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;18元的最优数量就相当于&lt;/li&gt;
  &lt;li&gt;18-2=16&lt;/li&gt;
  &lt;li&gt;18-3=15&lt;/li&gt;
  &lt;li&gt;18-5=13&lt;/li&gt;
  &lt;li&gt;这三种情况中最优数量+1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样就会构成一个n叉树,n是零钱种类的数量。&lt;/p&gt;

&lt;pre class=&quot;mermaid&quot; style=&quot;text-align: center;&quot;&gt;
graph TD
    A[&quot;18&quot;] --&amp;gt; B[&quot;16&quot;]
    A --&amp;gt; C[&quot;15&quot;]
    A --&amp;gt; D[&quot;13&quot;]
    B --&amp;gt; E[&quot;14&quot;]
    B --&amp;gt; F[&quot;13&quot;]
    B --&amp;gt; G[&quot;11&quot;]
    C --&amp;gt; H[&quot;...&quot;]
    D --&amp;gt; I[&quot;11&quot;]
    D --&amp;gt; J[&quot;10&quot;]
    D --&amp;gt; K[&quot;8&quot;]

    class F,D blueNode;
    class G,I greenNode
    classDef blueNode fill:#aaaaff,stroke:#0000ff,stroke-width:2px;
    classDef greenNode fill:#aaccff,stroke:#00ffff,stroke-width:2px;
&lt;/pre&gt;

&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
这里使用贪心算法的逻辑来看，子问题不独立 
&lt;br /&gt;
F(n) = F(n-1) $\cap$｛当前最优的一枚硬币类型｝；n &amp;gt;= 1
&lt;/div&gt;
&lt;div style=&quot;padding:10px;&quot;&gt;&lt;/div&gt;

&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
但是使用动态规划的逻辑来看，子问题互相独立
&lt;br /&gt;
F(n) = min(F(n-k\[...\]) ) + 1;
k就是零钱的种类数量
&lt;/div&gt;

&lt;p&gt;需要感受一下这里的区别。&lt;/p&gt;

&lt;p&gt;有了例子的感受，我们再来讨论最优子问题。怎么发现子问题是解决DP问题的关键，DP子问题有一个很关键
的性质，是DP&lt;strong&gt;子问题之间是相互独立的&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;子问题独立性&quot;&gt;子问题独立性&lt;/h2&gt;
&lt;p&gt;我们以FB的计算为例子，你可能会想FB的每一项都是前两项的和（除了第一第二项），这样说明他们每一项
都&lt;strong&gt;依赖&lt;/strong&gt;别的项的值，这样也算子问题之间独立吗？&lt;/p&gt;

&lt;p&gt;当我们在谈论独立性时，我们在谈论求解一个子问题时不依赖于其他子问题的求解过程。而不是不依赖其他子问题
的求解结果，以FB为例，每一次你计算一个项的时候他的前2项都是固定的值（这个值可能是在memo中，可以在之后递归解答）&lt;/p&gt;

&lt;p&gt;我们在通过加法把子问题组合在一起的时候子问题是对于这个组合独立的。&lt;/p&gt;

&lt;h2 id=&quot;子问题不独立&quot;&gt;子问题不独立&lt;/h2&gt;
&lt;p&gt;比如N皇后问题。虽然我依然可以把问题划分为“每行放一个皇后”这个子问题，但是由于皇后的规则导致之前的皇后位置是
会影响现在子问题的选择的，这就是子问题之间互相影响的例子。&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;p&gt;以下是使用memo的DP和没有使用memo的DP&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// has memo&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#define MIN(a, b)                                                              \
  ({                                                                           \
    __typeof__(a) _a = (a);                                                    \
    __typeof__(b) _b = (b);                                                    \
    _a &amp;lt; _b ? _a : _b;                                                         \
  })
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coin_change_memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin_change_memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coinChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin_change_memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//coin的C代码无memo&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coin_change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin_change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coin_change_memo_bottomup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;coinChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//int res = coin_change_memo(coins, coinsSize, amount, memo);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coin_change_memo_bottomup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coinsSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;
&lt;p&gt;DP的大部分概念已经在本文给出了，这个算是比较容易接受的递归逻辑。本文有一些衍生型问题，之后会专门写文详细说明。&lt;/p&gt;

</description>
          <pubDate>2025-02-23T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/a-rts_w1_basic_algorithm</link>
          <guid isPermaLink="true">https://niclas3.github.io/a-rts_w1_basic_algorithm</guid>
        </item>
      
    
      
        <item>
          <title>[Share] 怎么制作一个计算器</title>
          <description>&lt;p&gt;&lt;a href=&quot;https://x.com/ChadNauseam/status/1890889465322786878&quot;&gt;&lt;strong&gt;原文&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;一个计算器大家都可以写一个&quot;&gt;一个计算器？大家都可以写一个&lt;/h2&gt;
&lt;p align=&quot;right&quot;&gt;niclas 译&lt;/p&gt;

&lt;p&gt;也许不是这样的。&lt;/p&gt;

&lt;p&gt;一个计算器需要给出你键入的数学表达式的结果。这个功能比它听上去的难非常非常多。&lt;/p&gt;

&lt;p&gt;我接下来要告诉你一个有史以来最伟大计算器应用诞生的故事.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个iOS上的计算器应用，你发现了吧！它算错了
(10^100) + 1 - (10^100)  + 1 - (10^100)答案是0不是1&lt;/p&gt;

&lt;p&gt;安卓的计算器是对的，故事从现在开始就变得有些疯狂了。
&lt;img src=&quot;/assets/20250217_htbc_02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;谷歌雇佣了Hans-J.Boehm ，就是那个“boehm 垃圾回收器”的Boehm。&lt;/p&gt;

&lt;p&gt;谷歌需要一个精英程序员来修复垃圾回收和并发编程问题。他推动了C++ 的
shared Variable 语义。&lt;/p&gt;

&lt;p&gt;但是谷歌给他了更艰巨的任务：写一个计算器应用。
&lt;img src=&quot;/assets/20250217_htbc_03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;即使是Boehm大神，这个任务依然很艰巨。&lt;/p&gt;

&lt;p&gt;所有计算器应用的目的都是给你正确的答案。浮点数（floating pointer）没有这么精准
浮点数不能表示0.3或者10^100.这就意味着一个建立在浮点数体系下的计算器就像一幢建在沙子上的房子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_04.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再怎么强调都不为过。一个计算器如果想要给出正确的表达式答案，它必须可以表示数字。&lt;/p&gt;

&lt;p&gt;但几乎所有的数字都不能被IEEE浮点数来表示。这样就导致了，即使是最简单的运算符只要使用浮点数
运算就需要非常小心才能得到精确的答案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_05.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然一些问题，你可以通过大数（big
number）来规避。大多数数值类型只有2bytes或者4bytes。这点长度是不够大数使用的，使用大数这个技术
表示整数是没有内存限制的，他们会根据需要的精度获取对应的内存大小。
大数的引入解决了 (10^100) + 1  - (10^100)
这个问题。但是大数只能表示整数，分数怎么办呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_06.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分数很好处理。分子和分母分别使用大数表示就行。这种类型在算术运算上是简单的，而且始终可以给出精确的答案。&lt;/p&gt;

&lt;p&gt;很多人可能在这里就宣布胜利了，但Boehm没有满意。
&lt;img src=&quot;/assets/20250217_htbc_07.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;数学可不只是分数，那 $\pi$ 和$\sqrt{2}$呢？如果没有定义$\pi$的分数形式的话，一个基于任意精度分数的计算器依然不能告诉你圆的周长，&lt;/p&gt;

&lt;p&gt;如果一个计算器都不能处理初中数学，那它应该不是一个好计算器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_08.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代数运算可以让他更接近目标。让我们忘记把数表示为分数形式，数也可以通过他们满足的多项式方程的形式表示。
比如$\sqrt{2}$,可以表示成x^2-2=0。（当然你需要取正数解）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_09.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在数学运算就变得需要一些小技巧实现了。&lt;/p&gt;

&lt;p&gt;加法：你需要创造一个新的多项式，这个多项式的根就是加后的结果
乘法：你需要使用多项式结合（polynomil composition）和结果式（resultants）&lt;/p&gt;

&lt;p&gt;猜猜怎么样？Boehm还是觉得不够，这套系统也只能处理代数数（algebraic
number）。我们还是不能处理$\pi$。&lt;/p&gt;

&lt;p&gt;所以 Boehm 没什么选择只能继续深入。接下来我们就需要认真一点了。&lt;/p&gt;

&lt;p&gt;我们从整数（大数）开始，经过了有理数（rational number）然后是代数数（algebraic
number），下一个是什么？&lt;/p&gt;

&lt;p&gt;构造性实数（constructive real number）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着Boehm开始思考“递归实数算术”（recursive real arithmetic）。&lt;/p&gt;

&lt;p&gt;你提供一个算式和所需答案的精度，RRA就至少可以给你一个对应精度的答案。&lt;/p&gt;

&lt;p&gt;看看这个这本经典课本的封面，这上面的尺子变得越来越小。
&lt;img src=&quot;/assets/20250217_htbc_11.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;构造性实数是一种可以通过计算越来越精确的数。&lt;/p&gt;

&lt;p&gt;你没法告诉我$\pi$究竟是多少位。但是如果你告诉我你想要一个与$\pi$相差0.01的实数，我就可以告诉你
是3.14。&lt;/p&gt;

&lt;p&gt;$\pi$的值与3.14的差距小于0.01.所以3.14是一个有效答案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_12.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在，我想要一个与2$\pi$差距0.01的数。 你也知道怎么生成$\pi$（3.1415926….）&lt;/p&gt;

&lt;p&gt;这样你看就可以用这个值乘2.但是你需要使用多少位的数字，来保证得到的答案与2$\pi$在0.01差距内呢？&lt;/p&gt;

&lt;p&gt;将一个数乘以2会让错误也翻倍。如果你需要一个与2$\pi$相差0.01一内的数，你就需要一个
0.005精度的$\pi$的近似值，也就是3.141。 3.141乘以2就可以得到想要精度的2 $\pi$值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_13.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RRA就是这么运行的。&lt;/p&gt;

&lt;p&gt;所有RRA里的数字都被表示为，一个参数是实数返回值是实数的函数。&lt;/p&gt;

&lt;p&gt;这个函数需要一个容差（tolerance）作为参数，函数会返回就会在这个容差内的实数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_14.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RRA很容易用。你只需要告诉它你需要的精度它就会递归到你需要的精度并给你答案。&lt;/p&gt;

&lt;p&gt;它也可以处理$\pi$或者$\sqrt{2}$。这也是一个计算器的必备功能。&lt;/p&gt;

&lt;p&gt;你一定在想，现在Boehm应该会停在这里了。&lt;/p&gt;

&lt;p&gt;只需要将‘输出精度’设置为计算器显示的数字位数，对吧？&lt;/p&gt;

&lt;p&gt;那么所有计算器显示的所有数都会正确。所以现在计算器总是显示正确的答案了对吧？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_15.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但，没有这么快。当用户键入‘1-1’，答案是0,所以显示0.&lt;/p&gt;

&lt;p&gt;但是RRA只会告诉你‘1-1’的结果在误差为0.00000000000000的范围内。&lt;/p&gt;

&lt;p&gt;显示0.00000000000000在屏幕上，当答案就是0的时候就不是一个好的用户体验了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_16.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Boehm需要重新开始。在这个时候他一定是感到担忧的，他的“空间优化的保守垃圾回收”和这个
相比简直是小朋友的游戏。&lt;/p&gt;

&lt;p&gt;他一个人做不来这事情。他雇用了一些同事，Corky Cartwright 和 Vernon Lee
Jr来帮他。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_17.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你可以检查两个RRA数是不一样的，通过不停的增加精度直到找到不同的位。&lt;/p&gt;

&lt;p&gt;但是如果两个数是相同的，你就必须不停的增加精度，但因为是相同的所以这个程序就不会停止。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_18.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还记得吗，如果计算器显示e^(-10000)的答案是0,那就错了。它的答案并不是0，这个算式的
答案应该是0.00000…然后一直输出下去直到你看到变化。&lt;/p&gt;

&lt;p&gt;但是，计算器应该在计算sin($\pi$)的时候显示0, sin($\pi$)的值就是0。
RRA并不能告诉我们sin($\pi$)的值就是0.&lt;/p&gt;

&lt;p&gt;或者有些计算器就像iOS的计算器一样不给出答案。（笑）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_19.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用结构化实数不能展示出正确的答案。但是Boehm和他的同事意识到需要改变工作方式。他们
不需要处理所有的结构化实数。&lt;/p&gt;

&lt;p&gt;他们只需要处理那些计算器需上运算能够表达的数。
运算符有这些&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;四则运算和平方根运算&lt;/li&gt;
  &lt;li&gt;三角函数和反三角函数运算&lt;/li&gt;
  &lt;li&gt;指数和对数运算&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这对于结构化实数来说是非常少的数字。而且事实上，已经有人在之前做过相关问题的研究了。
Dan Richardson和John Fitch，他们1994就解决了这个问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_20.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果能找到一个斯卡纽猜想（Schanuel‘s conjecture）的反例，那他们的解决方案就完全正确了。&lt;/p&gt;

&lt;p&gt;但是事实上，还没有找到这样的数。&lt;/p&gt;

&lt;p&gt;斯卡纽猜想是数论中重要的猜想，至今为止也没有人找到它的反例。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_21.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;听上去很完美，就只有一个问题了。&lt;/p&gt;

&lt;p&gt;但这计算速度还是太慢了, 1 不等于1-e^(e^(-1000))。但是如果使用Richardson Fitch’s
算法来检测，需要花的步骤数量比这个宇宙的原子数量还多。&lt;/p&gt;

&lt;p&gt;他们需要更快的方案。&lt;/p&gt;

&lt;p&gt;原本的问题是如何判断两个结构性实数是否相等。这个问题似乎不好解决。&lt;/p&gt;

&lt;p&gt;他们通过限制如何构造这些数来简化问题，让问题变得可解了，只是速度变得很慢。&lt;/p&gt;

&lt;p&gt;他们还能把他再简化吗？&lt;/p&gt;

&lt;p&gt;他们发现如果答案真的是0，他们显示了“0.000000..”也并不是世界末日，不是完美的用户体验而以。
他们只要不要在答案是0.0000001的时候显示成0就行了。&lt;/p&gt;

&lt;p&gt;也许这样就能写出一个快速的构造算法了吗？&lt;/p&gt;

&lt;p&gt;之后他们想出了一些好主意。RRA提供了一个全功能的构造实数，但也有一个坏处，他没法给出一个准确的答案。&lt;/p&gt;

&lt;p&gt;有理数运算（rational arithmetic）可以给你准确的答案，但是没法表示$\pi$&lt;/p&gt;

&lt;p&gt;不然就取长补短怎么样？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_22.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/20250217_htbc_23.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;团队发现一个规律，如果用户只是输入6*9或者8/3,你就不需要使用RRA来处理，有理数运算就可以就可以处理这些情况。&lt;/p&gt;

&lt;p&gt;你只需要在有理数运算不够用的时候使用RRA就好了。比如算式里出现了$\pi$或者$\sqrt{2}$的时候使用RRA，其他时候交给实数运算就好。&lt;/p&gt;

&lt;p&gt;有理数是准确的，但是不能表达$\pi$。&lt;/p&gt;

&lt;p&gt;RRA数可以表达$\pi$但是不可以准确表达数。&lt;/p&gt;

&lt;p&gt;他们的解决方案是：所有的数都用两种表示法来表示。&lt;/p&gt;

&lt;p&gt;但这还不够，一旦算式里有RRA了那么结果就是不准确的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_24.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但即使是无理数，RRA有的时候也是大材小用。&lt;/p&gt;

&lt;p&gt;RRA以函数的形式表示$\pi$，这个函数可以返回一个任意精度的$\pi$的有理数。（只有RRA的数字
以函数形式表示）&lt;/p&gt;

&lt;p&gt;如果你说“我想要一个精度是0.001的$\pi$”，RRA就会告诉你答案是3.141&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_25.jpg&quot; alt=&quot;&quot; /&gt;
有的时候你需要RRA。&lt;/p&gt;

&lt;p&gt;但是有的时候我只需要一个特殊的符号代表$\pi$，这个时候就用这个符号而不是使用RRA。&lt;/p&gt;

&lt;p&gt;我们叫这个符号表示法，$\pi$被写成符号$\pi$而不是一个无限不循环小数数列。
&lt;img src=&quot;/assets/20250217_htbc_26.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们把$\pi$用符号表示，显然我们也想给实数1一个符号来表示它。&lt;/p&gt;

&lt;p&gt;但是我们使用的许多有理数是通过对有理数进行运算得到的。我们也可以为这些无理数提供一个
符号表示。&lt;/p&gt;

&lt;p&gt;他们选择符号化这些运算 √arg, eᵃʳᵍ, ln(arg), log₁₀(arg), sin(πarg),
tan(πarg),等等。（arg在这里是一个有理数）&lt;/p&gt;

&lt;p&gt;所以最后，他们对于数字的定义是：有理数和实数相乘，其中实数要么是RRA实数，也么是符号化的实数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_27.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以最终表示是这样的，一个数被表示为一个有理数乘实数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_28.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;记住，最根本的问题是RRA数没法检查相等性。只要你使用了RRA那整个运算都是不精确的。&lt;/p&gt;

&lt;p&gt;但是有些时候你需要RRA。&lt;/p&gt;

&lt;p&gt;所以他们做的所有的事情就是尽量避免使用RRA！&lt;/p&gt;

&lt;p&gt;举个例子, (1 x $\pi$)+(3 x $\pi$)
，我们很幸运加法两边的实数部分都是$\pi$，由于实数部分相同所以我们直接把有理数部分相加就好了&lt;/p&gt;

&lt;p&gt;如果是 (1 x $\pi$)+(3 x $\sqrt{2}$)就只能使用RRA来计算了 。&lt;/p&gt;

&lt;p&gt;有了这个符号表示法，这样有两个好处：
所有在屏幕上显示的位数都是对的，而且再也不会显示不需要的部分了。&lt;/p&gt;

&lt;p&gt;构造一个“计算机代数系统”也是同样的目标，但是更慢也更复杂。&lt;/p&gt;

&lt;p&gt;维护一个产品质量级别的计算机代数系统非常复杂，非常少的人可以有能力做到这样的事情。&lt;/p&gt;

&lt;p&gt;但是Boehm和他的团队所提出的解决方案是100%正确的，它以实现复杂度为1%的情况下，已经达到了接近完美的用户体验。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/20250217_htbc_29.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这就是工程！你应该读这篇 &lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/3385412.3386037&quot;&gt;paper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我希望你下次使用你安卓机的计算器的时候可以更感激一些。&lt;/p&gt;

&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;

&lt;p&gt;文章提供一个计算机代数系统的构建的工程实现。可以学习的是对于不能解决的问题walkaround的
方法。拆分问题，把不能解决的问题限制在一个可以控制的范围内是一种好用的模式。&lt;/p&gt;

&lt;p&gt;Wed Feb 19 12:08:06 PM CST 2025&lt;/p&gt;

</description>
          <pubDate>2025-02-17T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/art-s-_w1_how_to_build_calculator</link>
          <guid isPermaLink="true">https://niclas3.github.io/art-s-_w1_how_to_build_calculator</guid>
        </item>
      
    
      
        <item>
          <title>什么是ARTS</title>
          <description>&lt;p&gt;这是一个叫做ARTS的活动，要求参加活动者每人每周完成一个ARTS任务。&lt;/p&gt;
&lt;pre&gt;
✅  Algorithm 做一道算法题

✅  Review    读一篇英文文章

✅  Tips      推荐一个技术或者一个技巧

✅  Shares    分享一个观点
&lt;/pre&gt;

&lt;p&gt;从陈皓的书里看到他做过类似的活动.&lt;/p&gt;

&lt;h2 id=&quot;参考连接&quot;&gt;参考连接&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/36667269/&quot;&gt;« 左耳听风 » &lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;

&lt;p&gt;我也想试着做一做,会一直更新在这个blog里,如果你有想法可以联系我.&lt;/p&gt;
</description>
          <pubDate>2025-02-14T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/program/arts/what_is_arts</link>
          <guid isPermaLink="true">https://niclas3.github.io/program/arts/what_is_arts</guid>
        </item>
      
    
      
        <item>
          <title>文件需要一个家</title>
          <description>&lt;p&gt;沿袭自UNIX的精神，”everything is a file.” 这里我们要讨论一下两件事，第一，
everything具体指的是什么东西？第二，file指的是什么?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;everything 泛指OS中的资源，也就是硬盘里的数据，进程，配置，内存数据，等等。&lt;/li&gt;
  &lt;li&gt;files 指的是一种结构，首先这种结构标记了一个范围的有意义的数据，且这个结构支持
 某种操作方式来处理这种结构。方式比如说，open/close/write/read/seek
 这一系列的操作。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;inodes-x-vnodes-x-files&quot;&gt;inodes X vnodes X files&lt;/h2&gt;
&lt;p&gt;inode: 提供一种文件和硬盘数据块的中间层抽象
vnode: 提供一种文件系统的节点
file : 提供一个运行时的文件抽象，为了和进程交互.&lt;/p&gt;

&lt;h2 id=&quot;文件系统&quot;&gt;文件系统&lt;/h2&gt;
&lt;p&gt;文件系统则是以文件这种结构组织数据的具体实现。&lt;/p&gt;
</description>
          <pubDate>2025-01-02T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/program/os/on_file_system</link>
          <guid isPermaLink="true">https://niclas3.github.io/program/os/on_file_system</guid>
        </item>
      
    
      
        <item>
          <title>聊聊中断</title>
          <description>&lt;h2 id=&quot;起因&quot;&gt;起因&lt;/h2&gt;

&lt;p&gt;我一直维护一个项目叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frog&lt;/code&gt;，它是一个基于x86的32bits操作系统。最近想要 着手给他增加网络功能，在增加之前首先需要替换或者更新之前孱弱的中断系统，由于操作系统只需要使用三种外部中断，&lt;strong&gt;时钟中断&lt;/strong&gt;，&lt;strong&gt;键盘中断&lt;/strong&gt;和&lt;strong&gt;鼠标中断&lt;/strong&gt;,秉着够用就行的原则我使用的是古老的&lt;strong&gt;PIC&lt;/strong&gt;+&lt;strong&gt;PIT&lt;/strong&gt;，&lt;strong&gt;中断控制器(PIC)&lt;/strong&gt;提供中断控制，PIT提供时钟中断。现在需要支持网卡需要支持的设备越来越多,也许增加一个设备总线(PCI)是更好的选择。&lt;/p&gt;

&lt;p&gt;中断作为一种通知机制，是硬件与CPU高效通信的重要手段，尤其是处理异步时间时表现出色。&lt;/p&gt;

&lt;h2 id=&quot;作为通知机制的中断&quot;&gt;作为通知机制的中断&lt;/h2&gt;
&lt;p&gt;中断是硬件和CPU交互的机制之一，除了中断还有&lt;strong&gt;轮询&lt;/strong&gt;,&lt;strong&gt;DMA&lt;/strong&gt;,&lt;strong&gt;I/O映射&lt;/strong&gt;,&lt;strong&gt;消息专递(MSI)&lt;/strong&gt;。中断是一种有效的通知机制，尤其是在需要快速响应的异步处理场景。中断可以直接打断CPU处理的当前问题执行指定任务(这个在OS里也有类似的机制，&lt;strong&gt;抢占式多任务&lt;/strong&gt;)。中断也可以有优先级，通过一个PIC或者APIC，一种中断控制器来判断各种中断的优先级。&lt;/p&gt;

&lt;h3 id=&quot;exception--同步中断synchronous-interrupt&quot;&gt;Exception — 同步中断(synchronous interrupt)&lt;/h3&gt;
&lt;p&gt;同步中断是由CPU发起的，当指令发生异常的时候则会触发同步中断，比如&lt;strong&gt;缺页异常&lt;/strong&gt;，&lt;strong&gt;除零异常&lt;/strong&gt;所以这个中断又被称之为&lt;strong&gt;异常(exception)&lt;/strong&gt;, x86-32位，CPU提供一些默认的&lt;a href=&quot;https://wiki.osdev.org/Exceptions&quot;&gt;exception&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;interrupt--非同步中断asynchronous-interrupt&quot;&gt;Interrupt — 非同步中断(asynchronous interrupt)&lt;/h3&gt;
&lt;p&gt;非同步中断是外部硬件在任意时间和CPU交互的手段，这也是本文着重的部分。&lt;/p&gt;

&lt;p&gt;Intel 的文档是这样分类这两种中断的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interrupt&lt;/strong&gt; 
&lt;strong&gt;可屏蔽中断(Maskable interrupt)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;所有的I/O外设(外部硬件)发起的IRQs都是&lt;strong&gt;可屏蔽中断&lt;/strong&gt;, 可屏蔽中断有&lt;strong&gt;可以屏蔽&lt;/strong&gt;和&lt;strong&gt;不可以屏蔽&lt;/strong&gt;两个状态。
  一般可执行中断都是会经过PIC(可编程中断控制器)传入CPU 。&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;具体来说以x86-32架构就是&lt;strong&gt;EFLAG&lt;/strong&gt;寄存器里的IF标识和PIC的&lt;strong&gt;IMR(interrupt must register)&lt;/strong&gt;控制。这两个控制机制算是x86架构中的两级控制。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;strong&gt;IMR（中断屏蔽寄存器）&lt;/strong&gt;属于PIC的一部分，负责屏蔽特定中断信号，不传入CPU。而&lt;strong&gt;EFLAG&lt;/strong&gt;寄存器中的&lt;strong&gt;IF&lt;/strong&gt;位，则用于CPU自身控制是否响应中断。&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;IMR&lt;/strong&gt;配置和你的中断控制器有关，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frog&lt;/code&gt;目前使用的是&lt;strong&gt;8259A&lt;/strong&gt; 所以&lt;strong&gt;IMR master&lt;/strong&gt;是
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x21&lt;/code&gt;端口, &lt;strong&gt;IMR slave&lt;/strong&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xA1&lt;/code&gt;端口。如果后续改成&lt;strong&gt;APIC&lt;/strong&gt;就不需要&lt;strong&gt;IMR&lt;/strong&gt;而是使用&lt;strong&gt;APIC&lt;/strong&gt;提供的
  中断优先级和屏蔽机制管理&lt;strong&gt;IRQ&lt;/strong&gt;。
  nasm语法就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sti&lt;/code&gt; 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cli&lt;/code&gt;。分别是设置屏蔽和清除屏蔽。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;&lt;strong&gt;不可屏蔽中断(Nonmaskable interrupt)&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;重要的事件(比如硬件错误,内存控制器或者看门狗)会发起一些&lt;strong&gt;不可屏蔽中断&lt;/strong&gt;,
NMI信号会&lt;strong&gt;直接连接CPU&lt;/strong&gt;，而不通过PIC。&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;在intel文档vol-3 6.3.1节表格6-1展示了NMI interrupt的中断号是0x02&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exceptions&lt;/strong&gt;
  处理器监测到的异常(Processor-detected exceptions)&lt;/p&gt;

    &lt;p&gt;Exceptions是CPU在运行指令的时候监测到的异常。这种异常是同步触发，这种异常是由操作系统异常处理代码处理的，这种异常通常是程序错误引起的。这种异常大概可以以是不是会被保存现场信息比如把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eip&lt;/code&gt;这个寄存器存入&lt;strong&gt;内核栈&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Exceptions&lt;/strong&gt;分为3类&lt;strong&gt;faults&lt;/strong&gt;,&lt;strong&gt;traps&lt;/strong&gt; 和 &lt;strong&gt;aborts&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;在谈论Exception之前需要了解“&lt;strong&gt;指令完成&lt;/strong&gt;”。&lt;strong&gt;指令完成&lt;/strong&gt;指的是指令的所有步骤都执行完毕
   &lt;em&gt;&lt;strong&gt;取指&lt;/strong&gt;、
   &lt;strong&gt;解码&lt;/strong&gt;、
   &lt;strong&gt;执行&lt;/strong&gt;、
   &lt;strong&gt;写回&lt;/strong&gt;。&lt;/em&gt;
   这个概念是CPU制造需要用到的具体可以下次聊CPU流水线来详细了解。&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;错误(Faults)&lt;/p&gt;

        &lt;p&gt;错误(Faults)是在指令&lt;strong&gt;尚未完成&lt;/strong&gt;时触发的异常。
  这是一种可以被改正的异常，发现错误之后一旦被改正之后就可以恢复正常的&lt;strong&gt;执行流&lt;/strong&gt;。当一个指令发生&lt;strong&gt;Faults类型&lt;/strong&gt;的异常的时候会把&lt;strong&gt;当前指令&lt;/strong&gt;的eip压栈保存起来，进入对应的异常处理程序，异常处理完成之后会从利用之前保存的eip中恢复原来的执行流，会从触发faults的指令开始执行。&lt;/p&gt;

        &lt;p&gt;例如：&lt;strong&gt;页面错误(page fault)&lt;/strong&gt;，&lt;strong&gt;段错误(segment fault)&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;陷阱(Traps)&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;陷阱(Traps)&lt;/strong&gt;是在指令&lt;strong&gt;已经完成&lt;/strong&gt;后触发的异常。
  这个陷阱和&lt;strong&gt;software Interrupt&lt;/strong&gt;关系也不小，&lt;strong&gt;software Interrupt&lt;/strong&gt;其实就是一个Traps类型的exception。Traps是一种不可以恢复的异常，一旦触发了traps那么&lt;strong&gt;这条指令的下一条指令&lt;/strong&gt;的eip则会被押入栈中保存。异常处理结束后会接着下面的指令恢复原来的执行流。&lt;/p&gt;

        &lt;p&gt;例如：x86-32 架构中有3个异常分别是&lt;strong&gt;#DB&lt;/strong&gt;, &lt;strong&gt;#BP&lt;/strong&gt;, &lt;strong&gt;#OF(debug exception,
  breakpoint, overflow)&lt;/strong&gt;&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#DB (debug exception)&lt;/code&gt;
  这个既可以是&lt;strong&gt;faults&lt;/strong&gt;也可以是&lt;strong&gt;traps&lt;/strong&gt;，双重属性是为了提供断点，单步执行，数据观察。这个有很多功能之后写文章详细说明。&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#BP (breakpoint Exception)&lt;/code&gt;
  这个提供了断点为了设置断点。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int3&lt;/code&gt;是x86专门设计的单字节中断指令(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xCC&lt;/code&gt;)&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#OF (Overflow Exception)&lt;/code&gt;
  这是为了检查算数操作的&lt;strong&gt;溢出(Signed Overflow)&lt;/strong&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;into&lt;/code&gt;是为了直接出发这个&lt;strong&gt;Traps&lt;/strong&gt;(这个很少用，算数溢出在应用层就会被捕获了很少到CPU还没处理的)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;终止(Aborts)
  这里只有发生非常严重的问题的同时还才会触发的一类异常。这时候有可能连eip或者栈都被破坏了。这是一种不可恢复的异常。&lt;/p&gt;

        &lt;p&gt;Intel 提供了两种&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#MC (Machine Check，机器检查)&lt;/code&gt;
  某种严重的硬件故障。比如内存ECC校验失败。缓存一致性错误，总线传输错误，等其他不可恢复的硬件错误。这个需要读取硬件提供的MCA(Machine check architecture)寄存器获取具体错误原因。&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#DF (Double fault，双重故障)&lt;/code&gt;
  当CPU处理异常的时候又发生了异常。这个时候可以记录上下文信息。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Programmed exceptions&lt;/strong&gt;
  这个和软件中断(software interrupt)差不多，它也是由程序的指令生成的不是硬件事件引发的。他们有俩个指令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bound&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;into&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;into&lt;/code&gt;已经讲过了。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bound&lt;/code&gt;是为了检测数组或者数据范围是否超出指定边界
  &lt;strong&gt;第一个操作数&lt;/strong&gt;是要检查的索引或者值
  &lt;strong&gt;第二个操作数&lt;/strong&gt;是内存地址，包含两个边界值(低边界，高边界)
  如果寄存器的值小于低边界或者大于高边界，触发&lt;strong&gt;#BR(bounds check exception)&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  bound reg, mem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;中断向量一共256个，范围是0-255。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;作为执行流的中断&quot;&gt;作为执行流的中断&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;执行流&lt;/strong&gt;定义为一段正在执行的代码。
要知道一段正在执行的代码需要一些必要的外围环境作为支持。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;外围环境&lt;/strong&gt;(context)就是&lt;strong&gt;栈&lt;/strong&gt;和&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cpu寄存器&lt;/strong&gt;来处理函数调用和一些局部变量的存储。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这次讨论着重考虑&lt;strong&gt;栈&lt;/strong&gt;的作用，在一个OS主要有如下9种&lt;strong&gt;执行流&lt;/strong&gt;,我会分别给出他们使用的&lt;strong&gt;栈&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/forg_on_interrupt_processtable.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 
   类型                         栈类型
1. 普通进程(用户进程)           用户栈/内核栈
2. 内核进程                     内核栈

3. 中断处理程序(ISR)            内核栈/中断栈 \
4. 异常处理程序(exceptions)     内核栈        |  中断有关
5. 软中断(Softirqs&amp;amp;tasklets)    内核栈        |
6. 工作队列(work Queues)        内核栈        /

7. 信号处理程序   (*)           用户栈/信号栈
8. 异步I/O回调    (*)           用户栈/内核栈
9. 引导程序                     初始栈
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;中断的处理流程与机制&quot;&gt;中断的处理流程与机制&lt;/h3&gt;
&lt;h4 id=&quot;简要中断处理流程&quot;&gt;简要中断处理流程&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;hw=&amp;gt;operation: hardwares
cpu=&amp;gt;operation: CPU
pic=&amp;gt;operation: PIC
isr=&amp;gt;operation: ISRs
hw-&amp;gt;pic-&amp;gt;cpu-&amp;gt;isr
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;硬件设备&lt;/strong&gt;通过中断信号线向&lt;strong&gt;PIC&lt;/strong&gt;发出&lt;strong&gt;IRQs(Interrupt ReQuests)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PIC&lt;/strong&gt;把中断号发送给&lt;strong&gt;CPU&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;根据中断号查询&lt;strong&gt;中断向量表(IVT/IDT)&lt;/strong&gt;执行对应的&lt;strong&gt;中断服务程序(ISR)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;向&lt;strong&gt;PIC&lt;/strong&gt;发送处理完毕的&lt;strong&gt;信号(EOI)&lt;/strong&gt;以便中断控制器可以接受别的信号&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;硬件部分pic中断控制器和硬件设备&quot;&gt;硬件部分PIC(中断控制器)和硬件设备&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 目前只考虑PIC的情况，如果之后Frog会支持APIC会补充APIC的新文章
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;聊中断硬件部分的时候我们需要两个硬件。一个是&lt;strong&gt;发生硬件的设备&lt;/strong&gt;,这次我选网卡。还有一个是&lt;strong&gt;PIC&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;PIC是&lt;strong&gt;用来管理不同中断和CPU通信的中介&lt;/strong&gt;，主要负责&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;接受中断请求。&lt;/li&gt;
  &lt;li&gt;判断是否转发中断请求给CPU(屏蔽检查，优先级判断，服务中检查)&lt;/li&gt;
  &lt;li&gt;发送中断服务到CPU&lt;/li&gt;
  &lt;li&gt;接受&lt;strong&gt;EOI(End of Interrupt)&lt;/strong&gt;信号&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们假设一个网卡发出一个中断请求到PIC上，网卡和PIC是通过铜线相连。
1.PIC接受中断信号。
    这时候PIC接受到网卡中断信号，中断请求记录在IRR(中断请求寄存器)中。
2.PIC判断是否通知CPU
    此时PIC会进行一系列判断，决定是否将网卡中断转发给CPU：
    1. &lt;strong&gt;IMR(中断屏蔽寄存器)&lt;/strong&gt;检查：确认该中断是否被屏蔽。
    2. &lt;strong&gt;ISR(服务中寄存器)&lt;/strong&gt;检查：查看该类型中断是否正在服务中，且CPU尚未释放中断线（通过EOI）。
    3. &lt;strong&gt;优先级判断&lt;/strong&gt;：优先级更高的中断可以打断低优先级的中断&lt;/p&gt;

  &lt;p&gt;3.PIC向CPU发送中断
    一系列判断过后，如果可以发送中断给CPU，那么PIC就会通过中断向量号告诉CPU中
    断类型(中断向量号是在PIC初始化的时候OS和PIC约定好的)。
4.CPU处理中断
    这里的操作我会在内核处理部分详细说明。之后CPU处理中断后会发送EOI信号给PIC
5.PIC接受&lt;strong&gt;EOI&lt;/strong&gt;信号
    PIC会接受到EOI信号清除ISR的标志位，释放中断线。
6.PIC检查挂起的中断
    之后PIC会检查挂起的中断，也就是刚刚因为ISR存在而没有被响应的中断，PIC检查IRR如果又挂起的中断就会继续通知CPU。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由刚刚的流程PIC在硬件层面已经做了一定程度的&lt;strong&gt;优先级&lt;/strong&gt;和&lt;strong&gt;同类型中断屏蔽&lt;/strong&gt;的功能。&lt;/p&gt;

&lt;p&gt;值得一提的是，就网卡中断来说，如果网卡中断被挂起数据包会缓存在网卡上的缓冲区中
类似的硬件都有这种功能。&lt;/p&gt;

&lt;h4 id=&quot;内核处理部分&quot;&gt;内核处理部分&lt;/h4&gt;
&lt;p&gt;CPU首先收到了来自PIC选择的中断,PIC传递来的是已经把&lt;strong&gt;IRQs&lt;/strong&gt;线号转换后的中断向量号，(这是通过数据总线传输来的)intel的CPU有一个机制叫做&lt;strong&gt;中断门&lt;/strong&gt;，CPU通过IDT(中断描述符表)CPU在得到这个中断向量后，使用中断向量号结合IDT查找到对应的中断处理程序的地址&lt;strong&gt;ISR(interrput service routine)&lt;/strong&gt;。这时候就正式进入处理函数的部分，处理中断的流程以给PIC的端 口发送&lt;strong&gt;EOI(end of interrupt)&lt;/strong&gt;为分界分为2个部分。&lt;/p&gt;

&lt;p&gt;我们稍微把CPU时间往前拨动一点到，中断还没有从PIC发送到CPU时候。我们看看OS当时在做什么，这时候OS可能处于两种情况一种是工作在&lt;strong&gt;Ring3&lt;/strong&gt;也就是&lt;strong&gt;用户态&lt;/strong&gt;，一种是工作在Ring0也就是内核态，我挑选Ring3来解释。此时工作在用户态的操作系统由于中断的突然发生打断了当前的执行流，准备越过&lt;strong&gt;中断门&lt;/strong&gt;进入IDT中记录的ISR的地址执行ISR。这时候由于CPU发现是&lt;strong&gt;Ring3-&amp;gt;Ring0&lt;/strong&gt;的权限提升所以需要借助&lt;strong&gt;TSS(Task State Segment)&lt;/strong&gt;来切换当前使用的栈从ring3栈到ring0栈。CPU自动切换栈的同时，还把Ring3时的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ss&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eflag&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eip&lt;/code&gt; 这5个寄存器的值依次压入了内核栈也就是ring0栈栈切换完毕，ring3的寄存器压入完毕之后，由于使用了中断门，所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EFLAG&lt;/code&gt;这个寄存器的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IF位&lt;/code&gt;自动清零用来屏蔽可屏蔽中断，这些做完之后就正式进入目标中断向量号的ISR中开始处理中断。&lt;/p&gt;

&lt;h5 id=&quot;isr部分&quot;&gt;ISR部分&lt;/h5&gt;
&lt;p&gt;由于&lt;strong&gt;ISR&lt;/strong&gt;会处理很多数据所以会尽可能的保存现场。Frog的处理方式是在每一次&lt;strong&gt;ISR&lt;/strong&gt;的时候都会&lt;strong&gt;依次&lt;/strong&gt;压入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ds&lt;/code&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;es&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fs&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gs&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pushad&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push %INR&lt;/code&gt;(最后一个是压入中断向量号)到内核栈中。
操作系统内核提供一个类似&lt;strong&gt;IDT&lt;/strong&gt;一样的&lt;strong&gt;ISR&lt;/strong&gt;的函数指针数组&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intr_table&lt;/code&gt;这里提供一些共用的代码(因为不同架构的CPU在中断处理上的汇编有所不同)。&lt;/p&gt;

&lt;p&gt;在准备好环境之后，&lt;strong&gt;ISR&lt;/strong&gt;需要做的工作是移动一些数据到内存中,和挂起一个对应中断的&lt;strong&gt;softirq&lt;/strong&gt;，一旦这数据处理完毕ISR的工作就结束了。这是就可以调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irq_exit()&lt;/code&gt; 结束ISR的部分。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irq_exit()&lt;/code&gt; 主要用处是给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIC/APIC&lt;/code&gt;发送&lt;strong&gt;EOI&lt;/strong&gt;即调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ack()&lt;/code&gt;方法和查询有没有需要处理的softirqs如果有就启动对应类型的softirqs处理数据。等softirq结束之后结束整个中断运行流即调用iret。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;softirqs部分&quot;&gt;Softirqs部分&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;软中断(softirqs)&lt;/strong&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;指令触发的不同于硬件的软件中断(software interrupt)不同。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先&lt;strong&gt;softirqs&lt;/strong&gt;是一种延迟处理中断的方式。我先聊一下没有softirq的时候中断如何处理我拿网络中断举例子，网络中断会根据刚刚我提到的一系列的从硬件到&lt;strong&gt;ISR&lt;/strong&gt;，拿到网络包数据，之后直接使用网络协议栈处理这个包处理完成之后，结束这个中断的执行流。紧接着再来一个网络中断又是一样拿到数据-&amp;gt;使用协议栈处理包。如果同时出现10个网络中断这样就会不停的被中断打断进行上下文切换，10次中断就需要打断10次并且每一次都需要使用网络协议栈处理数据包。如果有一种方式可以让10次中断变成只从网卡DMA拿数据到操作系统的&lt;strong&gt;FIFO&lt;/strong&gt;缓存中，最后一次一次性处理&lt;strong&gt;FIFO&lt;/strong&gt;缓存里所有的数据包。这样就节省了调用网络协议栈的时候的时间了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;softirqs&lt;/strong&gt;提供一个全局变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pending&lt;/code&gt;来记录不同类型的&lt;strong&gt;softirqs&lt;/strong&gt;的[挂起]状态，一旦检测到有&lt;strong&gt;softirqs&lt;/strong&gt;任务挂起，那么就会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_softirq()&lt;/code&gt;来处理具体的任务，一般&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_softirq()&lt;/code&gt;会处理所有正在挂起的&lt;strong&gt;softirq&lt;/strong&gt;。由于&lt;strong&gt;softirq&lt;/strong&gt;是可以被打断的，所以&lt;strong&gt;softirq&lt;/strong&gt;的任务要适合打断可以重入。本质上说pending这个bitmap是在标记各个&lt;strong&gt;softirq&lt;/strong&gt;对应的处理数据源buffer有无数据的展示，另一个角度来看其实是一种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;生产-消费&lt;/code&gt;的模型，硬件中断&lt;strong&gt;ISR&lt;/strong&gt;部分是被控制不能打断的“&lt;strong&gt;生产者&lt;/strong&gt;”，而&lt;strong&gt;softirqs&lt;/strong&gt;部分是可以被打断的 “&lt;strong&gt;消费者&lt;/strong&gt;“。&lt;strong&gt;生产者&lt;/strong&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raise_softirqs()&lt;/code&gt;来挂起某个类型(预约)一个&lt;strong&gt;消费者&lt;/strong&gt;来处理他产生的数据。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;名词解释
&lt;strong&gt;挂起(pending)&lt;/strong&gt; 一个任务暂时无法执行，因为他需要的一些条件还没有被满足。我可能会翻译为”代办”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;中断嵌套与中断优先级&quot;&gt;中断嵌套与中断优先级&lt;/h3&gt;
&lt;p&gt;中断嵌套存在两种不同定义的上下文。
1.中断嵌套的实现条件&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1) 硬件支持
PIC 或 APIC 必须支持中断优先级：
如果中断 B 的优先级高于中断 A，PIC/APIC 会通知 CPU处理新的中断。
低优先级的中断线（如 A）被屏蔽直到 B 处理完成。
(2) 内核支持
内核必须正确管理中断嵌套计数和上下文：
进入新的中断时，内核会增加嵌套计数器。
退出中断时，减少嵌套计数器，确保多层嵌套能够正确恢复。
(3) 中断屏蔽机制
通常，同一类型的中断（如同一个网卡的中断）会被内核配置为不可嵌套处理，以减少复杂性。
但不同类型或更高优先级的中断可能会被允许打断。
如果中断 B 到达而不能被响应，会发生什么？
这取决于中断控制器和内核的配置。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果中断到达而不能被响应会发生什么&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(1) 中断被屏蔽（Masked）
如果中断 B 被屏蔽（如同类型中断或低优先级中断），它将不会被响应。
中断信号可能会保持挂起，直到屏蔽解除。例如：
在 PIC 中，某条中断线被屏蔽时，即使有信号到达，PIC 不会通知 CPU。
(2) 中断被丢弃
某些硬件或驱动程序可能会忽略新的中断信号，而不会挂起等待。
例如，在一些简单的设备中，如果缓冲区已满，新的中断可能被直接丢弃。
(3) 中断队列（Interrupt Queuing）
高级中断控制器（如 APIC 或现代 SoC 的中断控制器）可能会维护一个中断队列：
当一个中断无法立即处理时，将其挂起。
等待 CPU 处理完当前任务后再触发挂起的中断。
(4) 中断 Storm 的风险
如果新的中断持续到达而无法处理，可能导致所谓的 中断风暴（Interrupt Storm）。
中断风暴会占用大量 CPU 时间，导致系统性能急剧下降
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;没有提到的内容&quot;&gt;没有提到的内容&lt;/h2&gt;
&lt;h3 id=&quot;中断栈&quot;&gt;中断栈&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x64的设备会通过tss提供一个中断栈，Frog目前是32位系统所以等升级之后再考虑这些内容。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;

&lt;p&gt;中断栈是64位引入的新内容，也许会再之后更新或者重新整理这篇文章。现在看来这篇文章
写的不太清楚。之后可能会更改一下行文。&lt;/p&gt;

&lt;p&gt;Thu Feb 13 06:25:32 PM CST 2025&lt;/p&gt;
</description>
          <pubDate>2024-12-11T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/program/os/on_interrupt</link>
          <guid isPermaLink="true">https://niclas3.github.io/program/os/on_interrupt</guid>
        </item>
      
    
      
        <item>
          <title>qemu上网指南</title>
          <description>&lt;h1 id=&quot;如何使用bridge连接qemu虚拟机和宿主机&quot;&gt;如何使用bridge连接qemu虚拟机和宿主机&lt;/h1&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#本机环境
uname -a
Linux k 6.2.0-37-generic #38.22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Thu Nov 2 18:01:13 UTC 2 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # 安装虚拟网桥工具 brctl
sudo apt install bridge-utils -y
 # 安装(user-mode linux)工具 tunctl
sudo apt install uml-utilities -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;配置网桥--qemu设置&quot;&gt;配置网桥 &amp;amp; qemu设置&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# &amp;lt;user&amp;gt; 当前user名字&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &amp;lt;enp0&amp;gt; 需联网的网卡&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &amp;lt;bridge ip&amp;gt; 设置符合你当前网络网段的IP地址(可以和enp0网卡一样)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;brctl addbr br0
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tunctl &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tap0 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;user&amp;gt; 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;brctl addif br0 tap0 &amp;lt;enp0&amp;gt; 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip addr add &amp;lt;bridge ip&amp;gt; dev br0 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set&lt;/span&gt; &amp;lt;enp0&amp;gt; up
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;tap0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 设置qemu的网络前端设备和后端设备
qemu-system-i386 \ 
-netdev tap,id=net0,ifname=tap0,script=no,downscript=no \
-device e1000,netdev=net0 \
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;get-your-hands-dirty&quot;&gt;Get your hands dirty&lt;/h1&gt;

&lt;h2 id=&quot;如何让qemu虚拟机可以连接网络&quot;&gt;如何让qemu虚拟机可以连接网络？&lt;/h2&gt;
&lt;p&gt;虚拟机连接网络需要两种必要条件，一个是硬件，一个是软件。硬件是网卡，软件就是一整套协议栈和网卡驱动。当虚拟机已经具有最基本条件之后，就需要&lt;strong&gt;外围网络设备&lt;/strong&gt;保障网络连接，qemu提供了5种上网策略&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User Networking (NAT)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tap Networking&lt;/strong&gt; (Bridge Networking)&lt;/li&gt;
  &lt;li&gt;Socket Networking&lt;/li&gt;
  &lt;li&gt;Macvtap Networking&lt;/li&gt;
  &lt;li&gt;Host Networking&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我选用了第二种策略。
&lt;strong&gt;Tap Networking&lt;/strong&gt; (Bridge Networking) 这种联网方式是通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap&lt;/code&gt;设备将虚拟机和宿主机的&lt;strong&gt;网桥&lt;/strong&gt;上，虚拟机和宿主机通过网桥连接。这样宿主机可以通过网桥&lt;strong&gt;转发&lt;/strong&gt;虚拟机流量从而共享宿主机的网卡。这一套外围设备是宿主机提供的，让我们一步一步设置。&lt;/p&gt;

&lt;h2 id=&quot;外围设备&quot;&gt;外围设备&lt;/h2&gt;
&lt;p&gt;先看一下初始网络接口信息&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip addr show 
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: enp0s31f6: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether xx:xx:xx:68:ca:24 brd ff:ff:ff:ff:ff:ff

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;实体网卡&lt;strong&gt;enps31f6&lt;/strong&gt;就是可以链接网络的网卡。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;新建一个网桥&lt;strong&gt;br0&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;brctl addbr br0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;新建一个叫做&lt;strong&gt;tap0&lt;/strong&gt;的tap接口&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tunctl &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tap0 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;user&amp;gt;
&lt;span class=&quot;c&quot;&gt;# 设置tap0 UP&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;up dev tap0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里的&lt;user&gt;填写允许访问这个tap0接口的用户&lt;/user&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;这时候的网络接口情况&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip addr show
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: enp0s31f6: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 9c:2d:cd:68:ca:24 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.14/24 brd 192.168.1.255 scope global dynamic enp0s31f6
       valid_lft 604042sec preferred_lft 604042sec
11: br0: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 56:a6:1d:0c:23:17 brd ff:ff:ff:ff:ff:ff
12: tap0: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 26:a8:e6:ba:b0:cd brd ff:ff:ff:ff:ff:ff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;把网卡和tap0接口都添加到网桥上&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;brctl show
bridge name	bridge &lt;span class=&quot;nb&quot;&gt;id		&lt;/span&gt;STP enabled	interfaces
br0		8000.56a61d0c2317	no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;网桥&lt;strong&gt;br0&lt;/strong&gt;被添加接口前&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;brctl addif br0 tap0 enp0s31f6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;brctl show
bridge name	bridge &lt;span class=&quot;nb&quot;&gt;id		&lt;/span&gt;STP enabled	interfaces
br0		8000.56a61d0c2317	no		 enp0s31f6
							         tap0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;网桥&lt;strong&gt;br0&lt;/strong&gt;被添加接口后&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;本来联网的网卡&lt;strong&gt;enp0s31f6&lt;/strong&gt;就不会在处理数据包了他的ip地址也会不见，现在的网络接口信息如下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: enp0s31f6: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel master br0 state UP group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 9c:2d:cd:68:ca:24 brd ff:ff:ff:ff:ff:ff
11: br0: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 qdisc noop state DOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 56:a6:1d:0c:23:17 brd ff:ff:ff:ff:ff:ff
12: tap0: &amp;lt;BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc noop master br0 state DOWN group default qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether 26:a8:e6:ba:b0:cd brd ff:ff:ff:ff:ff:ff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时候需要给网桥分配一个适合你网段的ip地址，或者使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo dhclient br0&lt;/code&gt;给&lt;strong&gt;br0&lt;/strong&gt;提供一个ip地址。
到这里宿主机的外围设备配置就结束了。
##qemu配置&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	qemu-system-i386 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-monitor&lt;/span&gt; stdio &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 1G &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-hda&lt;/span&gt; ubuntu-disk.img &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-rtc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;localtime,clock&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-netdev&lt;/span&gt; tap,id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;net0,ifname&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tap0,script&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no,downscript&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-device&lt;/span&gt; e1000,netdev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;net0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-audiodev&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;alsa,driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;alsa &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-machine&lt;/span&gt; pcspk-audiodev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;alsa &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;-cdrom&lt;/span&gt; ./ubuntu-14.04.6-server-i386.iso
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;关键的就是对网络设备的配置，
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-netdev tap,id=net0,ifname=tap0,script=no,downscript=no
 -device e1000,netdev=net0&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-netdev&lt;/code&gt;用于指定网络后端实现，这里是用&lt;strong&gt;tap&lt;/strong&gt;接口实现，&lt;strong&gt;ifname&lt;/strong&gt;这个选项对应的接口
就是刚刚宿主机新建的tap接口&lt;strong&gt;tap0&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-device&lt;/code&gt;则是配置网卡
和使用指定的netdev实现。&lt;/p&gt;

&lt;p&gt;#Troublesh0oting&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;网桥配置完全之后只有二层协议可以通过但是三层协议被丢包，怎么解决？ 
有可能是你的宿主机的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt;拦截了流量，查看iptable的规则，或者直接关闭
 网桥转发数据的包经过iptables处理。查看这两个文件是不是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;设成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;关闭。
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat /proc/sys/net/bridge/bridge-nf-call-iptables
    cat /proc/sys/net/bridge/bridge-nf-call-ip6tables&lt;/code&gt;
 你也可以编辑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/sysctl.conf&lt;/code&gt; 添加&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; net.bridge.bridge-nf-call-iptables &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo sysctl -p&lt;/code&gt;应用修改来永久修改这个配置项 
 或者&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
 &lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Setup qemu network bridging
  &lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network-online.target
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;oneshot
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;brctl addbr virtbr0
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;brctl addif virtbr0 enp3s0
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ip addr add 192.168.0.20/24 dev virtbr0
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;virtbr0 up
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iptables &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; physdev &lt;span class=&quot;nt&quot;&gt;--physdev-is-bridged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你可能需要给tap0和br0配置promisc启动混杂模式来监听流过他们的所有&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;promisc on dev tap0
   &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;promisc on dev br
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.qemu.org/Documentation/Networking&quot;&gt;1&lt;/a&gt; QEMU Networking&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://lifeislife.cn/posts/qemu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/&quot;&gt;2&lt;/a&gt; QEMU 虚拟机网络配置&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/extremecoders-re/e8fd8a67a515fee0c873dcafc81d811c&quot;&gt;3&lt;/a&gt; Setting up Qemu with a tap interface&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.spad.uk/posts/really-simple-network-bridging-with-qemu/&quot;&gt;4 &lt;/a&gt;这里提到了iptables转发流量的设置&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.junmajinlong.com/virtual/network/all_about_tun_tap/&quot;&gt;更多关于tap/tun&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;后&quot;&gt;后&lt;/h3&gt;
&lt;p&gt;虽然设置好虚拟机的网卡但一直没有几乎添加协议栈内容;*(，希望有几乎实现协议栈。&lt;/p&gt;

&lt;p&gt;Thu Feb 13 05:37:47 PM CST 2025&lt;/p&gt;
</description>
          <pubDate>2024-12-09T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/program/network/network_bridging_with_qemu</link>
          <guid isPermaLink="true">https://niclas3.github.io/program/network/network_bridging_with_qemu</guid>
        </item>
      
    
      
        <item>
          <title>新造的轮子</title>
          <description>&lt;h1 id=&quot;新造的轮子-neovim&quot;&gt;新造的轮子? neovim!&lt;/h1&gt;
&lt;p&gt;这是一系列谈论neovim的文章的第一章，我们在谈论它之前我想先梳理一下文本编辑器的历史。
从1960年代到现在，整个编辑器大概可以划分为四个时代。&lt;/p&gt;

&lt;h2 id=&quot;起源时代-1960s-1970s&quot;&gt;起源时代 (1960s-1970s)&lt;/h2&gt;
&lt;p&gt;文本编辑器的历史和计算机历史重合，当早期的计算机女工们不在依赖打孔卡输入和计
算机交互时，随之而来就是与终端交互的的文本编译器的元年—1965年，一种 行编辑器
ED 出现了。1960s-70s的计算机使用者大多数是学者或者军事人员和大型企业的财务计算人
员等。当时人和计算机的交互从打孔卡(punched paper tape)慢慢过渡到交互式终端(teletype，tty)
在没有CRT显示器的时期所有的交互都是打印在纸上的。当时计算机设备比如PDP-11的早期型
号只有几KB的内存，由于内存限制没法把所有文本都载入内存，所以当时的文本编辑器是
&lt;strong&gt;行编辑&lt;/strong&gt;(line-oriented) 或者是&lt;strong&gt;面向字符编辑&lt;/strong&gt;(character-oriented)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/f/f0/DEC_PDP-1_Demo_Lab_at_Mountain_View%27s_Computer_History_Museum.jpg&quot; alt=&quot;PDP-1&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;上图就是PDP-1的样子，桌面上类似打字机的设备就是teletype&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
这里我想到一个题外话60年代也是UNIX的出现的年代，
UNIX比较有特点的是它以字符串作为程序间交互的介质而不是数据结构
也许也受限于当时的内存大小。
&lt;/div&gt;

&lt;h3 id=&quot;teco&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TECO_(text_editor)&quot;&gt;TECO&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1962年，TECO(Text Editor &amp;amp; Corrector)是在PDP-1机器上&lt;strong&gt;面向字符(character-oriented)&lt;/strong&gt;
的&lt;em&gt;编辑器&lt;/em&gt;也是一种&lt;em&gt;编程语言&lt;/em&gt;。TECO提供了&lt;strong&gt;Macro&lt;/strong&gt;以提供对文本的搜索和修改，这个功能也被
Emacs吸收并发扬光大。同时TECO也提出了一种哲学&lt;a href=&quot;http://catb.org/jargon/html/Y/YAFIYGI.html&quot;&gt;YAFIYGI&lt;/a&gt;(You Asked For It, You Got It),
这个理念和编辑器之后&lt;a href=&quot;https://en.wikipedia.org/wiki/WYSIWYG&quot;&gt;WYSIWYG&lt;/a&gt;(What You See Is What You Get)有明显不同，
我也许会在之后有关UX的文章中讨论WYSIWYG。
YAFIYGI 反应了早期编辑器的设计哲学&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;用户输入的每一个命令都严格执行，不会提供保护和帮助&lt;/li&gt;
  &lt;li&gt;编辑器不会纠正用户的错误
这种设计哲学强调了用户对操作负责。强调功能的同时也兼具了效率。&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
一定程度上TECO这个哲学和,C语言相信程序员的C代码哲学相似，这种哲学是有意为之还是
条件所迫呢？
&lt;/div&gt;

&lt;h3 id=&quot;qed&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/QED_(text_editor)&quot;&gt;QED&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1965-1966年，在加州伯克利大学开发的Berkeley Timesharing System上由Butler Lampson 、
L. Peter Deutsch和Dana Angluin三人一起开发的&lt;strong&gt;行编辑器&lt;/strong&gt;QED（quick editor）即使QED
当时只是为了电传打字机开发并没有考虑CRT显示的场景也大幅提升了当时的人机交互体验。
QED也对后来的文本编辑器例如 &lt;em&gt;sed&lt;/em&gt; 、&lt;em&gt;ex&lt;/em&gt; 、&lt;em&gt;awk&lt;/em&gt; 、&lt;em&gt;perl&lt;/em&gt;有着影响。&lt;/p&gt;

&lt;h2 id=&quot;前现代编辑器时代-1970s-1980s&quot;&gt;前现代编辑器时代 (1970s-1980s)&lt;/h2&gt;
&lt;p&gt;随着70年代,PDP和IBM360的普及以及视频终端对电传打字机的替代，更多机构可以负担的起
交互式计算设备，分时系统和UNIX也给多个用户共享计算机资源提供了支持，也促进了交互
式工具的发展，慢慢的面向行编辑的编辑器就不能满足对完整文件操作的需求了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/a/af/DM_IBM_S360.jpg&quot; alt=&quot;IBM S360&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;上图就是大型机时代开山之作&lt;strong&gt;IBM System/360 Model 20&lt;/strong&gt;，IBM当时项目负责人Frederick P. Brooks,
Jr.根据此项目的开发经验写出了&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&quot;&gt;《人月神话：软件项目管理之道》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;vi和ex&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vi_(text_editor)&quot;&gt;Vi&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/Ex_(text_editor)&quot;&gt;Ex&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1976年UC Berkeley的学生&lt;strong&gt;Bill Joy&lt;/strong&gt;，在修改当时UNIX系统上的Pascal编译器发现ed编辑器实
在不好用。没多久他就和同学Chuck Haley写了第一个编辑器&lt;em&gt;en&lt;/em&gt;，后来他们扩展了这个编辑器
开发出了&lt;strong&gt;ex&lt;/strong&gt;。77年的10月份，Bill joy给ex添加了全屏模式(full-screen visual mode)这就
是我们熟悉的 &lt;strong&gt;vi&lt;/strong&gt; 由此可知ex和vi这两个编辑器是共享一部分代码的，vi就是一个拥有全屏显
示功能的 ex，而&lt;strong&gt;vi(VIsual mode)&lt;/strong&gt;的名字就是ex的一个全屏幕显示模式的前两个字母。1979
年因为大多是人只使用ex的Vi模式,Bill Joy就给ex的Vi模式创建一个快捷方式，这就是后世
知道的Vi的起源了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/7/77/Adm3aimage.jpg&quot; alt=&quot;ADM-3A&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;上图就是Bill 当时开发Vi的时候使用的设备 还是可以辨认出hjkl上是有方向键的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于Bill Joy使用&lt;a href=&quot;https://en.wikipedia.org/wiki/ADM-3A&quot;&gt;ADM-3A&lt;/a&gt;开发Vi，所以Vi的按键映射和ADM-3A的键盘一致
这个时期的Vi只有基本的移动命令(hjkl)操作命令和行范围操作&lt;/p&gt;

&lt;h3 id=&quot;sed&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sed&quot;&gt;sed&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作为一个最早支持正则表达式的文字处理软件,sed继承了ed和qed的交互模式&lt;/p&gt;
&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
我这里想写一些注脚，sed、awk和perl作为常用的字处理程序直到现在都被运维们长时间使用
&lt;/div&gt;

&lt;h2 id=&quot;黄金时代-1980s-1990s&quot;&gt;黄金时代 (1980s-1990s)&lt;/h2&gt;
&lt;p&gt;1980s-1990s这个时期是计算机技术的黄金时代，所有现在使用的基础技术都是在这个时代奠基
然后发展的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/a/a6/IBM_PC-IMG_7271_%28transparent%29.png&quot; alt=&quot;IBM Personal Computer&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;上图就是IBM PC搭载了Intel的畅销CPU intel8088 @ 4.77MHz 最高可扩展出640KB的内存
空间,也搭载了一个CGA用于显示图像，当时售价US$1,565&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;硬件上,81年IBM推出了标志着个人计算机时代的&lt;strong&gt;IBM PC&lt;/strong&gt;，著名的动画《&lt;a href=&quot;https://en.wikipedia.org/wiki/Steins;Gate&quot;&gt;命运石之门&lt;/a&gt;》
中的未来人寻找的就是这个台机器。intel的x86系列也不断的在提升CPU的性能，硬盘容量
也从MB增长到了GB。随着性能的升高硬件成本并没有随之升高而是降低。&lt;/p&gt;

&lt;p&gt;软件上，1983年由于&lt;strong&gt;Richard stallman&lt;/strong&gt; &lt;a href=&quot;https://www.gnu.org/&quot;&gt;GNU&lt;/a&gt;项目的发起，开源软件和自由软件运动被推动,
UNIX也在各个企业和科研单位占据主流平台地位。因为个人电脑的普及1981年专门针对个人
电脑的操作系统MS-Dos推出, 1991年linux内核也首次发布。&lt;/p&gt;

&lt;p&gt;由于硬件和软件上的井喷式的发展，人们对于文本编辑器在编程辅助需求进一步增加。针对当时
的需求，可扩展变成当时编辑器的主要需求。随之而来的就是两个编辑器或者两个宗教&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Editor_war&quot;&gt;Editor_war&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;gnu-emacs&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/GNU_Emacs&quot;&gt;GNU Emacs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Emacs 是1976年由&lt;strong&gt;David A.Moon&lt;/strong&gt; 和&lt;strong&gt;Guy L.Steele jr&lt;/strong&gt;编写的以文本宏为主的编辑器，文本宏
的灵感来源于上文在元初时代提到的TECO编辑器，Emacs也是(Editing MACros)的缩写。
Emacs支持一种Lisp的方言Emacs lisp用于其插件的编写。&lt;/p&gt;

&lt;h3 id=&quot;vim&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vim_(text_editor)&quot;&gt;Vim&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Vim是1991年由&lt;strong&gt;Bram Moolenaar&lt;/strong&gt;发布的一款高度可配置的文本编辑器。由于当时自由软件风潮
，Vim同时也是一个Charityware，从发布之初Bram Moolenaar就鼓励用户捐款给ICCF基金会
以资助乌干达儿童,而Vim也开创了charityware这个软件分发模式。&lt;/p&gt;

&lt;h4 id=&quot;vim爸爸我是怎么出生的&quot;&gt;Vim：爸爸我是怎么出生的？&lt;/h4&gt;
&lt;p&gt;Bram moolenaar是一个荷兰人，90年代的时候在一家印刷公司上班，当时他买了一台&lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga&quot;&gt;Amiga&lt;/a&gt; 
电脑以 {这里加一个amiga的图片}便学习UNIX,当时在Amiga上是没有好用的Vi，Bram
moolenaar 就在已经有的软件Stevie的基础上准备复刻Vi, 所以最开始Vim是Vi IMitation
的简称，直到1992年Vim 1.22版本之后Vim正式移植到UNIX后改名为我们熟知的Vi IMproved。
就这样Bram moolenaar参与了Vim从1991年发布第一版本到2023年的Vim8.0的开发维护工作直
到他因病去世。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/c/c3/Amiga500_system.jpg&quot; alt=&quot;amiga&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当时bram 使用的个人电脑&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div style=&quot;background-color:#d0e7f9; color:#4d4d4d; padding:10px; border-radius:5px;&quot;&gt;
就像Vim的名字一样(Vi IMproved)Vim是我们刚刚提到的bill joy开发的Vi的增强版。主要
增加了10个features &lt;br /&gt;

1. 多级撤销   2. 文本对象 &lt;br /&gt;
3. 多窗口     4. 多缓冲区 &lt;br /&gt;
5. 语法高亮   6. Visual mode &lt;br /&gt;
7. 持久性撤销 8. 插件系统 &lt;br /&gt;
9. 扩展了命令 10. 支持鼠标 &lt;br /&gt;

关于Vim的功能都会单独文章介绍
&lt;/div&gt;

&lt;h2 id=&quot;现代编辑器时代-2000s-至今&quot;&gt;现代编辑器时代 (2000s-至今)&lt;/h2&gt;
&lt;p&gt;千禧年后的时代由于GUI和Web的普及，基于现代图形界面的文本编辑器占据了主流地位。对于
文本编辑器的基本需求已经在90年代这10年完成了奠基。之后的软件都是选择某些feature特化
某些能力。你在这个时代看到的新编辑器一定有Vim或者Emacs的影子。
&lt;em&gt;sublime Text 2008&lt;/em&gt; , &lt;em&gt;atom 2015&lt;/em&gt;, &lt;em&gt;VS Code 2015&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;doc.cat-v.org/unix/unix-before-berkeley&quot;&gt;A History of UNIX before Berkeley: UNIX Evolution: 1975-1984&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://pikuma.com/blog/origins-of-vim-text-editor&quot;&gt;Understanding the Origins and the Evolution of Vi &amp;amp; Vim&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;后&quot;&gt;后&lt;/h2&gt;

&lt;p&gt;一部编辑器的历史就是计算机的历史也是开发者的历史，希望之后也可以继续这个系列&lt;/p&gt;

&lt;p&gt;Thu Feb 13 05:49:58 PM CST 2025&lt;/p&gt;

</description>
          <pubDate>2024-11-20T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/program/nvim/history_of_text_editor</link>
          <guid isPermaLink="true">https://niclas3.github.io/program/nvim/history_of_text_editor</guid>
        </item>
      
    
      
        <item>
          <title>nXt-pixel-dungeon-day2</title>
          <description>&lt;p&gt;Day 2 
  In day1 I saied that i couldn’t find a good C-based library like libgdx,
Fortunately, I found 2 different C-based libraries work on home brew switch
development. There are [raylib-nx] and [sdl2], by the way, because [ ChatGPT]
is on trending , I will using it while developing the project.
  Let’s test the 2 libraries. 
First, [raylib-nx]: &lt;a href=&quot;https://github.com/luizpestana/raylib-nx/wiki/Working-on-Switch&quot;&gt;here&lt;/a&gt;is a lead&lt;/p&gt;

</description>
          <pubDate>2023-02-11T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/game/homebrew/nXt-pixel-dungeon-day2</link>
          <guid isPermaLink="true">https://niclas3.github.io/game/homebrew/nXt-pixel-dungeon-day2</guid>
        </item>
      
    
      
        <item>
          <title>nXt-pixel-dungeon-day1</title>
          <description>&lt;p&gt;Day 1&lt;/p&gt;

&lt;p&gt;Recently, I’ve been unable to stop playing the RPG game “Shattered Pixel Dungeon” ([SPD]). It’s a rogue-like game where you play as a hero (with four different occupations) exploring the secrets of a dungeon. The game has a port for the &lt;a href=&quot;https://github.com/00-Evan/shattered-pixel-dungeon&quot;&gt;switch platform&lt;/a&gt;, but I want to create a new version specifically for the switch that includes more Joycon features.&lt;/p&gt;

&lt;p&gt;I don’t have any experience in game development, so this will be a challenge for me. But as the saying goes, a good beginning is half the battle, so I’ll start by listing some goals for version 0.1:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A single hero class: Warrior
No audio
One original boss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[SPD] is an open-source game and its code can be obtained from Github. It’s based on the source code of &lt;a href=&quot;https://github.com/00-Evan/pixel-dungeon-gradle&quot;&gt;Pixel Dungeon&lt;/a&gt; by &lt;a href=&quot;https://pixeldungeon.tumblr.com/&quot;&gt;Watabou&lt;/a&gt; and both games were written using the Java library &lt;a href=&quot;https://libgdx.com&quot;&gt;libgdx&lt;/a&gt;. However, I want to practice my C programming skills, so I plan to rewrite the game using C and release it on the &lt;a href=&quot;https://github.com/00-Evan/shattered-pixel-dungeon&quot;&gt;switch platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After a long search, I couldn’t find a good C-based library for the homebrew &lt;a href=&quot;https://github.com/00-Evan/shattered-pixel-dungeon&quot;&gt;switch platform&lt;/a&gt; that is similar to &lt;a href=&quot;https://libgdx.com&quot;&gt;libgdx&lt;/a&gt;. If you have any suggestions, please let me know. I have chosen to use a 2D vector drawing library on top of OpenGL, named &lt;a href=&quot;https://github.com/memononen/nanovg&quot;&gt;nanovg&lt;/a&gt;, for the UI and visualizations.&lt;/p&gt;

</description>
          <pubDate>2023-02-09T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/game/homebrew/nXt-pixel-dungeon-day1</link>
          <guid isPermaLink="true">https://niclas3.github.io/game/homebrew/nXt-pixel-dungeon-day1</guid>
        </item>
      
    
      
        <item>
          <title>风暴般的魔女</title>
          <description>&lt;p&gt;我很喜欢香子这种性格豪放如暴风雨般的妹子，敢爱敢恨。&lt;/p&gt;

&lt;p&gt;也许是她自我的心理补偿，
也许只是为了获得关注而产生的报复心理，
她爱上了自己爸爸的师弟一个有妻子的男人。&lt;/p&gt;

&lt;p&gt;她像工艺玻璃杯一样透明脆弱的心才是她本身吧，
零的到来加剧了自己父亲对于香子的忽视，也加剧了香子更加冲动的反抗为了获得父亲更多的关注，到最后选择离开家。
对于香子来说，零的到来如同开始了一场不会结束的梦魇，零的天赋和努力越来越盖过香子，爸爸的关心全都会被这个爸爸的入室弟子所抢走，无声的反抗成为香子唯一和父亲沟通的方式。香子对零的恶意到达顶点的时候应该就是那次零在饭桌上叫自己爸爸『爸爸』那次吧。那次香子终于确信了自己真的被这个外来的小孩抢走了爸爸，最让人气愤的其实是香子爸爸的态度，父亲根本没有理会家中孩子们的想法反而是转移话题称赞零。
时间来到零多次连败的节点，那一天香子特地来拜访零的出租屋，香子一下戳破的零不让她进屋去的谎言，几番寒暄之后，能够感受到姐姐对于零并不是像刚刚我们说的那样只有恨了，她会感叹自己和零一起生活了10年却不知道零喜欢河流；会抱着零新收到的羽绒被说的确没有零的味道。这些细节足以表明姐姐，一定在哪个我们不知道的时间节点对零有了新的感受。之后他们说到了后藤，那个姐姐说自己喜欢的男人。零又一次的询问香子『就这么喜欢后藤？』，香子面带戏谑的回答『喜欢啊，最喜欢了！』&lt;/p&gt;

&lt;p&gt;从这里我可以看到的是，姐姐说自己喜欢后藤的行为很像在对父亲和零报复的行为。因为零和父亲都是爱自己的，香子用这样的行为既获得了父亲的关注又一次次不让零有负罪感（零认为自己把香子变成这样），越来越出格慢慢的变成了香子的武器，这把武器攻击了她最想攻击的两个人，所以香子现在不会放弃对后藤的追求的。如果没有追求后藤这件事情，香子就会变成一个『手无寸铁』没有办法反抗命运的人，以香子暴风般的性格她不会变成这样的。&lt;/p&gt;

&lt;p&gt;这里香子提出了零对战的那个松永先生，一个年过半百的C1选手。如果零在这场打败他，那他就再也不是职业选手不能参加排名赛了，说完这些话之后香子就大步离去了。
零在最后说的话耐人寻味『离开而去的他的发丝，被阳光穿透的瞬间微微地闪闪发光，然后，那道光芒终究还是带来了倾盆大雨』。也许，香子的到来，让零的内心有那么一丝的温暖，可这样的温暖是暂时的，带来的是香子为了报复零带来的大雨。&lt;/p&gt;

&lt;p&gt;对战松永先生之后，香子以手表丢在零的公寓为理由又一次约零见面。香子种种细节上真的表现出一个姐姐的细心，香子能轻松的说出零今年只有一个和安井先生的对局（又一次戳破了零的谎言），并且指出如果他输棋那零又一次间接的摧毁了一个家庭。&lt;/p&gt;

&lt;p&gt;香子这两次拜访，意图不是让零输掉棋局，单纯是利用零心中对于自己的愧疚对于零的报复。这也体现了香子敢爱敢恨的性格&lt;/p&gt;

&lt;p&gt;最后零回忆起，香子离家出走的那次场景。香子一边胡乱的收拾着行李，一边说我爱那个男人要离家出走。零试图阻止她
『爸爸不会原谅你的。』
『我也不会原谅他的。』大颗大颗的泪珠从香子的脸上滚下来，
零说『那我离开，我不管去哪 都不会有人担心 但是姐姐不是，姐姐是有家人的，爸爸不可能不疼爱你』&lt;/p&gt;

&lt;p&gt;这一幕就能看出，姐姐有一瞬间像原谅零的样子。其实零并不是为了抢走爸爸而存在的，而且他真的离开这个家了。零这句话会变成姐姐原谅零的原因的。&lt;/p&gt;

&lt;p&gt;这一季姐姐的最后一次出场是在零陪岛田参加前夜祭之后。因为姐姐认为零告诉爸爸自己的男友的秘密，来兴师问罪。这次零没有像之前一样只有忍受，而是选择和姐姐争吵，不巧碰上了想要给零送新做的豆皮寿司的三姐妹。识趣的大姐领着大家回去了，可二妹坚持把寿司盒送到了零的手上，香子在询问之后又冷嘲热讽的说零又在别家装可怜了。&lt;/p&gt;

&lt;p&gt;以零的性格，姐姐当然理所应当的进了家门，大口大口的吃着三姐妹的寿司还时不时的评价起来。这里有个细节，姐姐再吃筑前煮的时候一次就吃出这是韩式做法，可见姐姐至少也是懂得食物的人。
夜深之后，香子又住在零家里，这次香子慢慢展现自己的弱势面给零了，她也不知道为什么喜欢那个比自己大20岁的人，也不知道如何和父亲说这些事情。
被桃子妹妹说是魔女的她何尝不想要一个爱自己的人呢？
苦苦追寻那个自己『爱』的人，到底是为了报复父亲和零还是因为爱呢？
香子的心中是空虚的，一切来得都太简单了，父亲因为对自己的愧疚对自己好，零因为对自己的愧疚在感情上给予香子最温柔的对待，只有在那个不爱自己的人那里才能的到经历挫折获得感情的感受。香子也许是这么想的把，正事因为什么事情来得都太简单了，让她变成这样虚无，这样无望，这样辛苦。&lt;/p&gt;

&lt;p&gt;这部剧中我最喜欢香子这个角色，无论是她的敢爱敢恨，她的无望虚无，都向我展现了一个立体又生动的形象，她有时让人气愤，有时让人怜爱，&lt;/p&gt;

&lt;p&gt;父母去世的零寄住在养父家，作为留下的契约，零走向了唯一可以活下去的路，下棋。于是渐渐地零凭借着将棋天赋和努力在棋力上压过了同以棋手为目标的姐姐香子，和弟弟步。
无论在哪个方面香子都展现出宛如暴风雨般激烈，棋风也好，性情也好，她的美貌也是。&lt;/p&gt;

&lt;p&gt;这篇文章想就此分析 香子这个 如风暴般的魔女&lt;/p&gt;

&lt;p&gt;1.第一次出现在第五集交代姐姐像暴风雨一样的性格（零的回忆）
2.第二次出现在第八集，零需要对战一个老爷子之前（现实）
3.第三次出现在第十集，零对战一个家庭破裂的棋手之前（现实）
4.第四次出现在第十五集，在零的记忆里，姐姐似乎是喜欢零的（零的回忆）
5.第五次出现在第十七集，姐姐认为零对爸爸说了 自己的秘密来找零吵架，并且被三姐妹看见（现实）&lt;/p&gt;

</description>
          <pubDate>2017-04-16T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/lasay/%E9%A3%8E%E6%9A%B4%E8%88%AC%E7%9A%84%E9%AD%94%E5%A5%B3</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/lasay/%E9%A3%8E%E6%9A%B4%E8%88%AC%E7%9A%84%E9%AD%94%E5%A5%B3</guid>
        </item>
      
    
      
        <item>
          <title>杂记 ------ 这是什么标题</title>
          <description>&lt;p&gt;其实也没有什么想要记录的，就是想点开这个App看看写写感受一下，让自己沉浸其中。
冬天的晚上总是这么难熬，南方的冬天和北方不同（其实我没有资格说这个话，我只在北方度过过夏天我根本不知道北方的冬天是什么样子的），我也只能不能免俗的跟着大家说一声不同，而且还能煞有其事的找到一个两个真像什么样子的理由，像什么寒风刺骨呀什么水汽的饱和程度呀什么，其实怎么样呢，就算如此抱怨自己不还是在这里度过了20个冬夏也没有觉得度日如年，也不知道现在的人怎么了，有人说是大家矫情了不愿意吃苦，有人说我们应该提高国民素质云云。也许懒惰爱占便宜是写在我们的基因里面的。从某种意义上来说这么多年的选择没有筛选掉这样的品质，说明这些品质最少是可以为个体谋得利益的，所以携带这样的基因的人，或者是个体才能存活下来。也许从这个角度人们常说的7宗罪或者什么恶可能是优点呢。
哈，果然存活和道德根本就不是一个位面的东西，每一个个体都想要利益最大化可是往往在这个环境下得问题都不具有贪婪选择性质也就是说个体的一个人或者说一部分人不能得到才能保证别的个体获得资源，所以才出现了阶级关系吧。
我都不知道我在讨论个什么东西了。今天就这样吧，我也没有什么想写的了，总之，晚安，好梦。&lt;/p&gt;

&lt;p&gt;Niclas @宿舍’ 2013.12.30 00:00&lt;/p&gt;

</description>
          <pubDate>2016-12-30T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/%E6%9D%82%E8%AE%B0</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/%E6%9D%82%E8%AE%B0</guid>
        </item>
      
    
      
        <item>
          <title>白 ---------- 全即一，一即全</title>
          <description>&lt;p&gt;白，一直是一种有意思的东西。它大部分时间是通过一种叫做『白色』的东西展现出来的。《夏目友人帐》有一集出现的日式新娘礼服叫做无白垢，貌似这种传统服饰的意思是为了不让女子长发中的凶灵因嫉妒化为恶鬼。可见，白色在很多是时候有着净化，控制的意义。&lt;/p&gt;

&lt;p&gt;今天，给大家带来的是我非常喜欢的设计师 原研哉先生的书 《白》。『本书不讲颜色的。其实，我是在尝试探究一种叫做『白』的实体，用来找到由人们自身文化设定的那些感觉之源。换句话说，我试图找到那通过白的概念营造的简介和唯美的日本美学的源头。』这里摘录自这本书的前言。
说起原研哉，不得不提的一定会有MUJI（当然长野冬奥会纪念册也很出名，如果你想了解更多，可能我下次会推荐另一本《设计中的设计》的时候具体介绍原研哉），性冷淡风格一度成为主流。而这篇《白》更多的视图解释，这些极简主义，黑白灰，侘寂，这些性冷淡表象下面的源头。而这个源头的名字 叫做 『白』 ，亦或叫做『空』。&lt;/p&gt;

&lt;p&gt;当一个词语 被赋予了 颜色的意义的时候，你就会发现天然的 『它』（我是说表示颜色的这个词本身）就变成一种特别的存在，他们往往能够唤起我们的记忆。当然颜色是有纯粹的物理意义的，在我们的世界里他们是用 色度，明度， 和色值来组成三维环来表示所有颜色的。我们知道，无论哪种『媒介』都会使其传播的信息丢失，这里显然丢失了颜色包含一些信息，就像原研哉说的那样，一直被打破的鸡蛋的蛋黄的金黄色，或是茶杯里茶水的颜色，都不只是颜色。他们是带着物质本身固有属性的，他们会跟着味觉，质感。一起被看到的。所以，对颜色的理解，是与颜色，不至于颜色。颜色不应该只被在视觉维度被感受，这样感受颜色，就始终无法体会他们带来的所有体验。&lt;/p&gt;

&lt;p&gt;这样，毫无疑问的，颜色是一种语言，你能够感受到不同颜色的细微差别，情感驱使你辨别出更多的信息，被封印在物理媒介中的信息，被你解析出来了。这时候我就想起来Alfred North whitehead在1943年说过一句话 『艺术就是将一种模式强加于经历，以及识别这种模式所带来的审美享受』。这里可以插一句，最近我在学英语，和老师交流的时候，老师表示一些简单的单词连接到一起了就不知道意思了，我说：『可能文化环境是罪魁祸首吧。就像外国人肯定不能从韦编三绝这四个字中知道我在说一个人很勤奋一样。』，回到书上，这里的颜色也是一样的，他们的意义也是经过时间的长河，慢慢积累沉淀最后变成这样的。所以每一个颜色给你带来的冲击都是你处在的社会环境，民族文化带来的。&lt;/p&gt;

&lt;p&gt;然而。白，就是一个很有趣的颜色。我记得我在学水彩的时候，老师跟我说过，你不可以用白色来表示白色，白色是需要『空』出来的，这个手法在水彩中叫做留白。在构图的时候你就需要知道哪里不能沾染上颜色，其实对于超级新手的我来说，留白实在困难，因为白色实在太容易被入侵，浸染，被混合，你需要小心保护，细心再细心才可以。有时候一幅画就是因为一个留白而成为败笔。当时我也问过老师为什么不可以用太白粉的白来画这些空，老师说，他们不够透气，刻意，不自然。
白，很有意思，你可以混合所有颜色的光来得到白光。你也可以去掉所有的颜色，来获得白色。『一即全，全即一』。留白体现了空间距离也体现了『存在』（现在看来，也许钛白粉挑出来的白就不能表示『不存在』了吧）&lt;/p&gt;

&lt;p&gt;原研哉说白是混沌的反面。当所有颜色都在因为熵增，相互混合的时候。 
白，他表现出拒绝，拒绝所有颜色。却又能够接受所有颜色。
当他接受的时候他就变成了他接受的颜色。在他接受之前他就是白。
所以，白色是混沌的开始，而不是混沌的反面呀。我们没有办法触碰到白，因为只要我们接触到他，他就接纳了，变成了我们。我们无法观测到它，他会因为我们的观测改变。&lt;/p&gt;

&lt;p&gt;原研哉在对于创造和思考上有独特的见解。空带着思前行，『思考』这种行为模式萌生于『询问』的潜意识中，而『询问』又是基于『我思』。这也许是思考前放空自己的意义，放空自己是为了能想到更多。&lt;/p&gt;

&lt;p&gt;在构思这期节目的文案的时候，我就试图放空自己，在雨里暴走了10 公里。无论怎样的创造都需要很多很多的原始积累，使用原始积累才能让空带着你创造和思考。&lt;/p&gt;

</description>
          <pubDate>2016-10-31T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/%E7%99%BD-%E5%85%A8%E5%8D%B3%E4%B8%80-%E4%B8%80%E5%8D%B3%E5%85%A8</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/%E7%99%BD-%E5%85%A8%E5%8D%B3%E4%B8%80-%E4%B8%80%E5%8D%B3%E5%85%A8</guid>
        </item>
      
    
      
        <item>
          <title>三亿巨奖从天而降，你的人生会何去何从</title>
          <description>&lt;blockquote&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;				《亿男》--『一男啊。那座塔啊...你不觉得从远处看才更美吗？』
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于金钱和幸福的答案，你想过吗？
金钱造就了对价关系 我们有意无意以此衡量价值
或许标价上的金额、折扣优惠斗大的数字、存折打印上的存款、帐单应付的总额，等于了生活；但，跌倒受伤后的拥抱、泪流满面后递上的温暖、轰隆雷雨后的大肆放晴，你怎么标价？
最究竟，金钱和幸福，并不是正比存在。
金钱或许创造了物质的幸福价值，但正如同本书提及，「一个人难以成就这种幸福，必须和别人在一起，才能感受到幸福的一刻」&lt;/p&gt;

&lt;p&gt;最近国庆假期，加上连续上班&lt;/p&gt;
&lt;h1 id=&quot;亿男我对金钱的思考&quot;&gt;亿男·我对金钱的思考&lt;/h1&gt;
&lt;p&gt;作为一个看眼缘的人，买这本书就只是因为他的配色很能抓住我。黄色的封面里，一个人面无表情的视图吞食着一张一张的货币，似乎这些在他看来就和普通的早餐没有什么区别。
我看书的时候很喜欢猜测作者会怎么写，尤其是在看小说的时候尤为严重，如果我猜测的剧情和作者写的得差不多，我可能会因为自己的小聪明窃喜，反之，就会感叹为何能从这样的角度如此看待问题。 &lt;a href=&quot;https://www.facebook.com/%E5%B7%9D%E6%9D%91%E5%85%83%E6%B0%97-567234320027537/&quot;&gt;川村元气&lt;/a&gt;给我一种和以前完全不一样的感受，诚然我猜对了下面的剧情发展，却又没有完全猜对（我猜对了开始却没有猜中结局）。&lt;/p&gt;

&lt;p&gt;这是一个贫苦社畜的变身暴发户的故事，因为贫穷饱受人生折磨，不仅如此他还承担下来弟弟的债务，于是他连给女儿买一个自行车都不行。
  钱，在一男的生命里慢慢的变成了唯一，因为缺钱的原因常常和妻子吵架导致自己和妻子女儿分居，为了能多赚钱他晚上还会去工厂做兼职，即使这样他依然不能摆脱贫穷。
  那一天，他从一位老妇人手里获得了一张可以兑换3亿圆的彩票。 从此命运就发生了改变，以前看似因为钱导致问题，现在看来似乎都可以解决（可是却都解决不了，但是现在的一男还没有发现）一男诚惶诚恐的搜索着那些一夜暴富的人的悲惨经历，他不希望自己也变成这样。于是，他找到了自己在大学的时候的挚友九十九，九十九是一个成功的互联网创业老板身价过亿，可是依然一副『穷人』的样子（这是我对九十九出场时候的描述）。一男在像九十九讲述自己的一系列遭遇之后，九十九让一男把钱全拿出来。他们潇洒挥霍了一晚上之后，第二天一男一个人醒来，发现九十九拿着他剩下的钱消失了。
  故事进行到这里，我想先岔开话题聊一聊别的。今天我在一个好久不用的包里最近才发现了去年平白无故丢失的压岁钱。但是，我转眼又把刚刚的红包弄丢了，把我平白无故多了300块钱弄不见了，我依然会不开心。这是为什么？既然这300块是平白无故多出来的，按道理来说少了对我来说应该没有影响可是为什么我会不开心？&lt;/p&gt;

&lt;p&gt;故事说到这里如果你和我有一样的看小说的习惯。那你一定在想这九十九真不像话人家这么信任你，你却如此对待一男。（如果你也是这么想的恭喜你进入了作者挖的第一个伏笔，ps：其实这本书的伏笔很多有机会再读一次再一一找出）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;『一男啊。那座塔啊…你不觉得从远处看才更美吗？』&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;九十九对一男这么说过，现在回头来看，可能那座塔指的是『有钱』这件事吧。九十九想让一男以旁观者的角度靠近那座塔，而不是拿着这3亿靠近它。&lt;/p&gt;

&lt;p&gt;后面的剧情是很典型的总分总的样子，一男分别拜访了九十九的伙伴们。见识到九十九的伙伴们对与突如其来的巨款的态度，和他们现在生活方式（我觉得这就是九十九安排的目的，让一男知道金钱在99眼里到底是什么）&lt;/p&gt;

&lt;p&gt;其中我印象最深的是两个女人的故事，一个是九十九的秘书十和子，一个是一男的妻子万佐子，在这两个女性角色中你能感受到女性的坚韧和脆弱，既能看到他们的铠甲又能看到他们的软肋。女生都是需要呵护的无论她看上去多厉害，多有钱，她仍然需要陪伴，需要爱。以前的十和子被金钱支配她只想要更多的钱和更好的男人，这样她的喜悲被这两者左右，如果不那么在乎这些，那是不是说明可以减少自己被『欲望』的制约呢？&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;『万恶的根源并不是钱，而是对钱的爱。』——-塞缪尔·斯迈尔斯&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;幸福和金钱往往在很多人嘴里都会画上三个等号，真的是这样吗？
有几个有钱人这么说过？
你身边都是什么样的人描述这样的画面？&lt;/p&gt;

&lt;p&gt;故事似乎没有给一个对于幸福的答案。
支撑你一直生活的动力其实是『欲』。这个字可以有很多种翻译。
一男最后也找到自己的『欲』，为了和妻子女儿一起生活的欲望。
当然还有另外两个人的故事也很精彩，一定要看，看完之后和我分享吧。&lt;/p&gt;

&lt;p&gt;这里体现了两个矛盾，一方面我们不希望被可怕的『欲望』所支配，另一方面也不希望被贫穷所困扰。所以，为什么同样是欲望，一男最后为了和妻子三人一起生活就是『积极』的欲望，而一男以前为了让家庭变得更好『自私』的扛起了家庭。忽视别人的感受，这才是失败的原因吧。
  不知道我的你是不是一个有对象或者有喜欢对象的人，有的时候，为了另一半喜欢的东西努力往往比给自己买一个想要的东西更开心，可能，这就是作者想要表达的『积极的欲望』吧。&lt;/p&gt;

&lt;p&gt;记得我最喜欢的Up主 sinBasara 说过，所有事情走上了极端都是『邪教』，无论是绝望，还是希望。&lt;/p&gt;

</description>
          <pubDate>2016-10-15T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/podcast/onlybook/%E4%B8%89%E4%BA%BF%E5%B7%A8%E5%A5%96%E4%BB%8E%E5%A4%A9%E8%80%8C%E9%99%8D-%E4%BD%A0%E7%9A%84%E4%BA%BA%E7%94%9F%E4%BC%9A%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E</link>
          <guid isPermaLink="true">https://niclas3.github.io/podcast/onlybook/%E4%B8%89%E4%BA%BF%E5%B7%A8%E5%A5%96%E4%BB%8E%E5%A4%A9%E8%80%8C%E9%99%8D-%E4%BD%A0%E7%9A%84%E4%BA%BA%E7%94%9F%E4%BC%9A%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E</guid>
        </item>
      
    
      
        <item>
          <title>设计模式杂杂谈</title>
          <description>&lt;blockquote&gt;
  &lt;p&gt;北冥有鱼，其名为鲲。
鲲之大，不知其几千里也。
化而为鸟，其名 为鹏。鹏之背，不知其几千里也。
怒而飞，其翼若垂天之云。是鸟也 ，海运则将徙于南冥。
南冥者，天池也。 – 庄子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不知道从什么时候起设计模式，慢慢变成一个装逼必备的理论开始被讨论了，也许50年了。今天我们聊一种模式
##Strategy Pattern
我们先不说这些有的没的模式该是什么表现形式，照例应该先吹比。首先说说Strategy pattern的strategy是什么意思&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;a plan of action or policy designed to achieve a major or overall aim.
（以上是Google translate友情提供翻译。）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说Strategy是为了一个长期的目标制定的一个动作。从这种解释可以看出来，这个模式其实是代码中的动作（函数，方法）的集合。我想大家看过三国吧，Strategy pattern就像诸葛老儿给的锦囊计，你要用的时候找我,我给你我的技巧。（这里要注意的是，1.这个给的只是方法而不是对象（我说的这个对象是，即封装了属性又封装了方法的对象）。他在代码的表现形式上更像一个属性，你通过setter和getter方法改变和获取这个可设置的Strategy。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;设计模式整体的概念在于抽象世界，所以他们常常把在&lt;strong&gt;不同情况&lt;/strong&gt;下改变的东西变得可以改变并且&lt;strong&gt;提出来&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;设计模式里面还有一个技巧，通过在类里实现一个空方法，调用组合对象的方法来提高并封装了组合对象的方法调用层级。让使用者认为自己在调用产生类的方法，而其实是产生类中组合实例的函数。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##🌰我来举个老师去上课的例子吧&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Foundation
/// 这是锦囊类
protocol TeachCategorical {
    func teach()
}

class MathClass: TeachCategorical {
    func teach() {
        print(&quot;教数学&quot;)
    }
}

class EnglishClass: TeachCategorical {
    func teach() {
        print(&quot;教语文&quot;)
    }
}
/// ------------我是分割线 -----------
class ClassRoom  {
    private var teachFunction: TeachCategorical! = MathClass()
    
    func setTeachFunction(teach: TeachCategorical) {
        self.teachFunction = teach
    }
    
    func publish() {
        self.teachFunction.teach()
    }
}

class MathClassRoom: ClassRoom {
    override init() {
        super.init()
    }
    
    func teachMath() {
        self.setTeachFunction(MathClass())
    }
}

class EnglishClassRoom: ClassRoom {
    override init() {
        super.init()
    }
    
    func teachEnglish() {
        self.setTeachFunction(EnglishClass())
    }
}


let mathroom : MathClassRoom = MathClassRoom()
mathroom.teachMath()
mathroom.publish()

let englishRoom :EnglishClassRoom = EnglishClassRoom()
englishRoom.teachEnglish()
englishRoom.publish()
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我把Strategy封装成接口（ps把需要抽象的方法做成接口，是个非常明智的选择，这恰恰也是接口存在的意义）然后写了两个不同的锦囊类。分别实现了teach方法用来教课。&lt;/p&gt;

&lt;p&gt;下面就是需要把不同的教室分配为不同的职能了。于是，应该发生的样子应该是数学教师用来教数学，英文教室教英文。&lt;/p&gt;

&lt;p&gt;把教室抽象出来并且给教室一个『锦囊』属性让教室在想设置这个教室职能的时候可以设置。（当然这种设置可以放在任何初始化内部对象的地方比如init方法，set方法之类的）。
教室还有一个职能就是让这个『锦囊』有用（也就是调用这个实例的方法）&lt;/p&gt;

&lt;p&gt;这里很好的看到了，我把整个程序分割成两个部分。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;锦囊&lt;/li&gt;
  &lt;li&gt;手持锦囊的一群东西&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这就是Strategy模式。
记住的是，你在编码的时候发现什么被经常改动。如果改动的是方法，记得使用接口封装他们。如果改动的是数据结构，我们下次再说用什么。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;##同胞兄弟 Factory Pattern&lt;/p&gt;
&lt;h3 id=&quot;defalut-factory-pattern&quot;&gt;defalut factory pattern&lt;/h3&gt;
&lt;p&gt;为什么要在一起说这两个pattern呢，因为我觉得从结构上来看他们很像，可以一起&lt;strong&gt;横向对比&lt;/strong&gt;。
照例我们还是先从名字入手，factory，没啥好介绍的。名词:工厂。也就是说，我们可以通过这个『工厂』来『制造』并且产出『产品』，这里的『产品』就是我们想要批量生产或者方便添加的类。
有上述可以得到，我们在这个模式中需要定义产品对象。自然而然的，我们需要定义接口来指导行为。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 简单工厂模式样例
/* ------- */
/// 这是产品类
protocol Operators {
    func perform()
}

class Addition: Operators {
    func perform() {
        print(&quot;做加法&quot;)
    }
}

class Minies: Operators {
    func perform() {
        print(&quot;做减法&quot;)
    }
}

class Divice: Operators {
    func perform() {
        print(&quot;做除法&quot;)
    }
}

class Mutiple: Operators {
    func perform() {
        print(&quot;做乘法&quot;)
    }
}

enum operatorsEnum {
    case Add, Minie, Divice, Mutiple
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;由此可见，这个产品的模板其实和策略模式的策略类的表现形式如出一辙。继续看工厂类的实现&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class OperatorsFactory {
    func createOperatorWithType(operat: operatorsEnum) -&amp;gt; Operators {
        var operators : Operators
        switch operat{
        case .Add :
            operators = Addition()
        case .Divice:
            operators = Divice()
        case .Minie:
            operators = Minies()
        case .Mutiple:
            operators = Mutiple()
        }
        return operators
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;作为简单工厂，只需要一个函数来产生不同的产品，通过接口来使用『里氏替换原则』接受所有的产品类型，返回产品实例。
最后看一下使用方法。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User {
    var factory: OperatorsFactory
    init(operaFactory: OperatorsFactory) {
        self.factory = operaFactory
    }
    
    func perfromWithType(opType: operatorsEnum) {
        let weapon: Operators = factory.createOperatorWithType(opType)
        weapon.perform()
    }
}

let users = User(operaFactory: OperatorsFactory())
users.perfromWithType(.Add)
users.perfromWithType(.Minie)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;首先使用者类中，存在一个组合的工厂类的实例（这样一点又和策略模式的角色类的实现相同），然后有一个方法（createOperatorWithType :opType）通过外部的产品类型返回实例，直接调用这个实例的方法（以转换为用户类的方法）&lt;/p&gt;
&lt;h3 id=&quot;factory-method-pattern&quot;&gt;Factory Method Pattern&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;变量就是类，类和变量的相互转化&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;老生常谈了，我们还是从名字开始入手，『工厂方法』这名字可能说明不了什么问题（比较像中国人起的名字）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫&lt;strong&gt;虚拟构造器&lt;/strong&gt;(Virtual Constructor)模式或者&lt;strong&gt;多态工厂&lt;/strong&gt;(Polymorphic Factory)模式，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Virtual Constructor Pattern和Polymorphic Factory Pattern这两个名字就很能说明问题了。
在计算机科学里面常常有人喜欢说Virtual这个词，『虚拟化』听上去就很牛逼，基本上看到这个词的时候就知道这个人是把什么东西抽象成一个抽象描述了，而在代码实现中接口就是这种抽象描述。再看看Polymorphic Factory就能知道这个『工厂』可能是很多的。（一般这种很多的东西，就是通过不同的类来分割职能，所以需要使用接口把他们统一起来）&lt;/p&gt;

&lt;p&gt;来我们使用Virtual constructor 重构上面的简单工厂看看。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class OperationDecorator: Operators {
    var operat: Operators! = nil
    init(opera: Operators) {
        self.operat = opera
    }
    func perform() -&amp;gt; String{
        return operat.perform()
    }
}

class DoubleDecorator: OperationDecorator {
    override func perform() -&amp;gt; String{
        return &quot;浮点数&quot; + self.operat.perform()
    }
}

class IntDecorator: OperationDecorator {
    override func perform() -&amp;gt; String {
        return &quot;整数&quot; + self.operat.perform()
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里写了两个产品，&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol OperationUser {
    func performfWithType(operationType: operatorsEnum)
    func createOperaWithType(operationType: operatorsEnum) -&amp;gt; Operators!
}

extension OperationUser {
    func performfWithType(operationType: operatorsEnum) {
        let opt: Operators! = createOperaWithType(operationType)
        print(opt.perform())
    }
}

class DoubleUser: OperationUser {
    func createOperaWithType(operationType: operatorsEnum) -&amp;gt; Operators! {
        var opt: Operators
        switch operationType {
        case .Add:
            opt = DoubleDecorator(opera: Addition())
        case .Divice:
            opt = DoubleDecorator(opera:  Divice())
        case .Minie:
            opt = DoubleDecorator(opera:  Minies())
        case .Mutiple:
            opt = DoubleDecorator(opera:  Mutiple())
        }
        return opt
    }
}

var user: OperationUser = DoubleUser()

user.performfWithType(.Add)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;###Abstract Factory Pattern
抽象工厂模式的主要作用就是把上述的工厂类的方法抽象成接口。我们直接看代码。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol WeaponType {
    func fire() -&amp;gt; String
}

class AK: WeaponType {
    func fire() -&amp;gt; String {
        return &quot;AK: Fire&quot;
    }
}

class AWP: WeaponType {
    func fire() -&amp;gt; String {
        return &quot;AWP: Fire&quot;
    }
}

class HK: WeaponType {
    func fire() -&amp;gt; String {
        return &quot;HK: Fire&quot;
    }
}

class WeaponDecorator: WeaponType {
    var weapon: WeaponType! = nil
    init(weapon: WeaponType) {
        self.weapon = weapon
    }
    
    func fire() -&amp;gt; String {
        return weapon.fire()
    }
}

class GermanyDecorator: WeaponDecorator {
    override func fire() -&amp;gt; String {
        return &quot;德国制造&quot; + self.weapon.fire()
    }
}


class AmericaDecorator: WeaponDecorator {
    override func fire() -&amp;gt; String {
        return &quot;美国制造&quot; + self.weapon.fire()
    }
}

/**
 *  抽象工厂接口
 */
protocol WeaponFactoryType {
    func createAK() -&amp;gt; WeaponType
    func createAWP() -&amp;gt; WeaponType
    func createHK() -&amp;gt; WeaponType
}

/// 抽象工厂的具体类实现

class AmericanWeaponFactory: WeaponFactoryType {
    func createAK() -&amp;gt; WeaponType {
        return AmericaDecorator(weapon: AK())
    }
    
    func createHK() -&amp;gt; WeaponType {
        return AmericaDecorator(weapon: HK())
    }
    
    func createAWP() -&amp;gt; WeaponType {
        return AmericaDecorator(weapon: AWP())
    }
}

class GermanyWeaponFactory: WeaponFactoryType {
    func createAWP() -&amp;gt; WeaponType {
        return GermanyDecorator(weapon: AWP())
    }
    
    func createHK() -&amp;gt; WeaponType {
        return GermanyDecorator(weapon: HK())
    }
    
    func createAK() -&amp;gt; WeaponType {
        return GermanyDecorator(weapon: AK())
    }
}

enum WeaponTypeEnumeration {
    case AK, AWP, HK
}

class WeaponUser {
    private var factory: WeaponFactoryType
    init(factory: WeaponFactoryType) {
        self.factory = factory
    }
    
    func setFactory(factory: WeaponFactoryType) {
        self.factory = factory
    }
    
    func fireWithType(weaponType: WeaponTypeEnumeration) {
        var weapon: WeaponType
        switch weaponType {
        case .AK:
            weapon = self.factory.createAK()
        case .AWP:
            weapon = self.factory.createAWP()
        case .HK:
            weapon = self.factory.createHK()
        }
        
        print(weapon.fire())
    }
}


var user: WeaponUser = WeaponUser(factory: AmericanWeaponFactory())

user.fireWithType(.AWP)
user.fireWithType(.HK)

user.setFactory(GermanyWeaponFactory())
print(&quot;\n&quot;)
user.fireWithType(.AWP)
user.fireWithType(.HK)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上述代码和工厂方法模式对于user的封装基本相同，都是组合一个工厂，只是这次的是一个抽象的接口，上次是类。&lt;/p&gt;
&lt;h3 id=&quot;工厂方法和抽象工厂模式的异同&quot;&gt;工厂方法和抽象工厂模式的异同&lt;/h3&gt;
&lt;p&gt;其实抽象工厂是通过接口来产生工厂的集合，而工厂方法会选取工厂来『生产』&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 *  对使用者抽象
 */
protocol WeaponUserType {
    func fireWithType(weaponType: WeaponTypeEnumeration)
    func createWeaponWithType(weaponType: WeaponTypeEnumeration) -&amp;gt; WeaponType!
    func createWeaponFactory() -&amp;gt; WeaponFactoryType
}

extension WeaponUserType {
    func fireWithType(weaponType: WeaponTypeEnumeration) {
        let weapon: WeaponType = createWeaponWithType(weaponType)
        print(weapon.fire())
    }
    
    func createWeaponWithType(weaponType: WeaponTypeEnumeration) -&amp;gt; WeaponType! {
        var weapon: WeaponType
        
        switch weaponType {
        case .AK:
            weapon = createWeaponFactory().createAK()
        case .AWP:
            weapon = createWeaponFactory().createAWP()
        case .HK:
            weapon = createWeaponFactory().createHK()
        }
        
        return weapon
    }
}

class AmericanWeaponUser: WeaponUserType {
    func createWeaponFactory() -&amp;gt; WeaponFactoryType {
        return AmericanWeaponFactory()
    }
}

class GermanyWeaponUser: WeaponUserType {
    func createWeaponFactory() -&amp;gt; WeaponFactoryType {
        return GermanyWeaponFactory()
    }
}

var usr: WeaponUserType = AmericanWeaponUser()
usr.fireWithType(.AK)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在这里工厂方法模式的具体实现就是User接口实现类的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func createWeaponFactory() -&amp;gt; WeaponFactoryType&lt;/code&gt;方法。通过不同类对于这个方法的实现，实现工厂的选取，选取工厂是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var usr: WeaponUserType = AmericanWeaponUser()&lt;/code&gt;产生的。&lt;/p&gt;

&lt;p&gt;参考链接
&lt;a href=&quot;http://so.gushiwen.org/guwen/bookv_3254.aspx&quot;&gt;逍遥游&lt;/a&gt;
&lt;a href=&quot;http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html&quot;&gt;策略模式&lt;/a&gt;
&lt;a href=&quot;http://www.cnblogs.com/ludashi/p/5302269.html&quot;&gt;参考博客Swift实现&lt;/a&gt;&lt;/p&gt;

</description>
          <pubDate>2016-05-26T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9D%82%E6%9D%82%E8%B0%88</link>
          <guid isPermaLink="true">https://niclas3.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9D%82%E6%9D%82%E8%B0%88</guid>
        </item>
      
    
      
        <item>
          <title>Rework · 重来</title>
          <description>&lt;h4 id=&quot;更为简单有效的商业思维&quot;&gt;更为简单有效的商业思维&lt;/h4&gt;
&lt;p&gt;     决定买这个本书也是因为大约4年前在酷壳上看到耗子叔写过一篇读书笔记，那时候刚高中毕业根本不懂这本再说些什么。如今4年过去了大概不一起要更有感受了吧。
     这本书的的作者是大名鼎鼎的&lt;a href=&quot;https://twitter.com/jasonfried?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;Jason Fried&lt;/a&gt; 和&lt;a href=&quot;https://twitter.com/dhh?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;David Heinemeier Hansson&lt;/a&gt;大卫和贾森以前创立了&lt;a href=&quot;https://37signals.com/&quot;&gt;37signals&lt;/a&gt;。这本书的行文很像伊索寓言，用各自独立成片的场景和你可能出现的问题为线索从头到尾教你如何重来。
     作为一个一直在谋划自己的app的新鲜人，进阶片中用很多东西值得我去学习的。就比如&lt;/p&gt;

&lt;h4 id=&quot;与其做个半成品不如做好半个产品&quot;&gt;与其做个半成品，不如做好半个产品&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;与其做个半成品，不如做好半个产品。
拿起斧头动手砍吧。为了下一个伟大的起点，让我们把那些还不错的枝节给砍掉吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为一个自己产品的产品经理我更希望的是我的产品能够有更多更喜欢的feature来满足我和用户的需求，于是功能越来越多导致根本不能做完一个完成度很高的产品，看了这篇之后我也尝试着把不重要的功能退后，慢慢先做出一个baby app出来让后让她成长。&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;关注不变量&quot;&gt;关注不变量&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Focus on what wont change
你的事业核心应该建立在不变的基础之上。应该投资那些人们现在需要10年后也需要的东西上面
要记住，时尚会凋零（至少是有周期的）只有当你聚焦于长久功能的时候，你才会发现自己把握住永不凋落的东西。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;  我还记得我们大学的食堂里面有一个大横幅，上面写着这世间万物唯一不变的就是变化。我自己对于这段的解读可能要结合我在计算机领域学习的知识树选择，我很谨慎的选着过去20年到现在还仍然没有消亡的技术学习，辅以新鲜的热门领域。这样构建自己的知识树之后就会发现，很多热门的东西再循环的出现，比如过去使用在游戏领域的图像刷新技术现在用在了web2.0的页面上。比如很久之前的Functional Programming 现在因为并行运算又活了（并行的效率的事情我们可以下次再说，这次不展开书）。Devid站在一个公司的基础上教导我们公司需要把不变的东西把握住之后再慢慢吸收那些演变后的新技术。&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;音乐就在你的指尖流淌&quot;&gt;音乐就在你的指尖流淌&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;练习，练习…..&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;… ……人们把装备当做取胜的法宝，却不愿意花时间去练习，于是一直泡在专业器材店里。他们想要寻找捷径，然而，最好的工具不是用在普通领域的，而且你在起步阶段肯定用不到它。
…….. … 就用你现在手头有的或者能负担的起的，然后开始做吧。工具不重要，就用下奶工具也可以一样棒，音乐就在你的指尖流淌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;    这段真是醍醐灌顶，无论我在学什么东西的时候，好像我越在乎我用的是什么的时候越干的不好，无论是画画，代码，摄影或者是别的。也许好的设备好的机器可以提高你的出品，但是不能增长你的技能，技能是通过练习和熟练沉淀出来的，好的设备只能虚高你的结果。你根本不是你看到的样子。&lt;/p&gt;
&lt;h4 id=&quot;不要过早关注细节&quot;&gt;不要过早关注细节&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;…. 。..当开始设计规划的时候，我们会用大号粗体的白板笔，而不是圆珠笔，把大致想法描绘出来。为什么呢？圆珠笔太完美了，分辨率太高了，会让你不自觉的关注那些还不需要关注的东西。结果让你把注意力放在了次要的东西上面。
你在起步阶段只需要操心纵观全局。
&lt;a href=&quot;https://en.wikipedia.org/wiki/Walt_Stanchfield&quot;&gt;Walt Stanchfield &lt;/a&gt;作为迪斯尼工作室的著名画师，曾经鼓励他的手下的漫画师要在一开始『忘掉细节』。理由是：在初期，关注细节不会给你带来任何好处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;   这一段真的是深有感触，我相信自己做过项目的人肯定了解这样的感受，在项目开始之初，有很多想法想要实现，一个简简单单的登录功能也想做的尽善尽美。到最后除了登录注册之外没有一个功能能够拿出来的。
   我在这里举出的🌰都是关注基础，关注技能，关注框架。只要方向没有错，我们就能够在这样的骨架上加上肌肉，皮肤。这样才是一个简单的途径。
   &lt;/p&gt;
&lt;h4 id=&quot;最后灵感是稍纵即逝&quot;&gt;最后——–灵感是稍纵即逝&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果你的灵感是在周五驾临的，那就放弃周末，直奔主题。当你为了这个灵感亢奋的时候，就能在24小时之内做完两个星期的工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;   简单的说，如果你想做一件事，就去做吧。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;   这本书还说了一些公司管理层面的东西，可能不久的将来我会用到吧，现在就不一一整理了。
以后可能会出一个续篇来说说这篇文章没有说的部分。&lt;/p&gt;

</description>
          <pubDate>2016-01-30T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/podcast/onlybook/Rework-%E9%87%8D%E6%9D%A5</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/podcast/onlybook/Rework-%E9%87%8D%E6%9D%A5</guid>
        </item>
      
    
      
        <item>
          <title>行者</title>
          <description>&lt;p&gt;今天我听了一个曾经环中国一周骑行的大叔的吹水会。
大叔姓许叫许金良。我一般很难认识第一次就能记住别人的名字，今天绝对是第一次。
先说说大叔吧，超过180的大高个，典型的北方人的国字脸，眼神和蔼但是充满经历。大叔给的PPT的题目叫“你我，皆行者”，下面小小的写了一行字 “行走在时光之上，寻找生命中最美丽的一天！”。
开头，大叔问了一个问题，“你认为旅行的意义是什么。”
我在当时没有举手说，现在在这里我补一下吧（这是不是就是我怎么也迈不出行者第一步的原因呢）
我觉得旅行对我来说，应该是跟贴近生活的，我的旅行应该是看看别的地方的人是怎么样过日子的，而不是像现在这里的一些人一样，为了自己觉得能征服什么而去旅行，旅行也许就像刚刚开始的那段话里面说的一样，其实它一直都在，即使你每天3点一线一沉不变也是在旅行，你在你的人生路上漫漫之旅呢。所以旅行对我的意义还是为了开拓视野。
（笑）也不知道这样的话，在当时说是怎么样的一种样子呢。
当时，大叔提出这个问题的时候，上来一个胖子。他自称是我们学校骑行社的一员。眉飞色舞的聊着自己如何走滇藏线，和穿越塔克拉玛干的事迹。用姜老师的话就是面部表情非常丰富，我至少看到了4种心情，骄傲，挑衅，得意，大叔和蔼的在旁边看着。记得当讲到大叔自己穿越塔克拉玛干的时候他只是提了一下这里是刚那个胖子说的地方，就没有说什么了。（其实那时候我就想，有些人走了这么长的路，最后回来了，也就只是走路而已，可是有些人走的是一条灵魂升华的路）
	我记得大叔说过一句很好的话，他说，为什么走着么长的路你不是坐飞机， 坐火车，或者坐车，而是选择骑摩托，骑自行车呢。大叔说，骑车去旅行其实是一个让你慢慢剥离自己的漫长的过程，你会在这个漫漫旅途中慢慢的剥离你自己，把你想要的分离出来。我现在想想也许，这就是过去苦行的人们所获得的吧。也许，这样的长途之旅就是现在的苦行呢。
	今天下午短短1.5h的活动，我曾有两次落泪。第一次，是大叔说，他们在新疆还是西藏的时候有一座山上的公路上有个坟头它是一个北大的女生的，她因为高原反应死在了这里，于是她就被葬在这荒漠和蓝天之间了。听说附近的人们都说她变成了这里的山神保佑着路过这里的每一个行者。
	我听到这里，其实我以前也又听说过有的行者因为一些事情在路上就去世了，我不太能表述我的想法，我就想说，你们真棒。
	第二次落泪是在看到大叔说有一个在山脚下生活的大妈对她像亲生儿子一样的时候。他说大妈是基督徒，大妈很好，我知道他即使没有说什么我已经能从他的表情和流露出来的情感里面听出来，真的大妈真好，能对一个陌生的人。
好，小小的记一下今天我参加这个活动而已。
最后附上大叔说的话
我们都是践行者！
无意说服别人，也无意改变世界，只是偏执的走在路上，希望在细微处影响别人。
大叔来我敬你一杯。
niclas
2014.3.19&lt;/p&gt;

</description>
          <pubDate>2014-05-19T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/%E8%A1%8C%E8%80%85</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/%E8%A1%8C%E8%80%85</guid>
        </item>
      
    
      
        <item>
          <title>La bibliotheaque</title>
          <description>&lt;p&gt;很久很久了，我没有一个安静缓慢的下午了，最近的时间都在图书馆里面度过了，每当这个时候（午饭过后）图书馆里面的人最少，自习的座位上面淅淅沥沥零零散散的坐着一些人，有点扶着额似乎在考虑这什么，有的人趁着这个安静的时候小憩一会儿听听歌，当然也有人像我一样，东张西望的看着周围的人在干什么。
总之，图书馆以前在我心目中的样子一直是一群爱学习的人争分夺秒的战场，是他们与学习拔河的沙场。因为从小你就被灌输说，要多去图书馆看书知道吗？这一类的话，其实，看书在我从小的记忆里就是和痛苦100%挂钩的。也就说图书馆就是我的痛苦之源，
我问过一些喜欢去图书馆的朋友们，问他们去图书馆都干些什么。
回答都千奇百怪，有些可能你都无法接受。
有陪女朋友的，有看电影的，有为了来上网的（图书馆有公共电子阅览室），还有的只是为了准备某场考试，考试结束了就不会再来这个伤心地了。
其实大部分人都是这么想的，我不考试来图书馆干嘛，这里完全不是属于我的style呀，全是一些书呆子，上了4年学什么都没学会到头来还要准备考研来蒙混过关。
在我看来，整个学校里面能够慢慢生活的地方就是图书馆了，悠闲的下午，找一个靠窗的位子坐上一下午。晒晒太阳，吹吹暖暖的风，听着电脑里面的歌。
思绪飘零，其实根本不需要蔬食我也能遨游。
一杯水，一台电脑。累了就靠着，你不会因为栏杆上有一层浮灰就会讨厌它的，反而在多年之后你会因为这层没有擦去得浮灰想起什么。
也许是想起了那个悠闲的下午，也许是想起了你左手边那个想考公务员的同学的大水壶。呵，就算你都忘了也没有关系。
珍惜，
珍惜你能再图书馆的时光吧。即使无趣，也能落得清闲。
niclas
2014-3-17&lt;/p&gt;

</description>
          <pubDate>2014-05-17T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/Labibliotheque</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/Labibliotheque</guid>
        </item>
      
    
      
        <item>
          <title>同好</title>
          <description>&lt;p&gt;什么是同好呢，就是一群有相同爱好的人。
人是一个很奇怪的生物，这种生物呢，他是一个社会性非常强的生物，可是他们之中总是想有一些人希望自己是独一无二的，于是，他们开始在爱好上让自己与别人区别开来。可是他们又不能逃脱出自己是社会动物的本质于是又希望找到一些和自己有相同爱好的人组成一个一个小团体以满足自己的对社会和独立个性的需呀。
爱好这种东西真的很大很多。比如我吧，我只有在自己不开心或者状态不好的时候才会写东西，平时我可是都是以程序员自居的（笑）。
有些爱好因为太冷僻所以被别人叫做癖好。
作为中国人当然看到病字头的东西就有一种从内而外的厌恶感，癖好，很不幸的被归为了这一类。所谓癖好其实也是爱好的一种，我到是觉得，爱好也不应该分什么贵贱为什么有些爱好就要被歧视被说成是癖好？有些爱好你就可以说这是事业呢。
其实，总归都是大多数人控制着这种言论走向，所以，才会有人为了我上一段说的社会性抛弃了自己的爱好，去迎合别人的爱好。可是爱好别人的爱好，还是自己的爱好吗？
显然。肯定不是了，爱好这种东西如果也需要和别人一样的话那你活的也太被动了。
诚然，有些人会苦着脸说，我这是为了生活，为了活下去我必须这样。这样大义凛然的说的时候也许背影里你还能看到他发出的光。为了生活你就可以抛弃你爱的东西？呵。
找理由这种把戏我从孩提时代打破家里的花瓶的时候就会了。&lt;/p&gt;

</description>
          <pubDate>2014-04-16T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/%E5%90%8C%E5%A5%BD</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/%E5%90%8C%E5%A5%BD</guid>
        </item>
      
    
      
        <item>
          <title>源，缘，圆  从圆聊到爱看杂记</title>
          <description>&lt;p&gt;也许，我自己想的题目是这个缘，可是打出来的竟是这个源。现在想想，也许缘和源没有什么区别。
小时候，再解释一个字的意思的时候老师都是叫我们组词，通过词组来理解单字的意思。
缘，姻缘，缘分。源有，源头；溯源。
我为什么说这两个字有相同的意思呢。万物皆由源生，由缘起，随缘灭。
也许你看见了我还写了一个字，圆。在数学里。圆被看做是完美的存在，在物理中圆是所有理想模型的基础，在佛家，世间因果都是圆。
圆代表了轮回，很久之前，西方的炼金术中就运用了衔尾蛇的图案来表示循环，想必大家也看过这样的图，大地在一个乌龟的背上，整个图被衔尾蛇所包围。
说着说着，我都忘记了，自己开这个OmmWriter是为什么了。
我不知道为什么你明明可以把我拉黑不理我让我死心，却不这么做，而是跟我说你还是可以骚扰我，这样的话呢。
你是因为你的博爱？
还是什么。
如果这篇文章又被我传到网上，被发小看见肯定又要被讥笑说自己矫情。
对了，我原来是想说把题目换成矫情来着的，后来还是矫情的把矫情换掉了，以掩盖我的矫情。
呵呵。
我快不知道这个呵呵的意思了，太多心怀恶意的人使用过的词之后，整个词都会变得恶意满满，也就是说其实恶意是可以被保存，并且被传播的，传播的速度根据网速来定。
我记得我跟谁说起过，我喜欢看杂记，原因自己也不知道。
现在回想看看，我大概知道是为什么了。因为，杂记一般都是说作者本身的事情的，没有什么很多的伏笔描述，有的可能是一点点感悟，一点点人生阅历的记述。就像村上桑说的一样，小说家都是骗子，他们说谎，用自己在脑子里面架构的世界观来描述事物。当然，我有的时候也喜欢看，可是比起小说，我更喜欢看杂记，我可以先看看标题，看看哪个标题更吸引我，我就先看哪一个，然而小说就不能给我这种乐趣（呵呵，也许不是所有人都觉得这叫乐趣）。
niclas
2014-03-20&lt;/p&gt;

</description>
          <pubDate>2014-03-20T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/%E4%BB%8E%E5%9C%86%E8%81%8A%E5%88%B0%E7%88%B1%E7%9C%8B%E6%9D%82%E8%AE%B0</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/%E4%BB%8E%E5%9C%86%E8%81%8A%E5%88%B0%E7%88%B1%E7%9C%8B%E6%9D%82%E8%AE%B0</guid>
        </item>
      
    
      
        <item>
          <title>shine</title>
          <description>&lt;p&gt;今天我早早的来到图书馆，霸占了一个在下午能晒到太阳的位置，好吧，我能够晒到的就只是下午3~4点钟的太阳。
一般这个时候的太阳已经不是这么毒辣了，再加上现在才是苏中地区的初春，其实如果没有穿外套的话会有点冷。
好几天了，我好像已经好久没有开始我的正式工作的意思，一直在默默的改变这自己的生活方式，我企图拖慢自己的节奏，我不想就这样莫名的被一些莫名的考试考证占据着我宝贵而得之不易的时光，
不知不觉，我打成自己的目的已经1年了。
一个学期已经默默的过去了。我的大学生涯可能跟大多数人都不一样，从大三我又重获新生得到了不能说是自己想要的生活。只能说自己圆了自己在别人面前吹过的牛，
我现在也能淡定沉稳的对别人说，当年我怎么怎么样了。
以获得一些无谓的自豪感(这不算是病态吧，笑)
我每次写文章起名字都是很随便的，想到什么就写什么。聊天工具里面有一个朋友名字叫yourSunshine突然想到，其实这里的shine也许是杀人的激光也说不定呢。
今天完成了，这学期选修课的任务没有多难，反倒说还很简单，可能是我在不悦的状态下所以工作效率变高的原因吧，
明天开始自己的事情吧，我记得有人说过，人啊，其实就是一直做自己的主角，一直做别人的配角的存在。
无论你是谁在别人那里只是整篇故事里面的一章，也许你运气不好，最多也就是一个插画哈。
不必太认真，认真就输了。
可我又没跟谁比呀。
niclas 
2014-03-18&lt;/p&gt;

</description>
          <pubDate>2014-03-18T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/shine</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/shine</guid>
        </item>
      
    
      
        <item>
          <title>忘</title>
          <description>&lt;p&gt;这几天过的还不错，充实。
有人说过，你可以像猪一样懒，但是你没办法像猪一样懒得心安理得。
可能因为自己把自己压的太充实了，所以有些事情转脸就忘了，也许是因为自己还在逃避，不肯面对所以才会发生这样的反应，因为靠近了就像跑，想躲，想离开，所以靠近了就只能跑只能躲，只能离开。
所以忘记了自己之前说的话，我最近一直在给自己找理由，找到的都是一些无关痛痒，语无伦次的荒诞的理由，老是把自己放在弱者的地方想问题，却又要表现出自己谁也欺负不了的架势。
我都快忘了，我是谁了。
和别人一样，工作已经成了我的麻醉剂，就像关节疼痛只能打封闭治疗一样，你只能希望它的持续时间变得很长，很长。可是，和一般的止痛剂治疗一样，工作也是有自己的持续时间的。
而我，就有点像病入膏肓的瘾君子。在它失效前就想着怎样才能获得下一次治疗以满足我对孤独的渴望，
其实，与其说我是对孤独渴望，不如说其实我更渴望你。我不想任何人因为同情而对我有任何恻隐之心。
这样对我来说，已经无法用是否尊重来定义了。
所以，我宁可没有也不想这样。
也许，这个题目应该叫宁缺毋滥，呵呵。
其实我不太能看的起那些说自己是宁缺毋滥的人，这些拿着自认为高尚的理由，在单身汉中获得优越感，其实还不是找不到吗。
大家都一样，什么宁缺毋滥。呸
呵。
好像越来越偏离主题了啊，最近我看上去被工作压的都不能喘息了，其实都是我自己自找的，我想尽办法找东西做，不管有用没有用，根据经验这样我会变得不那么伤心。
其实，我还是第一次有妹子三番五次问我喜不喜欢她。对呀，我就是喜欢了，但是我不觉得我能给你幸福。所以我选择对她矢口否认。
我怎么会喜欢你，你看看你长成这样，又笨，又呆。
	我很高兴你没有看出来我这句话说得是假话，因为你就是这么单纯，善良。虽然经历过很多但是依然这么阳光，其实我说的都是你的优点呀。好了，我知道你肯定会认真对待这份感情的。
mine sunsine.bless you.
niclas  2014-3-16&lt;/p&gt;

</description>
          <pubDate>2014-03-16T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/%E5%BF%98</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/%E5%BF%98</guid>
        </item>
      
    
      
        <item>
          <title>在OSX10.9（小牛）自己编译支持Python的vim7.4源码之路</title>
          <description>&lt;h2 id=&quot;事情的起因&quot;&gt;事情的起因&lt;/h2&gt;

&lt;p&gt;要说事情的起因的话其实是我在10.8升级到10.9之后VIM总是有些不听使唤，不过那时候没有怎么写代码于是就凑活着用了。只到昨天晚上snipMate突然不能用了于是我卸载之后再装回来结果VIM彻底不停使唤了，于是我就想说里外里把VIM重新装一遍正好体验一下新特性.&lt;/p&gt;

&lt;h2 id=&quot;每次编译vim都是坎坷的&quot;&gt;每次编译VIM都是坎坷的&lt;/h2&gt;
&lt;p&gt;编译VIM肯定需要源代码，所以编译前需要的准备工作就是要在官网上或者google code（如果你能下的下来的话）上下载一份最新的代码:&lt;br /&gt;
&lt;code&gt;hg clone https://vim.googlecode.com/hg/ vim&lt;/code&gt;
然后使用./configure增加自己想要的配置具体我不多说了。&lt;a href=&quot;http://benfrain.com/compiling-custom-vim-source-os-x-10-9-mavericks/&quot;&gt;点我了解跟多&lt;/a&gt;&lt;br /&gt;
前面的步骤我都轻车熟路,在make的时候出现了如下的编译错误&lt;br /&gt;
&lt;code&gt;
os_unix.c:830:13: error: conflicting types for &apos;sigaltstack&apos;
        extern int sigaltstack __ARGS((const struct sigaltstack *ss, str...
                   ^
/usr/include/signal.h:85:5: note: previous declaration is here
int     sigaltstack(const stack_t * __restrict, stack_t * __restrict)  _...
        ^
&lt;/code&gt;
仔细看一下好像是什么数据结构冲突的样子，知觉上不像是我的编译环境的问题，于是我在某度上搜了一下发现在OSX上编译VIM的少之又少实在找不到有什么又用的资料于是跑到谷歌的怀抱在
&lt;strong&gt;vim develop list&lt;/strong&gt;&lt;a href=&quot;http://permalink.gmane.org/gmane.editors.vim.devel/43168&quot;&gt;上面&lt;/a&gt;找到,相关问题的解决patch 有此问题的同学可以自己打一下补丁就可以了。
不会用&lt;a href=&quot;https://www.drupal.org/node/60108&quot;&gt;patch&lt;/a&gt;的同学点击链接这里有教学。&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;每次只要和vim相关的配置操作就要花费很多时间去解决，这里记录一下希望有后来人不要走弯路，基本上有问题找vim GitHub上面的issue 也可找vim develop list 也可以，别用没有用的Baidu了真的。&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。
&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;
下午3:59 2014年10月10日
&lt;br /&gt;niclas&lt;/p&gt;

</description>
          <pubDate>2014-02-23T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/%E5%9C%A8OSX10.9%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91vim7.4%E6%BA%90%E7%A0%81</link>
          <guid isPermaLink="true">https://niclas3.github.io/%E5%9C%A8OSX10.9%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91vim7.4%E6%BA%90%E7%A0%81</guid>
        </item>
      
    
      
        <item>
          <title>总结OSX上面配置VIM + slimv的common Lisp环境</title>
          <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;作者本人是一个vim使用者，一直想学函数式的语言于是就挑了Common Lisp，可是问题是CL对vim支持不想Emacs这么好，不过爱折腾的我肯定不会罢休的。&lt;/p&gt;

&lt;p&gt;如果你急着配置你的环境请移步&lt;strong&gt;总结&lt;/strong&gt;&lt;br /&gt;
准备工作
——
1.Python环境（作者使用的是Python 2.7.x的版本）&lt;/p&gt;

&lt;p&gt;2.重新编译的Vim需要支持Python&lt;/p&gt;

&lt;p&gt;3.下载slimv的插件&lt;/p&gt;

&lt;h2 id=&quot;折腾过程&quot;&gt;折腾过程&lt;/h2&gt;

&lt;p&gt;作者在这些准备齐全过后按照&lt;a href=&quot;(http://www.vim.org/scripts/script.php?script_id=2531)&quot;&gt;官网&lt;/a&gt;上面的介绍解压到.vim文件夹之后使用“,c”这个快捷键呼出STREAM结果没有任何反应。然后我就在作者制作的&lt;a href=&quot;(http://kovisoft.bitbucket.org/tutorial.html)&quot;&gt;Slimv Tutorial&lt;/a&gt;第一篇里面看到原来需要一个common Lisp的编译器于是连忙用Home brew下了sbcl&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install sbcl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装完sbcl之后很明显还是不能用(╯‵□′)╯︵┻━┻于是我就在怀疑是不是我的VIM的配置的问题果然我又在&lt;a href=&quot;(http://kovisoft.bitbucket.org/tutorial.html)&quot;&gt;Tutorial&lt;/a&gt;里面找到了可能需要在.vimrc文件里面添加一段代码&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On Linux this can be something like:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;let g:slimv_swank_cmd =’! xterm -e sbcl –load /usr/share/common-lisp/source/slime/start-swank.lisp &amp;amp;’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里我只介绍怎么在Mac的环境里面配置所以就不管别的平台下面的配置了所以我在我的.vimrc文件里面添加了作者给的代码&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let g:slimv_swank_cmd =&apos;! xterm -e sbcl --load /usr/share/common-lisp/source/slime/start-swank.lisp &amp;amp;&apos;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们可以简单的看一下这个代码貌似是用一个终端控制台在后台开启什么东西的样子（其实是在后台开启slime这个我们后面会知道）。于是我填了代码之后还是没有什么用处。好吧，于是我就求助了Baidu和Google这两个大神了，得到的结果很不理想，基本上common Lisp环境配置都是在Emacs上面的只有很少的页面是讲怎么在OSX上面配置VIM+slimv的兜兜转转我在豆瓣的读书笔记里面找到&lt;a href=&quot;(http://book.douban.com/annotation/15415332/)&quot;&gt;这篇&lt;/a&gt;文章，从笔记里面我知道原来不能用terminal里面的vim来使用slimv，其实好像是可以的只要加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set guioptions+=m&lt;/code&gt;来打开菜单就能使用了（我的打不开也不知道为什么有知道的vimer记得告诉我，谢谢）言归正传，知道不能在终端打开vim我只能用Macvim来代替了，果然使用了MacVim之后就可以看到菜单栏里面的slimv的选项菜单了，但是（我已经不想看到这个词了）还是不能用，不过根据上面的笔记来说，我猜我这里出的问题可能是我的MacVim不支持Python于是我准备下一下MacVim的&lt;a href=&quot;(https://code.google.com/p/macvim/wiki/Building)&quot;&gt;源代码&lt;/a&gt;来自己编译&lt;strong&gt;具体编译流程url里面很详细&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;经过一会编译出来符合要求&lt;strong&gt;支持Python和是32位的vim&lt;/strong&gt;的MacVim后再实验还是不可以。
于是我就想会不会是common Lisp的编译器的问题于是我用&lt;strong&gt;Home brew&lt;/strong&gt;下载了ccl&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install Clozure CL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把在.vimrc里面的脚本改成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let g:slimv_swank_cmd = &apos;!osascript -e &quot;tell application \&quot;Terminal\&quot; to do script \&quot;ccl --load ~/.vim/slime/start-swank.lisp\&quot;&quot;&apos;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;再运行终于可以了。
~(≧▽≦)/~&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这次对slimv的折腾，几番周折，主要没有中文的资料很麻烦后来在&lt;a href=&quot;(http://book.douban.com/annotation/15415332/)&quot;&gt;douban笔记&lt;/a&gt;里面找到了资料真的需要感谢下这个作者。
我在梳理一下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你需要一个支持Python和32位的MacVim （你可能需要自己编译&lt;a href=&quot;(https://code.google.com/p/macvim/wiki/Building)&quot;&gt;这里&lt;/a&gt;了解细节）&lt;/li&gt;
  &lt;li&gt;你需要一个Python的运行环境&lt;/li&gt;
  &lt;li&gt;你需要下载slimv的插件并且解压到.vim文件夹里&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip xxx.zip -d ~/.vim&lt;/code&gt;（&lt;a href=&quot;(http://www.vim.org/scripts/script.php?script_id=2531)&quot;&gt;这里&lt;/a&gt;下载）&lt;/li&gt;
  &lt;li&gt;你需要一个ccl的common Lisp的解释器 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install Clozure CL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在你的.vimrc文件里面添加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let g:slimv_swank_cmd = &apos;!osascript -e &quot;tell application \&quot;Terminal\&quot; to do script \&quot;ccl --load ~/.vim/slime/start-swank.lisp\&quot;&quot;&apos;&lt;/code&gt;（这不是必须得）&lt;/li&gt;
  &lt;li&gt;最后打开你的MacVim跟着作者的&lt;a href=&quot;(http://kovisoft.bitbucket.org/tutorial.html)&quot;&gt;tutorial&lt;/a&gt;来学习使用吧&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，希望我的文章能给爱折腾的你一点用，希望你们能坚持common Lisp的学习，与你共勉&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。
&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2013-12-30 20:00&lt;/p&gt;

</description>
          <pubDate>2014-02-23T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/vim+slimv%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE</link>
          <guid isPermaLink="true">https://niclas3.github.io/vim+slimv%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE</guid>
        </item>
      
    
      
        <item>
          <title>Mac中安装配置bochs(with SDL)</title>
          <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;我为了做一些系统编程需要使用&lt;a href=&quot;www.&quot;&gt;bochs&lt;/a&gt;来做一些调试和模拟的工作,所以需要在自己的Mac上面安装bochs，因为需要debug的功能所以自己需要一个自己编译版本的bochs所以就在SF上面下载了&lt;a href=&quot;www.&quot;&gt;bochs-2.6&lt;/a&gt;来自己编译安装。&lt;/p&gt;

&lt;p&gt;几经波折。还是没有成功安装bochs最后只能求助&lt;a href=&quot;http://stackoverflow.com/questions/1677324/compiling-bochs-on-mac-os-x-snow-leopard/18544680#18544680&quot;&gt;StackOverflow&lt;/a&gt;。下面是我结合在爆栈上面看到的总结的步骤希望能帮到你。&lt;/p&gt;

&lt;h2 id=&quot;准备&quot;&gt;准备&lt;/h2&gt;
&lt;p&gt;1.下载&lt;a href=&quot;www.&quot;&gt;bochs-2.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.下载&lt;a href=&quot;http://www.libsdl.org&quot;&gt;Install the SDL 1.2 Library&lt;/a&gt; 或者可以使用&lt;strong&gt;Homebrew&lt;/strong&gt;安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install sdl&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;
&lt;p&gt;修改.conf.macx中的配置如下&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure --enable-ne2000 \
        --enable-all-optimizations \
        --enable-cpu-level=6 \
        --enable-x86-64 \
        --enable-vmx=2 \
        --enable-pci \
        --enable-usb \
        --enable-usb-ohci \
        --enable-e1000 \
        --enable-debugger \
        --enable-disasm \
        --disable-debugger-gui \
        --with-sdl \
        --prefix=$HOME/opt/bochs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod u+x .conf.macx &amp;amp;&amp;amp; ./.conf.macx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;直接&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo make &amp;amp;&amp;amp; make install&lt;/code&gt; 就可以了&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;这里吐槽一下bochs的团队，因为Apple放弃了Carbon转投Cocoa就不做x64的版本的bochs了，还撂下话说反正bochs是开源软件你能自己添加就自己动手吧（&lt;a href=&quot;http://appleinsider.com/articles/12/02/18/mountain_lion_focuses_on_cocoa_drops_x11_and_deprecates_carbon&quot;&gt;傲娇脸&lt;/a&gt;。
好了，其实最后我还是希望有能力阅读外文的同学去StackOverflow注册一个账号，答答题问问问题比在X度和知乎靠谱多了。&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2014年2月23日 下午1:10&lt;/p&gt;

</description>
          <pubDate>2014-02-23T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/Mac%E4%B8%8A%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEbochs</link>
          <guid isPermaLink="true">https://niclas3.github.io/Mac%E4%B8%8A%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEbochs</guid>
        </item>
      
    
      
        <item>
          <title>C中的const测试解析</title>
          <description>&lt;p&gt;===
前言
—&lt;/p&gt;

&lt;p&gt;刚刚我在逛Coolshell的时候看到一个人在评论里面提了一个问题，我修改了一下代码代码如下所示。
开始
–
    #include &lt;stdio.h&gt;
    int main(int argc, char **argv)
    {
      const int a = 10;
	  int *b = &amp;a;
	  //const int *c = &amp;a; /*P指向的数据是常量*/
	  //int const *c = &amp;a; /*P指向的数据是常量*/
      //int * const c = &amp;a;   /*P本身是常量*/&lt;/stdio.h&gt;&lt;/p&gt;

  	  printf(“ a %p:%d  b %p:%d\n”, &amp;amp;a, a, b, *b);
  	  *b = 5;
  	  printf(“ a %p:%d  b %p:%d\n”, &amp;amp;a, a, b, *b);
  	  return 0;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好了，首先我们先看一下上面的代码，&lt;/p&gt;

&lt;p&gt;第一行定义了一个const修饰的int类型的变量a，然后定义一个指针b并赋值a，随后在打印a，b的地址和变量之后用指针b改变了
a的值，再继续打印b的值。&lt;/p&gt;

&lt;p&gt;然后我们使用gcc编译后加上-wall选项之后只有一句警告：initialization discards qualifiers from pointer target type.也就是被指针指过之后就会降低变量的资格（const的资格）具体是因为什么等我明天再网上查查就能知道。&lt;/p&gt;

&lt;p&gt;但是这里给出解决方案如果你想保护一个变量不被你的指针胡乱修改请再指针上修饰表示自己指向的值不能修改，而不是在值的地方修改。&lt;/p&gt;

&lt;p&gt;另外我实验了三种添加const的位置 首先const是一个左结合修饰符也就是标准写法应该像我注释的倒数两行一样书写。
第一种是不同的具体因为什么原因等我去找一找。&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2014年2月23日 下午11:18&lt;/p&gt;

</description>
          <pubDate>2014-02-23T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/C%E4%B8%AD%E7%9A%84const</link>
          <guid isPermaLink="true">https://niclas3.github.io/C%E4%B8%AD%E7%9A%84const</guid>
        </item>
      
    
      
        <item>
          <title>Lose one‘s force</title>
          <description>&lt;p&gt;刚刚在LOFTER上面看到了 一个文章，它里面只有一张照片和一首诗。黑白照片上面只有一个手臂手臂上面贴着超市的价格标签。诗是这么写的
Price Tag
Seems like everybody’s got a price,
I wonder how they sleep at night
When the sale comes first
And the truth comes second.
Just stop for a minute and smile&lt;/p&gt;

&lt;p&gt;Why is everybody so serious?
Acting so damn mysterious?
Got your shades on your eyes
And your heels so high
That you can’t even have a good time&lt;/p&gt;

&lt;p&gt;Everybody look to their left 
Everybody look to their right
Can you feel that 
We’re paying with love tonight?&lt;/p&gt;

&lt;p&gt;It’s not about the money, money, money
We don’t need your money, money, money
We just wanna make the world dance,
Forget about the price tag
Ain’t about the cha-ching cha-ching
Ain’t about the ba-bling ba-bling
Wanna make the world dance,
Forget about the price tag OK?”
诗中作者一直在强调或者呼吁人们不要过度在意标签（价值）或者说不要太在意钱 “It’s not about the money, money money, money”诚然，现在的社会对钱的重视程度一直都是最大的，导致很多人忘记了初心（losethem force）忘记了一开始的自己只是想跳舞而已的，我也不知道为什么我的LOFTER里面很多文章都是在告诫自己不要忘记初心的文章，也许我就是通过这种方式来提醒自己不要做这些事情吧。
也许钱的确是很有使用价值的替代品，可是往往这种“万能”的替代品不能代替的总是一些无形的物品。
物质上的需求本身就是不能满足精神上得需求的，你永远不能用美食喂饱一个需要获取知识的人。物质只是底层需求，可能在我们能够分配底层需求的时候我才会对精神需求有足够的重视，换句话说其实精神需求应该如何划分都不好说，如果按是否能被金钱满足来划分其实绝大多数精神需求都是需要被金钱满足的（哦，经济是基础）。所以我们不能用“不能被金钱所购买来区分精神需求和物质需求”
所以呢，我不太理解。希望以后的我能给我解答。
2014 01 01  ——–Nicalis @Nanjing&lt;/p&gt;

</description>
          <pubDate>2014-01-01T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/Lose-one-s-force</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/Lose-one-s-force</guid>
        </item>
      
    
      
        <item>
          <title>My frist Document nightly</title>
          <description>&lt;p&gt;这是我第一次在这个软件里面写字，我也是第一次能如此震撼的写下文字，
这里的一切都显得这么和谐音乐，简约的风格，流畅的输入的感觉一切的一切都
显得这么自然。 ——————————————Niclas
也许像这软件的介绍一样，他能给我带来不一样的输入体验，一种全新的体验，我能在这里享受书写对我的刺激，加速进入心流的速度，减少时间，我知道这个软件对于english 的字体体验很是丰富，我会尽量使用英文来书写这里的文字，也许是因为太累的原因吧，我有点困了，今天就先到这里，我明天就下单入手这个App希望这个公司能够继续蓬勃发展，我也能慢慢沉淀，沉淀到我这桶水不至于这么黑。这么说我就明天在这里总结下我这一年的大大小小的事情吧，晚安。&lt;/p&gt;

</description>
          <pubDate>2013-12-28T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/My-frist-Document</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/My-frist-Document</guid>
        </item>
      
    
      
        <item>
          <title>2013 忆</title>
          <description>&lt;p&gt;对我来说2013算是一个转折点得一年了吧。大大小小的事情都是发生在这一年的，就跟我自己做着回忆的火车伴奏轰隆轰隆的杂鸣踏上我的回忆之路吧。———————Niclas
春：
我记得2013年的除夕是在2月的时候，1月的我好像刚刚才从失恋的事件里慢慢走出来，这件事情又要往回退3个月。2012年的11月1号（我本来忘记了这个日子后来因为Efan的提醒我又特地回去看了一下）跟我相恋的女友要跟我分手了，那时候很伤心，现在想想这未尝不是一种人生的体验呢（说这样的话真的是就是安慰自己吧）我没有告诉身边的朋友也尽量不要让自己的负能量传播出去，只是没有这么活泼换个接地气的词没有这么2了吧。就这样慢慢的调整自己的心情，收拾心情找一个没有认识的人的地方宣泄，于是我去了LOFTER，去了PaPa，我然我在那里遇到了很多朋友，他们热情阳光，这也改变了我对“网友”这个词的最初的印象，我是一个传统中国教育教育出来的小孩，也就是每天被教导的就是不要给别人添麻烦也不要给自己添麻烦是一种“自扫门前雪，勿扫别人挖上霜”的处事哲学（我本身不喜欢这样的方法），所以网络的朋友给我的理解就是“陌生人”对于陌生人的处理方式就是漠视无视。不过在我在这两个轻社区平台上面的经历让我知道，这世界上有这么一群人，他们不是这样的（不是像我一样），他们乐于认识交流乐于和陌生人交换经历，喜欢帮助别人，我想也就是因为这样，她们满满的热情才把我携带的负能量统统驱赶走。
说完了感情上得事情，其实2013年春天的时候是我学历上面的转折点，我成功的通过了升学测试考回了家。也许在我的同学眼里我就是一个什么都不用学但是每次考试都是考的很好的怪咖，也许在他们眼里我还是一个奇怪的人，从来看不到我洗漱睡觉，可是又每天早上看到我在床上睡觉。这点我想对我前面的舍友说声抱歉，其实最多的是想说声谢谢，说抱歉就是也许我对你们的处事的方法不对，有的时候没有顾及到你们的自尊心，说谢谢的原因是谢谢你们的宽容，谢谢你们能容忍我的怪习惯小心眼。我知道226已经没有人住了，我希望你们在学校的在工作岗位的好好的以后希望还能聚在一起。我知道我们宿舍其实是这么多宿舍里面最努力的，也许你们到大一才摸过电脑但是你们现在不是各个都可以使用SSH框架，Mysql数据库这些有些计算机牛人都不一定会得东西吗，总之，珍重，我走了，我会回来的。
夏：
关于夏天的回忆我都有些不记得了，有人说，记忆的缺失有一大部分原因是因为有不好的回忆。
秋：
冬：
说实话，比起夏天我更喜欢冬天，可能是缺乏安全感的关系吧，我喜欢被被子包围的感觉。
冬天，我接受了Chelsea的建议，不谈恋爱。我现在想想其实我应该付出更多才是。不应该然女生付出。
其实我现在想想终于知道为什么有的人找对象需要条条框框，可能是因为以前的失败经历吧，想我现在就想找一个不算丑也不算漂亮的姑娘，也不一定需要会什么但是一定要善良，我们谈恋爱一定是家里人赞同的不能是异地恋，至少两个人要能常常见面的这种距离就可以了。可能我再有这么几次失败的经历也许就会有更多的要求吧。&lt;/p&gt;

&lt;p&gt;总：
纵观我对2013的看法，还是情感上面的问题比较多，也不知道是因为就是这样还是最近我对这方面的感触多的原因呢，
结束吧，还有3天就跨年了，希望我能在2014年有新的感触，希望能看到2年约定的结果。我需要沉淀，无论从技术还是思想，都需要沉淀。&lt;/p&gt;

</description>
          <pubDate>2013-12-28T00:00:00+08:00</pubDate>
          <link>https://niclas3.github.io/share/essay/2013MM</link>
          <guid isPermaLink="true">https://niclas3.github.io/share/essay/2013MM</guid>
        </item>
      
    
  </channel>
</rss>
