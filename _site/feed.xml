<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>朝四暮三</title>
    <description>喜欢三是两听的金鱼杯</description>
    <link></link>
    
      
        <item>
          <title>风暴般的魔女</title>
          <description>&lt;h2 id=&quot;section&quot;&gt;2017-04-16-风暴般的魔女&lt;/h2&gt;
&lt;p&gt;title: 风暴般的魔女&lt;br /&gt;
updated: 2017-04-16&lt;br /&gt;
categories : lasay&lt;br /&gt;
—&lt;/p&gt;

&lt;p&gt;我很喜欢香子这种性格豪放如暴风雨般的妹子，敢爱敢恨。&lt;/p&gt;

&lt;p&gt;也许是她自我的心理补偿，&lt;br /&gt;
也许只是为了获得关注而产生的报复心理，&lt;br /&gt;
她爱上了自己爸爸的师弟一个有妻子的男人。&lt;/p&gt;

&lt;p&gt;她像工艺玻璃杯一样透明脆弱的心才是她本身吧，&lt;br /&gt;
零的到来加剧了自己父亲对于香子的忽视，也加剧了香子更加冲动的反抗为了获得父亲更多的关注，到最后选择离开家。&lt;br /&gt;
对于香子来说，零的到来如同开始了一场不会结束的梦魇，零的天赋和努力越来越盖过香子，爸爸的关心全都会被这个爸爸的入室弟子所抢走，无声的反抗成为香子唯一和父亲沟通的方式。香子对零的恶意到达顶点的时候应该就是那次零在饭桌上叫自己爸爸『爸爸』那次吧。那次香子终于确信了自己真的被这个外来的小孩抢走了爸爸，最让人气愤的其实是香子爸爸的态度，父亲根本没有理会家中孩子们的想法反而是转移话题称赞零。&lt;br /&gt;
时间来到零多次连败的节点，那一天香子特地来拜访零的出租屋，香子一下戳破的零不让她进屋去的谎言，几番寒暄之后，能够感受到姐姐对于零并不是像刚刚我们说的那样只有恨了，她会感叹自己和零一起生活了10年却不知道零喜欢河流；会抱着零新收到的羽绒被说的确没有零的味道。这些细节足以表明姐姐，一定在哪个我们不知道的时间节点对零有了新的感受。之后他们说到了后藤，那个姐姐说自己喜欢的男人。零又一次的询问香子『就这么喜欢后藤？』，香子面带戏谑的回答『喜欢啊，最喜欢了！』&lt;/p&gt;

&lt;p&gt;从这里我可以看到的是，姐姐说自己喜欢后藤的行为很像在对父亲和零报复的行为。因为零和父亲都是爱自己的，香子用这样的行为既获得了父亲的关注又一次次不让零有负罪感（零认为自己把香子变成这样），越来越出格慢慢的变成了香子的武器，这把武器攻击了她最想攻击的两个人，所以香子现在不会放弃对后藤的追求的。如果没有追求后藤这件事情，香子就会变成一个『手无寸铁』没有办法反抗命运的人，以香子暴风般的性格她不会变成这样的。&lt;/p&gt;

&lt;p&gt;这里香子提出了零对战的那个松永先生，一个年过半百的C1选手。如果零在这场打败他，那他就再也不是职业选手不能参加排名赛了，说完这些话之后香子就大步离去了。&lt;br /&gt;
零在最后说的话耐人寻味『离开而去的他的发丝，被阳光穿透的瞬间微微地闪闪发光，然后，那道光芒终究还是带来了倾盆大雨』。也许，香子的到来，让零的内心有那么一丝的温暖，可这样的温暖是暂时的，带来的是香子为了报复零带来的大雨。&lt;/p&gt;

&lt;p&gt;对战松永先生之后，香子以手表丢在零的公寓为理由又一次约零见面。香子种种细节上真的表现出一个姐姐的细心，香子能轻松的说出零今年只有一个和安井先生的对局（又一次戳破了零的谎言），并且指出如果他输棋那零又一次间接的摧毁了一个家庭。&lt;/p&gt;

&lt;p&gt;香子这两次拜访，意图不是让零输掉棋局，单纯是利用零心中对于自己的愧疚对于零的报复。这也体现了香子敢爱敢恨的性格&lt;/p&gt;

&lt;p&gt;最后零回忆起，香子离家出走的那次场景。香子一边胡乱的收拾着行李，一边说我爱那个男人要离家出走。零试图阻止她&lt;br /&gt;
『爸爸不会原谅你的。』&lt;br /&gt;
『我也不会原谅他的。』大颗大颗的泪珠从香子的脸上滚下来，&lt;br /&gt;
零说『那我离开，我不管去哪 都不会有人担心 但是姐姐不是，姐姐是有家人的，爸爸不可能不疼爱你』&lt;/p&gt;

&lt;p&gt;这一幕就能看出，姐姐有一瞬间像原谅零的样子。其实零并不是为了抢走爸爸而存在的，而且他真的离开这个家了。零这句话会变成姐姐原谅零的原因的。&lt;/p&gt;

&lt;p&gt;这一季姐姐的最后一次出场是在零陪岛田参加前夜祭之后。因为姐姐认为零告诉爸爸自己的男友的秘密，来兴师问罪。这次零没有像之前一样只有忍受，而是选择和姐姐争吵，不巧碰上了想要给零送新做的豆皮寿司的三姐妹。识趣的大姐领着大家回去了，可二妹坚持把寿司盒送到了零的手上，香子在询问之后又冷嘲热讽的说零又在别家装可怜了。&lt;/p&gt;

&lt;p&gt;以零的性格，姐姐当然理所应当的进了家门，大口大口的吃着三姐妹的寿司还时不时的评价起来。这里有个细节，姐姐再吃筑前煮的时候一次就吃出这是韩式做法，可见姐姐至少也是懂得食物的人。&lt;br /&gt;
夜深之后，香子又住在零家里，这次香子慢慢展现自己的弱势面给零了，她也不知道为什么喜欢那个比自己大20岁的人，也不知道如何和父亲说这些事情。&lt;br /&gt;
被桃子妹妹说是魔女的她何尝不想要一个爱自己的人呢？&lt;br /&gt;
苦苦追寻那个自己『爱』的人，到底是为了报复父亲和零还是因为爱呢？&lt;br /&gt;
香子的心中是空虚的，一切来得都太简单了，父亲因为对自己的愧疚对自己好，零因为对自己的愧疚在感情上给予香子最温柔的对待，只有在那个不爱自己的人那里才能的到经历挫折获得感情的感受。香子也许是这么想的把，正事因为什么事情来得都太简单了，让她变成这样虚无，这样无望，这样辛苦。&lt;/p&gt;

&lt;p&gt;这部剧中我最喜欢香子这个角色，无论是她的敢爱敢恨，她的无望虚无，都向我展现了一个立体又生动的形象，她有时让人气愤，有时让人怜爱，&lt;/p&gt;

&lt;p&gt;父母去世的零寄住在养父家，作为留下的契约，零走向了唯一可以活下去的路，下棋。于是渐渐地零凭借着将棋天赋和努力在棋力上压过了同以棋手为目标的姐姐香子，和弟弟步。&lt;br /&gt;
无论在哪个方面香子都展现出宛如暴风雨般激烈，棋风也好，性情也好，她的美貌也是。&lt;/p&gt;

&lt;p&gt;这篇文章想就此分析 香子这个 如风暴般的魔女&lt;/p&gt;

&lt;p&gt;1.第一次出现在第五集交代姐姐像暴风雨一样的性格（零的回忆）&lt;br /&gt;
2.第二次出现在第八集，零需要对战一个老爷子之前（现实）&lt;br /&gt;
3.第三次出现在第十集，零对战一个家庭破裂的棋手之前（现实）&lt;br /&gt;
4.第四次出现在第十五集，在零的记忆里，姐姐似乎是喜欢零的（零的回忆）&lt;br /&gt;
5.第五次出现在第十七集，姐姐认为零对爸爸说了 自己的秘密来找零吵架，并且被三姐妹看见（现实）&lt;/p&gt;

</description>
          <pubDate>2017-04-16T00:00:00+08:00</pubDate>
          <link>/2017/04/16/%E9%A3%8E%E6%9A%B4%E8%88%AC%E7%9A%84%E9%AD%94%E5%A5%B3.html</link>
          <guid isPermaLink="true">/2017/04/16/%E9%A3%8E%E6%9A%B4%E8%88%AC%E7%9A%84%E9%AD%94%E5%A5%B3.html</guid>
        </item>
      
    
      
        <item>
          <title>白 ---------- 全即一，一即全</title>
          <description>&lt;p&gt;白，一直是一种有意思的东西。它大部分时间是通过一种叫做『白色』的东西展现出来的。《夏目友人帐》有一集出现的日式新娘礼服叫做无白垢，貌似这种传统服饰的意思是为了不让女子长发中的凶灵因嫉妒化为恶鬼。可见，白色在很多是时候有着净化，控制的意义。&lt;/p&gt;

&lt;p&gt;今天，给大家带来的是我非常喜欢的设计师 原研哉先生的书 《白》。『本书不讲颜色的。其实，我是在尝试探究一种叫做『白』的实体，用来找到由人们自身文化设定的那些感觉之源。换句话说，我试图找到那通过白的概念营造的简介和唯美的日本美学的源头。』这里摘录自这本书的前言。&lt;br /&gt;
说起原研哉，不得不提的一定会有MUJI（当然长野冬奥会纪念册也很出名，如果你想了解更多，可能我下次会推荐另一本《设计中的设计》的时候具体介绍原研哉），性冷淡风格一度成为主流。而这篇《白》更多的视图解释，这些极简主义，黑白灰，侘寂，这些性冷淡表象下面的源头。而这个源头的名字 叫做 『白』 ，亦或叫做『空』。&lt;/p&gt;

&lt;p&gt;当一个词语 被赋予了 颜色的意义的时候，你就会发现天然的 『它』（我是说表示颜色的这个词本身）就变成一种特别的存在，他们往往能够唤起我们的记忆。当然颜色是有纯粹的物理意义的，在我们的世界里他们是用 色度，明度， 和色值来组成三维环来表示所有颜色的。我们知道，无论哪种『媒介』都会使其传播的信息丢失，这里显然丢失了颜色包含一些信息，就像原研哉说的那样，一直被打破的鸡蛋的蛋黄的金黄色，或是茶杯里茶水的颜色，都不只是颜色。他们是带着物质本身固有属性的，他们会跟着味觉，质感。一起被看到的。所以，对颜色的理解，是与颜色，不至于颜色。颜色不应该只被在视觉维度被感受，这样感受颜色，就始终无法体会他们带来的所有体验。&lt;/p&gt;

&lt;p&gt;这样，毫无疑问的，颜色是一种语言，你能够感受到不同颜色的细微差别，情感驱使你辨别出更多的信息，被封印在物理媒介中的信息，被你解析出来了。这时候我就想起来Alfred North whitehead在1943年说过一句话 『艺术就是将一种模式强加于经历，以及识别这种模式所带来的审美享受』。这里可以插一句，最近我在学英语，和老师交流的时候，老师表示一些简单的单词连接到一起了就不知道意思了，我说：『可能文化环境是罪魁祸首吧。就像外国人肯定不能从韦编三绝这四个字中知道我在说一个人很勤奋一样。』，回到书上，这里的颜色也是一样的，他们的意义也是经过时间的长河，慢慢积累沉淀最后变成这样的。所以每一个颜色给你带来的冲击都是你处在的社会环境，民族文化带来的。&lt;/p&gt;

&lt;p&gt;然而。白，就是一个很有趣的颜色。我记得我在学水彩的时候，老师跟我说过，你不可以用白色来表示白色，白色是需要『空』出来的，这个手法在水彩中叫做留白。在构图的时候你就需要知道哪里不能沾染上颜色，其实对于超级新手的我来说，留白实在困难，因为白色实在太容易被入侵，浸染，被混合，你需要小心保护，细心再细心才可以。有时候一幅画就是因为一个留白而成为败笔。当时我也问过老师为什么不可以用太白粉的白来画这些空，老师说，他们不够透气，刻意，不自然。&lt;br /&gt;
白，很有意思，你可以混合所有颜色的光来得到白光。你也可以去掉所有的颜色，来获得白色。『一即全，全即一』。留白体现了空间距离也体现了『存在』（现在看来，也许钛白粉挑出来的白就不能表示『不存在』了吧）&lt;/p&gt;

&lt;p&gt;原研哉说白是混沌的反面。当所有颜色都在因为熵增，相互混合的时候。 &lt;br /&gt;
白，他表现出拒绝，拒绝所有颜色。却又能够接受所有颜色。&lt;br /&gt;
当他接受的时候他就变成了他接受的颜色。在他接受之前他就是白。&lt;br /&gt;
所以，白色是混沌的开始，而不是混沌的反面呀。我们没有办法触碰到白，因为只要我们接触到他，他就接纳了，变成了我们。我们无法观测到它，他会因为我们的观测改变。&lt;/p&gt;

&lt;p&gt;原研哉在对于创造和思考上有独特的见解。空带着思前行，『思考』这种行为模式萌生于『询问』的潜意识中，而『询问』又是基于『我思』。这也许是思考前放空自己的意义，放空自己是为了能想到更多。&lt;/p&gt;

&lt;p&gt;在构思这期节目的文案的时候，我就试图放空自己，在雨里暴走了10 公里。无论怎样的创造都需要很多很多的原始积累，使用原始积累才能让空带着你创造和思考。&lt;/p&gt;

</description>
          <pubDate>2016-10-31T00:00:00+08:00</pubDate>
          <link>/essay/2016/10/31/1010%20%E7%AC%AC%E4%B8%89%E6%9C%9F.html</link>
          <guid isPermaLink="true">/essay/2016/10/31/1010%20%E7%AC%AC%E4%B8%89%E6%9C%9F.html</guid>
        </item>
      
    
      
        <item>
          <title>三亿巨奖从天而降，你的人生会何去何从</title>
          <description>&lt;blockquote&gt;

  &lt;pre&gt;&lt;code&gt;				《亿男》--『一男啊。那座塔啊...你不觉得从远处看才更美吗？』
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于金钱和幸福的答案，你想过吗？&lt;br /&gt;
金钱造就了对价关系 我们有意无意以此衡量价值&lt;br /&gt;
或许标价上的金额、折扣优惠斗大的数字、存折打印上的存款、帐单应付的总额，等于了生活；但，跌倒受伤后的拥抱、泪流满面后递上的温暖、轰隆雷雨后的大肆放晴，你怎么标价？&lt;br /&gt;
最究竟，金钱和幸福，并不是正比存在。&lt;br /&gt;
金钱或许创造了物质的幸福价值，但正如同本书提及，「一个人难以成就这种幸福，必须和别人在一起，才能感受到幸福的一刻」&lt;/p&gt;

&lt;p&gt;最近国庆假期，加上连续上班&lt;br /&gt;
# 亿男·我对金钱的思考&lt;br /&gt;
作为一个看眼缘的人，买这本书就只是因为他的配色很能抓住我。黄色的封面里，一个人面无表情的视图吞食着一张一张的货币，似乎这些在他看来就和普通的早餐没有什么区别。&lt;br /&gt;
我看书的时候很喜欢猜测作者会怎么写，尤其是在看小说的时候尤为严重，如果我猜测的剧情和作者写的得差不多，我可能会因为自己的小聪明窃喜，反之，就会感叹为何能从这样的角度如此看待问题。 &lt;a href=&quot;https://www.facebook.com/%E5%B7%9D%E6%9D%91%E5%85%83%E6%B0%97-567234320027537/&quot;&gt;川村元气&lt;/a&gt;给我一种和以前完全不一样的感受，诚然我猜对了下面的剧情发展，却又没有完全猜对（我猜对了开始却没有猜中结局）。&lt;/p&gt;

&lt;p&gt;这是一个贫苦社畜的变身暴发户的故事，因为贫穷饱受人生折磨，不仅如此他还承担下来弟弟的债务，于是他连给女儿买一个自行车都不行。&lt;br /&gt;
  钱，在一男的生命里慢慢的变成了唯一，因为缺钱的原因常常和妻子吵架导致自己和妻子女儿分居，为了能多赚钱他晚上还会去工厂做兼职，即使这样他依然不能摆脱贫穷。&lt;br /&gt;
  那一天，他从一位老妇人手里获得了一张可以兑换3亿圆的彩票。 从此命运就发生了改变，以前看似因为钱导致问题，现在看来似乎都可以解决（可是却都解决不了，但是现在的一男还没有发现）一男诚惶诚恐的搜索着那些一夜暴富的人的悲惨经历，他不希望自己也变成这样。于是，他找到了自己在大学的时候的挚友九十九，九十九是一个成功的互联网创业老板身价过亿，可是依然一副『穷人』的样子（这是我对九十九出场时候的描述）。一男在像九十九讲述自己的一系列遭遇之后，九十九让一男把钱全拿出来。他们潇洒挥霍了一晚上之后，第二天一男一个人醒来，发现九十九拿着他剩下的钱消失了。&lt;br /&gt;
  故事进行到这里，我想先岔开话题聊一聊别的。今天我在一个好久不用的包里最近才发现了去年平白无故丢失的压岁钱。但是，我转眼又把刚刚的红包弄丢了，把我平白无故多了300块钱弄不见了，我依然会不开心。这是为什么？既然这300块是平白无故多出来的，按道理来说少了对我来说应该没有影响可是为什么我会不开心？&lt;/p&gt;

&lt;p&gt;故事说到这里如果你和我有一样的看小说的习惯。那你一定在想这九十九真不像话人家这么信任你，你却如此对待一男。（如果你也是这么想的恭喜你进入了作者挖的第一个伏笔，ps：其实这本书的伏笔很多有机会再读一次再一一找出）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;『一男啊。那座塔啊…你不觉得从远处看才更美吗？』&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;九十九对一男这么说过，现在回头来看，可能那座塔指的是『有钱』这件事吧。九十九想让一男以旁观者的角度靠近那座塔，而不是拿着这3亿靠近它。&lt;/p&gt;

&lt;p&gt;后面的剧情是很典型的总分总的样子，一男分别拜访了九十九的伙伴们。见识到九十九的伙伴们对与突如其来的巨款的态度，和他们现在生活方式（我觉得这就是九十九安排的目的，让一男知道金钱在99眼里到底是什么）&lt;/p&gt;

&lt;p&gt;其中我印象最深的是两个女人的故事，一个是九十九的秘书十和子，一个是一男的妻子万佐子，在这两个女性角色中你能感受到女性的坚韧和脆弱，既能看到他们的铠甲又能看到他们的软肋。女生都是需要呵护的无论她看上去多厉害，多有钱，她仍然需要陪伴，需要爱。以前的十和子被金钱支配她只想要更多的钱和更好的男人，这样她的喜悲被这两者左右，如果不那么在乎这些，那是不是说明可以减少自己被『欲望』的制约呢？&lt;br /&gt;
&amp;gt; 『万恶的根源并不是钱，而是对钱的爱。』——-塞缪尔·斯迈尔斯&lt;/p&gt;

&lt;p&gt;幸福和金钱往往在很多人嘴里都会画上三个等号，真的是这样吗？&lt;br /&gt;
有几个有钱人这么说过？&lt;br /&gt;
你身边都是什么样的人描述这样的画面？&lt;/p&gt;

&lt;p&gt;故事似乎没有给一个对于幸福的答案。&lt;br /&gt;
支撑你一直生活的动力其实是『欲』。这个字可以有很多种翻译。&lt;br /&gt;
一男最后也找到自己的『欲』，为了和妻子女儿一起生活的欲望。&lt;br /&gt;
当然还有另外两个人的故事也很精彩，一定要看，看完之后和我分享吧。&lt;/p&gt;

&lt;p&gt;这里体现了两个矛盾，一方面我们不希望被可怕的『欲望』所支配，另一方面也不希望被贫穷所困扰。所以，为什么同样是欲望，一男最后为了和妻子三人一起生活就是『积极』的欲望，而一男以前为了让家庭变得更好『自私』的扛起了家庭。忽视别人的感受，这才是失败的原因吧。&lt;br /&gt;
  不知道我的你是不是一个有对象或者有喜欢对象的人，有的时候，为了另一半喜欢的东西努力往往比给自己买一个想要的东西更开心，可能，这就是作者想要表达的『积极的欲望』吧。&lt;/p&gt;

&lt;p&gt;记得我最喜欢的Up主 sinBasara 说过，所有事情走上了极端都是『邪教』，无论是绝望，还是希望。&lt;/p&gt;

</description>
          <pubDate>2016-10-15T00:00:00+08:00</pubDate>
          <link>/onlybook/2016/10/15/%E4%B8%89%E4%BA%BF%E5%B7%A8%E5%A5%96%E4%BB%8E%E5%A4%A9%E8%80%8C%E9%99%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E4%BA%BA%E7%94%9F%E4%BC%9A%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E.html</link>
          <guid isPermaLink="true">/onlybook/2016/10/15/%E4%B8%89%E4%BA%BF%E5%B7%A8%E5%A5%96%E4%BB%8E%E5%A4%A9%E8%80%8C%E9%99%8D%EF%BC%8C%E4%BD%A0%E7%9A%84%E4%BA%BA%E7%94%9F%E4%BC%9A%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E.html</guid>
        </item>
      
    
      
        <item>
          <title>设计模式杂杂谈</title>
          <description>&lt;h1 id=&quot;section&quot;&gt;设计模式杂杂谈&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;北冥有鱼，其名为鲲。&lt;br /&gt;
鲲之大，不知其几千里也。&lt;br /&gt;
化而为鸟，其名 为鹏。鹏之背，不知其几千里也。&lt;br /&gt;
怒而飞，其翼若垂天之云。是鸟也 ，海运则将徙于南冥。&lt;br /&gt;
南冥者，天池也。 – 庄子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不知道从什么时候起设计模式，慢慢变成一个装逼必备的理论开始被讨论了，也许50年了。今天我们聊一种模式&lt;br /&gt;
##Strategy Pattern&lt;br /&gt;
我们先不说这些有的没的模式该是什么表现形式，照例应该先吹比。首先说说Strategy pattern的strategy是什么意思&lt;br /&gt;
&amp;gt; a plan of action or policy designed to achieve a major or overall aim.&lt;br /&gt;
（以上是Google translate友情提供翻译。）&lt;/p&gt;

&lt;p&gt;说Strategy是为了一个长期的目标制定的一个动作。从这种解释可以看出来，这个模式其实是代码中的动作（函数，方法）的集合。我想大家看过三国吧，Strategy pattern就像诸葛老儿给的锦囊计，你要用的时候找我,我给你我的技巧。（这里要注意的是，1.这个给的只是方法而不是对象（我说的这个对象是，即封装了属性又封装了方法的对象）。他在代码的表现形式上更像一个属性，你通过setter和getter方法改变和获取这个可设置的Strategy。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;设计模式整体的概念在于抽象世界，所以他们常常把在&lt;strong&gt;不同情况&lt;/strong&gt;下改变的东西变得可以改变并且&lt;strong&gt;提出来&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;设计模式里面还有一个技巧，通过在类里实现一个空方法，调用组合对象的方法来提高并封装了组合对象的方法调用层级。让使用者认为自己在调用产生类的方法，而其实是产生类中组合实例的函数。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##🌰我来举个老师去上课的例子吧&lt;br /&gt;
```&lt;br /&gt;
import Foundation&lt;br /&gt;
/// 这是锦囊类&lt;br /&gt;
protocol TeachCategorical {&lt;br /&gt;
    func teach()&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class MathClass: TeachCategorical {&lt;br /&gt;
    func teach() {&lt;br /&gt;
        print(“教数学”)&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class EnglishClass: TeachCategorical {&lt;br /&gt;
    func teach() {&lt;br /&gt;
        print(“教语文”)&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
/// ————我是分割线 ———–&lt;br /&gt;
class ClassRoom  {&lt;br /&gt;
    private var teachFunction: TeachCategorical! = MathClass()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func setTeachFunction(teach: TeachCategorical) {
    self.teachFunction = teach
}

func publish() {
    self.teachFunction.teach()
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class MathClassRoom: ClassRoom {&lt;br /&gt;
    override init() {&lt;br /&gt;
        super.init()&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func teachMath() {
    self.setTeachFunction(MathClass())
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class EnglishClassRoom: ClassRoom {&lt;br /&gt;
    override init() {&lt;br /&gt;
        super.init()&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func teachEnglish() {
    self.setTeachFunction(EnglishClass())
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;let mathroom : MathClassRoom = MathClassRoom()&lt;br /&gt;
mathroom.teachMath()&lt;br /&gt;
mathroom.publish()&lt;/p&gt;

&lt;p&gt;let englishRoom :EnglishClassRoom = EnglishClassRoom()&lt;br /&gt;
englishRoom.teachEnglish()&lt;br /&gt;
englishRoom.publish()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;我把Strategy封装成接口（ps把需要抽象的方法做成接口，是个非常明智的选择，这恰恰也是接口存在的意义）然后写了两个不同的锦囊类。分别实现了teach方法用来教课。

下面就是需要把不同的教室分配为不同的职能了。于是，应该发生的样子应该是数学教师用来教数学，英文教室教英文。

把教室抽象出来并且给教室一个『锦囊』属性让教室在想设置这个教室职能的时候可以设置。（当然这种设置可以放在任何初始化内部对象的地方比如init方法，set方法之类的）。
教室还有一个职能就是让这个『锦囊』有用（也就是调用这个实例的方法）

这里很好的看到了，我把整个程序分割成两个部分。
1. 锦囊 
2. 手持锦囊的一群东西

这就是Strategy模式。
记住的是，你在编码的时候发现什么被经常改动。如果改动的是方法，记得使用接口封装他们。如果改动的是数据结构，我们下次再说用什么。

-----------
##同胞兄弟 Factory Pattern
### defalut factory pattern
为什么要在一起说这两个pattern呢，因为我觉得从结构上来看他们很像，可以一起**横向对比**。
照例我们还是先从名字入手，factory，没啥好介绍的。名词:工厂。也就是说，我们可以通过这个『工厂』来『制造』并且产出『产品』，这里的『产品』就是我们想要批量生产或者方便添加的类。
有上述可以得到，我们在这个模式中需要定义产品对象。自然而然的，我们需要定义接口来指导行为。

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;// 简单工厂模式样例&lt;br /&gt;
/* ——- */&lt;br /&gt;
/// 这是产品类&lt;br /&gt;
protocol Operators {&lt;br /&gt;
    func perform()&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class Addition: Operators {&lt;br /&gt;
    func perform() {&lt;br /&gt;
        print(“做加法”)&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class Minies: Operators {&lt;br /&gt;
    func perform() {&lt;br /&gt;
        print(“做减法”)&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class Divice: Operators {&lt;br /&gt;
    func perform() {&lt;br /&gt;
        print(“做除法”)&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class Mutiple: Operators {&lt;br /&gt;
    func perform() {&lt;br /&gt;
        print(“做乘法”)&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;enum operatorsEnum {&lt;br /&gt;
    case Add, Minie, Divice, Mutiple&lt;br /&gt;
}&lt;br /&gt;
&lt;code&gt;
由此可见，这个产品的模板其实和策略模式的策略类的表现形式如出一辙。继续看工厂类的实现
&lt;/code&gt;&lt;br /&gt;
class OperatorsFactory {&lt;br /&gt;
    func createOperatorWithType(operat: operatorsEnum) -&amp;gt; Operators {&lt;br /&gt;
        var operators : Operators&lt;br /&gt;
        switch operat{&lt;br /&gt;
        case .Add :&lt;br /&gt;
            operators = Addition()&lt;br /&gt;
        case .Divice:&lt;br /&gt;
            operators = Divice()&lt;br /&gt;
        case .Minie:&lt;br /&gt;
            operators = Minies()&lt;br /&gt;
        case .Mutiple:&lt;br /&gt;
            operators = Mutiple()&lt;br /&gt;
        }&lt;br /&gt;
        return operators&lt;br /&gt;
    }&lt;br /&gt;
}&lt;br /&gt;
```&lt;br /&gt;
作为简单工厂，只需要一个函数来产生不同的产品，通过接口来使用『里氏替换原则』接受所有的产品类型，返回产品实例。&lt;br /&gt;
最后看一下使用方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class User {
    var factory: OperatorsFactory
    init(operaFactory: OperatorsFactory) {
        self.factory = operaFactory
    }
    
    func perfromWithType(opType: operatorsEnum) {
        let weapon: Operators = factory.createOperatorWithType(opType)
        weapon.perform()
    }
}

let users = User(operaFactory: OperatorsFactory())
users.perfromWithType(.Add)
users.perfromWithType(.Minie)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;首先使用者类中，存在一个组合的工厂类的实例（这样一点又和策略模式的角色类的实现相同），然后有一个方法（createOperatorWithType :opType）通过外部的产品类型返回实例，直接调用这个实例的方法（以转换为用户类的方法）&lt;br /&gt;
### Factory Method Pattern&lt;br /&gt;
&amp;gt; &lt;strong&gt;变量就是类，类和变量的相互转化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;老生常谈了，我们还是从名字开始入手，『工厂方法』这名字可能说明不了什么问题（比较像中国人起的名字）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫&lt;strong&gt;虚拟构造器&lt;/strong&gt;(Virtual Constructor)模式或者&lt;strong&gt;多态工厂&lt;/strong&gt;(Polymorphic Factory)模式，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Virtual Constructor Pattern和Polymorphic Factory Pattern这两个名字就很能说明问题了。&lt;br /&gt;
在计算机科学里面常常有人喜欢说Virtual这个词，『虚拟化』听上去就很牛逼，基本上看到这个词的时候就知道这个人是把什么东西抽象成一个抽象描述了，而在代码实现中接口就是这种抽象描述。再看看Polymorphic Factory就能知道这个『工厂』可能是很多的。（一般这种很多的东西，就是通过不同的类来分割职能，所以需要使用接口把他们统一起来）&lt;/p&gt;

&lt;p&gt;来我们使用Virtual constructor 重构上面的简单工厂看看。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class OperationDecorator: Operators {
    var operat: Operators! = nil
    init(opera: Operators) {
        self.operat = opera
    }
    func perform() -&amp;gt; String{
        return operat.perform()
    }
}

class DoubleDecorator: OperationDecorator {
    override func perform() -&amp;gt; String{
        return &quot;浮点数&quot; + self.operat.perform()
    }
}

class IntDecorator: OperationDecorator {
    override func perform() -&amp;gt; String {
        return &quot;整数&quot; + self.operat.perform()
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里写了两个产品，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol OperationUser {
    func performfWithType(operationType: operatorsEnum)
    func createOperaWithType(operationType: operatorsEnum) -&amp;gt; Operators!
}

extension OperationUser {
    func performfWithType(operationType: operatorsEnum) {
        let opt: Operators! = createOperaWithType(operationType)
        print(opt.perform())
    }
}

class DoubleUser: OperationUser {
    func createOperaWithType(operationType: operatorsEnum) -&amp;gt; Operators! {
        var opt: Operators
        switch operationType {
        case .Add:
            opt = DoubleDecorator(opera: Addition())
        case .Divice:
            opt = DoubleDecorator(opera:  Divice())
        case .Minie:
            opt = DoubleDecorator(opera:  Minies())
        case .Mutiple:
            opt = DoubleDecorator(opera:  Mutiple())
        }
        return opt
    }
}

var user: OperationUser = DoubleUser()

user.performfWithType(.Add)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;###Abstract Factory Pattern&lt;br /&gt;
抽象工厂模式的主要作用就是把上述的工厂类的方法抽象成接口。我们直接看代码。&lt;br /&gt;
```&lt;br /&gt;
protocol WeaponType {&lt;br /&gt;
    func fire() -&amp;gt; String&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class AK: WeaponType {&lt;br /&gt;
    func fire() -&amp;gt; String {&lt;br /&gt;
        return “AK: Fire”&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class AWP: WeaponType {&lt;br /&gt;
    func fire() -&amp;gt; String {&lt;br /&gt;
        return “AWP: Fire”&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class HK: WeaponType {&lt;br /&gt;
    func fire() -&amp;gt; String {&lt;br /&gt;
        return “HK: Fire”&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class WeaponDecorator: WeaponType {&lt;br /&gt;
    var weapon: WeaponType! = nil&lt;br /&gt;
    init(weapon: WeaponType) {&lt;br /&gt;
        self.weapon = weapon&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func fire() -&amp;gt; String {
    return weapon.fire()
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class GermanyDecorator: WeaponDecorator {&lt;br /&gt;
    override func fire() -&amp;gt; String {&lt;br /&gt;
        return “德国制造” + self.weapon.fire()&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class AmericaDecorator: WeaponDecorator {&lt;br /&gt;
    override func fire() -&amp;gt; String {&lt;br /&gt;
        return “美国制造” + self.weapon.fire()&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;/**&lt;br /&gt;
 *  抽象工厂接口&lt;br /&gt;
 */&lt;br /&gt;
protocol WeaponFactoryType {&lt;br /&gt;
    func createAK() -&amp;gt; WeaponType&lt;br /&gt;
    func createAWP() -&amp;gt; WeaponType&lt;br /&gt;
    func createHK() -&amp;gt; WeaponType&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;/// 抽象工厂的具体类实现&lt;/p&gt;

&lt;p&gt;class AmericanWeaponFactory: WeaponFactoryType {&lt;br /&gt;
    func createAK() -&amp;gt; WeaponType {&lt;br /&gt;
        return AmericaDecorator(weapon: AK())&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func createHK() -&amp;gt; WeaponType {
    return AmericaDecorator(weapon: HK())
}

func createAWP() -&amp;gt; WeaponType {
    return AmericaDecorator(weapon: AWP())
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class GermanyWeaponFactory: WeaponFactoryType {&lt;br /&gt;
    func createAWP() -&amp;gt; WeaponType {&lt;br /&gt;
        return GermanyDecorator(weapon: AWP())&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func createHK() -&amp;gt; WeaponType {
    return GermanyDecorator(weapon: HK())
}

func createAK() -&amp;gt; WeaponType {
    return GermanyDecorator(weapon: AK())
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;enum WeaponTypeEnumeration {&lt;br /&gt;
    case AK, AWP, HK&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class WeaponUser {&lt;br /&gt;
    private var factory: WeaponFactoryType&lt;br /&gt;
    init(factory: WeaponFactoryType) {&lt;br /&gt;
        self.factory = factory&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func setFactory(factory: WeaponFactoryType) {
    self.factory = factory
}

func fireWithType(weaponType: WeaponTypeEnumeration) {
    var weapon: WeaponType
    switch weaponType {
    case .AK:
        weapon = self.factory.createAK()
    case .AWP:
        weapon = self.factory.createAWP()
    case .HK:
        weapon = self.factory.createHK()
    }
    
    print(weapon.fire())
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;var user: WeaponUser = WeaponUser(factory: AmericanWeaponFactory())&lt;/p&gt;

&lt;p&gt;user.fireWithType(.AWP)&lt;br /&gt;
user.fireWithType(.HK)&lt;/p&gt;

&lt;p&gt;user.setFactory(GermanyWeaponFactory())&lt;br /&gt;
print(“\n”)&lt;br /&gt;
user.fireWithType(.AWP)&lt;br /&gt;
user.fireWithType(.HK)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;上述代码和工厂方法模式对于user的封装基本相同，都是组合一个工厂，只是这次的是一个抽象的接口，上次是类。
### 工厂方法和抽象工厂模式的异同
其实抽象工厂是通过接口来产生工厂的集合，而工厂方法会选取工厂来『生产』
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;/**&lt;br /&gt;
 *  对使用者抽象&lt;br /&gt;
 */&lt;br /&gt;
protocol WeaponUserType {&lt;br /&gt;
    func fireWithType(weaponType: WeaponTypeEnumeration)&lt;br /&gt;
    func createWeaponWithType(weaponType: WeaponTypeEnumeration) -&amp;gt; WeaponType!&lt;br /&gt;
    func createWeaponFactory() -&amp;gt; WeaponFactoryType&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;extension WeaponUserType {&lt;br /&gt;
    func fireWithType(weaponType: WeaponTypeEnumeration) {&lt;br /&gt;
        let weapon: WeaponType = createWeaponWithType(weaponType)&lt;br /&gt;
        print(weapon.fire())&lt;br /&gt;
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func createWeaponWithType(weaponType: WeaponTypeEnumeration) -&amp;gt; WeaponType! {
    var weapon: WeaponType
    
    switch weaponType {
    case .AK:
        weapon = createWeaponFactory().createAK()
    case .AWP:
        weapon = createWeaponFactory().createAWP()
    case .HK:
        weapon = createWeaponFactory().createHK()
    }
    
    return weapon
} }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;class AmericanWeaponUser: WeaponUserType {&lt;br /&gt;
    func createWeaponFactory() -&amp;gt; WeaponFactoryType {&lt;br /&gt;
        return AmericanWeaponFactory()&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;class GermanyWeaponUser: WeaponUserType {&lt;br /&gt;
    func createWeaponFactory() -&amp;gt; WeaponFactoryType {&lt;br /&gt;
        return GermanyWeaponFactory()&lt;br /&gt;
    }&lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;var usr: WeaponUserType = AmericanWeaponUser()&lt;br /&gt;
usr.fireWithType(.AK)&lt;br /&gt;
```&lt;br /&gt;
在这里工厂方法模式的具体实现就是User接口实现类的&lt;code&gt;func createWeaponFactory() -&amp;gt; WeaponFactoryType&lt;/code&gt;方法。通过不同类对于这个方法的实现，实现工厂的选取，选取工厂是在&lt;code&gt;var usr: WeaponUserType = AmericanWeaponUser()&lt;/code&gt;产生的。&lt;/p&gt;

&lt;p&gt;参考链接&lt;br /&gt;
&lt;a href=&quot;http://so.gushiwen.org/guwen/bookv_3254.aspx&quot;&gt;逍遥游&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html&quot;&gt;策略模式&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.cnblogs.com/ludashi/p/5302269.html&quot;&gt;参考博客Swift实现&lt;/a&gt;&lt;/p&gt;

</description>
          <pubDate>2016-05-26T00:00:00+08:00</pubDate>
          <link>/2016/05/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9D%82%E6%9D%82%E8%B0%88.html</link>
          <guid isPermaLink="true">/2016/05/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9D%82%E6%9D%82%E8%B0%88.html</guid>
        </item>
      
    
      
        <item>
          <title>Rework · 重来</title>
          <description>&lt;p&gt;####更为简单有效的商业思维&lt;br /&gt;
     决定买这个本书也是因为大约4年前在酷壳上看到耗子叔写过一篇读书笔记，那时候刚高中毕业根本不懂这本再说些什么。如今4年过去了大概不一起要更有感受了吧。&lt;br /&gt;
     这本书的的作者是大名鼎鼎的&lt;a href=&quot;https://twitter.com/jasonfried?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;Jason Fried&lt;/a&gt; 和&lt;a href=&quot;https://twitter.com/dhh?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;David Heinemeier Hansson&lt;/a&gt;大卫和贾森以前创立了&lt;a href=&quot;https://37signals.com/&quot;&gt;37signals&lt;/a&gt;。这本书的行文很像伊索寓言，用各自独立成片的场景和你可能出现的问题为线索从头到尾教你如何重来。&lt;br /&gt;
     作为一个一直在谋划自己的app的新鲜人，进阶片中用很多东西值得我去学习的。就比如&lt;/p&gt;

&lt;p&gt;####与其做个半成品，不如做好半个产品&lt;br /&gt;
&amp;gt;与其做个半成品，不如做好半个产品。&lt;br /&gt;
&amp;gt;拿起斧头动手砍吧。为了下一个伟大的起点，让我们把那些还不错的枝节给砍掉吧。&lt;/p&gt;

&lt;p&gt;作为一个自己产品的产品经理我更希望的是我的产品能够有更多更喜欢的feature来满足我和用户的需求，于是功能越来越多导致根本不能做完一个完成度很高的产品，看了这篇之后我也尝试着把不重要的功能退后，慢慢先做出一个baby app出来让后让她成长。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;####关注不变量&lt;br /&gt;
&amp;gt; Focus on what wont change&lt;br /&gt;
&amp;gt; 你的事业核心应该建立在不变的基础之上。应该投资那些人们现在需要10年后也需要的东西上面&lt;br /&gt;
&amp;gt; 要记住，时尚会凋零（至少是有周期的）只有当你聚焦于长久功能的时候，你才会发现自己把握住永不凋落的东西。&lt;/p&gt;

&lt;p&gt;  我还记得我们大学的食堂里面有一个大横幅，上面写着这世间万物唯一不变的就是变化。我自己对于这段的解读可能要结合我在计算机领域学习的知识树选择，我很谨慎的选着过去20年到现在还仍然没有消亡的技术学习，辅以新鲜的热门领域。这样构建自己的知识树之后就会发现，很多热门的东西再循环的出现，比如过去使用在游戏领域的图像刷新技术现在用在了web2.0的页面上。比如很久之前的Functional Programming 现在因为并行运算又活了（并行的效率的事情我们可以下次再说，这次不展开书）。Devid站在一个公司的基础上教导我们公司需要把不变的东西把握住之后再慢慢吸收那些演变后的新技术。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;####音乐就在你的指尖流淌 &lt;br /&gt;
&lt;strong&gt;练习，练习…..&lt;/strong&gt;&lt;br /&gt;
&amp;gt;… ……人们把装备当做取胜的法宝，却不愿意花时间去练习，于是一直泡在专业器材店里。他们想要寻找捷径，然而，最好的工具不是用在普通领域的，而且你在起步阶段肯定用不到它。&lt;br /&gt;
&amp;gt;…….. … 就用你现在手头有的或者能负担的起的，然后开始做吧。工具不重要，就用下奶工具也可以一样棒，音乐就在你的指尖流淌。&lt;/p&gt;

&lt;p&gt;    这段真是醍醐灌顶，无论我在学什么东西的时候，好像我越在乎我用的是什么的时候越干的不好，无论是画画，代码，摄影或者是别的。也许好的设备好的机器可以提高你的出品，但是不能增长你的技能，技能是通过练习和熟练沉淀出来的，好的设备只能虚高你的结果。你根本不是你看到的样子。&lt;br /&gt;
####不要过早关注细节&lt;br /&gt;
&amp;gt;…. 。..当开始设计规划的时候，我们会用大号粗体的白板笔，而不是圆珠笔，把大致想法描绘出来。为什么呢？圆珠笔太完美了，分辨率太高了，会让你不自觉的关注那些还不需要关注的东西。结果让你把注意力放在了次要的东西上面。&lt;br /&gt;
&amp;gt;你在起步阶段只需要操心纵观全局。&lt;br /&gt;
&amp;gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Walt_Stanchfield&quot;&gt;Walt Stanchfield &lt;/a&gt;作为迪斯尼工作室的著名画师，曾经鼓励他的手下的漫画师要在一开始『忘掉细节』。理由是：在初期，关注细节不会给你带来任何好处。&lt;/p&gt;

&lt;p&gt;   这一段真的是深有感触，我相信自己做过项目的人肯定了解这样的感受，在项目开始之初，有很多想法想要实现，一个简简单单的登录功能也想做的尽善尽美。到最后除了登录注册之外没有一个功能能够拿出来的。&lt;br /&gt;
   我在这里举出的🌰都是关注基础，关注技能，关注框架。只要方向没有错，我们就能够在这样的骨架上加上肌肉，皮肤。这样才是一个简单的途径。&lt;br /&gt;
   &lt;br /&gt;
####最后——–灵感是稍纵即逝&lt;br /&gt;
&amp;gt; 如果你的灵感是在周五驾临的，那就放弃周末，直奔主题。当你为了这个灵感亢奋的时候，就能在24小时之内做完两个星期的工作。&lt;/p&gt;

&lt;p&gt;   简单的说，如果你想做一件事，就去做吧。&lt;br /&gt;
##总结&lt;br /&gt;
   这本书还说了一些公司管理层面的东西，可能不久的将来我会用到吧，现在就不一一整理了。&lt;br /&gt;
以后可能会出一个续篇来说说这篇文章没有说的部分。&lt;/p&gt;

</description>
          <pubDate>2016-01-30T00:00:00+08:00</pubDate>
          <link>/onlybook/2016/01/30/Rework%20%C2%B7%20%E9%87%8D%E6%9D%A5.html</link>
          <guid isPermaLink="true">/onlybook/2016/01/30/Rework%20%C2%B7%20%E9%87%8D%E6%9D%A5.html</guid>
        </item>
      
    
      
        <item>
          <title>在OSX10.9（小牛）自己编译支持Python的vim7.4源码之路</title>
          <description>&lt;h2 id=&quot;section&quot;&gt;事情的起因&lt;/h2&gt;

&lt;p&gt;要说事情的起因的话其实是我在10.8升级到10.9之后VIM总是有些不听使唤，不过那时候没有怎么写代码于是就凑活着用了。只到昨天晚上snipMate突然不能用了于是我卸载之后再装回来结果VIM彻底不停使唤了，于是我就想说里外里把VIM重新装一遍正好体验一下新特性.&lt;/p&gt;

&lt;h2 id=&quot;vim&quot;&gt;每次编译VIM都是坎坷的&lt;/h2&gt;
&lt;p&gt;编译VIM肯定需要源代码，所以编译前需要的准备工作就是要在官网上或者google code（如果你能下的下来的话）上下载一份最新的代码:&lt;br /&gt;&lt;br /&gt;
&lt;code&gt;hg clone https://vim.googlecode.com/hg/ vim&lt;/code&gt;&lt;br /&gt;
然后使用./configure增加自己想要的配置具体我不多说了。&lt;a href=&quot;http://benfrain.com/compiling-custom-vim-source-os-x-10-9-mavericks/&quot;&gt;点我了解跟多&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;
前面的步骤我都轻车熟路,在make的时候出现了如下的编译错误&lt;br /&gt;&lt;br /&gt;
&lt;code&gt;
os_unix.c:830:13: error: conflicting types for &#39;sigaltstack&#39;
        extern int sigaltstack __ARGS((const struct sigaltstack *ss, str...
                   ^
/usr/include/signal.h:85:5: note: previous declaration is here
int     sigaltstack(const stack_t * __restrict, stack_t * __restrict)  _...
        ^
&lt;/code&gt;&lt;br /&gt;
仔细看一下好像是什么数据结构冲突的样子，知觉上不像是我的编译环境的问题，于是我在某度上搜了一下发现在OSX上编译VIM的少之又少实在找不到有什么又用的资料于是跑到谷歌的怀抱在&lt;br /&gt;
&lt;strong&gt;vim develop list&lt;/strong&gt;&lt;a href=&quot;http://permalink.gmane.org/gmane.editors.vim.devel/43168&quot;&gt;上面&lt;/a&gt;找到,相关问题的解决patch 有此问题的同学可以自己打一下补丁就可以了。&lt;br /&gt;
不会用&lt;a href=&quot;https://www.drupal.org/node/60108&quot;&gt;patch&lt;/a&gt;的同学点击链接这里有教学。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;每次只要和vim相关的配置操作就要花费很多时间去解决，这里记录一下希望有后来人不要走弯路，基本上有问题找vim GitHub上面的issue 也可找vim develop list 也可以，别用没有用的Baidu了真的。&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;br /&gt;
&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;&lt;br /&gt;
下午3:59 2014年10月10日&lt;br /&gt;
&lt;br /&gt;niclas&lt;/p&gt;

</description>
          <pubDate>2015-09-29T00:00:00+08:00</pubDate>
          <link>/2015/09/29/%E5%9C%A8OSX10.9%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91vim7.4%E6%BA%90%E7%A0%81.html</link>
          <guid isPermaLink="true">/2015/09/29/%E5%9C%A8OSX10.9%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91vim7.4%E6%BA%90%E7%A0%81.html</guid>
        </item>
      
    
      
        <item>
          <title>行者</title>
          <description>&lt;p&gt;今天我听了一个曾经环中国一周骑行的大叔的吹水会。&lt;br /&gt;
大叔姓许叫许金良。我一般很难认识第一次就能记住别人的名字，今天绝对是第一次。&lt;br /&gt;
先说说大叔吧，超过180的大高个，典型的北方人的国字脸，眼神和蔼但是充满经历。大叔给的PPT的题目叫“你我，皆行者”，下面小小的写了一行字 “行走在时光之上，寻找生命中最美丽的一天！”。&lt;br /&gt;
开头，大叔问了一个问题，“你认为旅行的意义是什么。”&lt;br /&gt;
我在当时没有举手说，现在在这里我补一下吧（这是不是就是我怎么也迈不出行者第一步的原因呢）&lt;br /&gt;
我觉得旅行对我来说，应该是跟贴近生活的，我的旅行应该是看看别的地方的人是怎么样过日子的，而不是像现在这里的一些人一样，为了自己觉得能征服什么而去旅行，旅行也许就像刚刚开始的那段话里面说的一样，其实它一直都在，即使你每天3点一线一沉不变也是在旅行，你在你的人生路上漫漫之旅呢。所以旅行对我的意义还是为了开拓视野。&lt;br /&gt;
（笑）也不知道这样的话，在当时说是怎么样的一种样子呢。&lt;br /&gt;
当时，大叔提出这个问题的时候，上来一个胖子。他自称是我们学校骑行社的一员。眉飞色舞的聊着自己如何走滇藏线，和穿越塔克拉玛干的事迹。用姜老师的话就是面部表情非常丰富，我至少看到了4种心情，骄傲，挑衅，得意，大叔和蔼的在旁边看着。记得当讲到大叔自己穿越塔克拉玛干的时候他只是提了一下这里是刚那个胖子说的地方，就没有说什么了。（其实那时候我就想，有些人走了这么长的路，最后回来了，也就只是走路而已，可是有些人走的是一条灵魂升华的路）&lt;br /&gt;
	我记得大叔说过一句很好的话，他说，为什么走着么长的路你不是坐飞机， 坐火车，或者坐车，而是选择骑摩托，骑自行车呢。大叔说，骑车去旅行其实是一个让你慢慢剥离自己的漫长的过程，你会在这个漫漫旅途中慢慢的剥离你自己，把你想要的分离出来。我现在想想也许，这就是过去苦行的人们所获得的吧。也许，这样的长途之旅就是现在的苦行呢。&lt;br /&gt;
	今天下午短短1.5h的活动，我曾有两次落泪。第一次，是大叔说，他们在新疆还是西藏的时候有一座山上的公路上有个坟头它是一个北大的女生的，她因为高原反应死在了这里，于是她就被葬在这荒漠和蓝天之间了。听说附近的人们都说她变成了这里的山神保佑着路过这里的每一个行者。&lt;br /&gt;
	我听到这里，其实我以前也又听说过有的行者因为一些事情在路上就去世了，我不太能表述我的想法，我就想说，你们真棒。&lt;br /&gt;
	第二次落泪是在看到大叔说有一个在山脚下生活的大妈对她像亲生儿子一样的时候。他说大妈是基督徒，大妈很好，我知道他即使没有说什么我已经能从他的表情和流露出来的情感里面听出来，真的大妈真好，能对一个陌生的人。&lt;br /&gt;
好，小小的记一下今天我参加这个活动而已。&lt;br /&gt;
最后附上大叔说的话&lt;br /&gt;
我们都是践行者！&lt;br /&gt;
无意说服别人，也无意改变世界，只是偏执的走在路上，希望在细微处影响别人。&lt;br /&gt;
大叔来我敬你一杯。&lt;br /&gt;
niclas&lt;br /&gt;
2014.3.19&lt;/p&gt;

</description>
          <pubDate>2014-05-19T00:00:00+08:00</pubDate>
          <link>/essay/2014/05/19/%E8%A1%8C%E8%80%85.html</link>
          <guid isPermaLink="true">/essay/2014/05/19/%E8%A1%8C%E8%80%85.html</guid>
        </item>
      
    
      
        <item>
          <title>La bibliotheaque</title>
          <description>&lt;p&gt;很久很久了，我没有一个安静缓慢的下午了，最近的时间都在图书馆里面度过了，每当这个时候（午饭过后）图书馆里面的人最少，自习的座位上面淅淅沥沥零零散散的坐着一些人，有点扶着额似乎在考虑这什么，有的人趁着这个安静的时候小憩一会儿听听歌，当然也有人像我一样，东张西望的看着周围的人在干什么。&lt;br /&gt;
总之，图书馆以前在我心目中的样子一直是一群爱学习的人争分夺秒的战场，是他们与学习拔河的沙场。因为从小你就被灌输说，要多去图书馆看书知道吗？这一类的话，其实，看书在我从小的记忆里就是和痛苦100%挂钩的。也就说图书馆就是我的痛苦之源，&lt;br /&gt;
我问过一些喜欢去图书馆的朋友们，问他们去图书馆都干些什么。&lt;br /&gt;
回答都千奇百怪，有些可能你都无法接受。&lt;br /&gt;
有陪女朋友的，有看电影的，有为了来上网的（图书馆有公共电子阅览室），还有的只是为了准备某场考试，考试结束了就不会再来这个伤心地了。&lt;br /&gt;
其实大部分人都是这么想的，我不考试来图书馆干嘛，这里完全不是属于我的style呀，全是一些书呆子，上了4年学什么都没学会到头来还要准备考研来蒙混过关。&lt;br /&gt;
在我看来，整个学校里面能够慢慢生活的地方就是图书馆了，悠闲的下午，找一个靠窗的位子坐上一下午。晒晒太阳，吹吹暖暖的风，听着电脑里面的歌。&lt;br /&gt;
思绪飘零，其实根本不需要蔬食我也能遨游。&lt;br /&gt;
一杯水，一台电脑。累了就靠着，你不会因为栏杆上有一层浮灰就会讨厌它的，反而在多年之后你会因为这层没有擦去得浮灰想起什么。&lt;br /&gt;
也许是想起了那个悠闲的下午，也许是想起了你左手边那个想考公务员的同学的大水壶。呵，就算你都忘了也没有关系。&lt;br /&gt;
珍惜，&lt;br /&gt;
珍惜你能再图书馆的时光吧。即使无趣，也能落得清闲。&lt;br /&gt;
niclas&lt;br /&gt;
2014-3-17&lt;/p&gt;

</description>
          <pubDate>2014-05-17T00:00:00+08:00</pubDate>
          <link>/essay/2014/05/17/Labibliotheque.html</link>
          <guid isPermaLink="true">/essay/2014/05/17/Labibliotheque.html</guid>
        </item>
      
    
      
        <item>
          <title>同好</title>
          <description>&lt;p&gt;什么是同好呢，就是一群有相同爱好的人。&lt;br /&gt;
人是一个很奇怪的生物，这种生物呢，他是一个社会性非常强的生物，可是他们之中总是想有一些人希望自己是独一无二的，于是，他们开始在爱好上让自己与别人区别开来。可是他们又不能逃脱出自己是社会动物的本质于是又希望找到一些和自己有相同爱好的人组成一个一个小团体以满足自己的对社会和独立个性的需呀。&lt;br /&gt;
爱好这种东西真的很大很多。比如我吧，我只有在自己不开心或者状态不好的时候才会写东西，平时我可是都是以程序员自居的（笑）。&lt;br /&gt;
有些爱好因为太冷僻所以被别人叫做癖好。&lt;br /&gt;
作为中国人当然看到病字头的东西就有一种从内而外的厌恶感，癖好，很不幸的被归为了这一类。所谓癖好其实也是爱好的一种，我到是觉得，爱好也不应该分什么贵贱为什么有些爱好就要被歧视被说成是癖好？有些爱好你就可以说这是事业呢。&lt;br /&gt;
其实，总归都是大多数人控制着这种言论走向，所以，才会有人为了我上一段说的社会性抛弃了自己的爱好，去迎合别人的爱好。可是爱好别人的爱好，还是自己的爱好吗？&lt;br /&gt;
显然。肯定不是了，爱好这种东西如果也需要和别人一样的话那你活的也太被动了。&lt;br /&gt;
诚然，有些人会苦着脸说，我这是为了生活，为了活下去我必须这样。这样大义凛然的说的时候也许背影里你还能看到他发出的光。为了生活你就可以抛弃你爱的东西？呵。&lt;br /&gt;
找理由这种把戏我从孩提时代打破家里的花瓶的时候就会了。&lt;/p&gt;

</description>
          <pubDate>2014-04-16T00:00:00+08:00</pubDate>
          <link>/essay/2014/04/16/%E5%90%8C%E5%A5%BD.html</link>
          <guid isPermaLink="true">/essay/2014/04/16/%E5%90%8C%E5%A5%BD.html</guid>
        </item>
      
    
      
        <item>
          <title>源，缘，圆  从圆聊到爱看杂记</title>
          <description>&lt;p&gt;也许，我自己想的题目是这个缘，可是打出来的竟是这个源。现在想想，也许缘和源没有什么区别。&lt;br /&gt;
小时候，再解释一个字的意思的时候老师都是叫我们组词，通过词组来理解单字的意思。&lt;br /&gt;
缘，姻缘，缘分。源有，源头；溯源。&lt;br /&gt;
我为什么说这两个字有相同的意思呢。万物皆由源生，由缘起，随缘灭。&lt;br /&gt;
也许你看见了我还写了一个字，圆。在数学里。圆被看做是完美的存在，在物理中圆是所有理想模型的基础，在佛家，世间因果都是圆。&lt;br /&gt;
圆代表了轮回，很久之前，西方的炼金术中就运用了衔尾蛇的图案来表示循环，想必大家也看过这样的图，大地在一个乌龟的背上，整个图被衔尾蛇所包围。&lt;br /&gt;
说着说着，我都忘记了，自己开这个OmmWriter是为什么了。&lt;br /&gt;
我不知道为什么你明明可以把我拉黑不理我让我死心，却不这么做，而是跟我说你还是可以骚扰我，这样的话呢。&lt;br /&gt;
你是因为你的博爱？&lt;br /&gt;
还是什么。&lt;br /&gt;
如果这篇文章又被我传到网上，被发小看见肯定又要被讥笑说自己矫情。&lt;br /&gt;
对了，我原来是想说把题目换成矫情来着的，后来还是矫情的把矫情换掉了，以掩盖我的矫情。&lt;br /&gt;
呵呵。&lt;br /&gt;
我快不知道这个呵呵的意思了，太多心怀恶意的人使用过的词之后，整个词都会变得恶意满满，也就是说其实恶意是可以被保存，并且被传播的，传播的速度根据网速来定。&lt;br /&gt;
我记得我跟谁说起过，我喜欢看杂记，原因自己也不知道。&lt;br /&gt;
现在回想看看，我大概知道是为什么了。因为，杂记一般都是说作者本身的事情的，没有什么很多的伏笔描述，有的可能是一点点感悟，一点点人生阅历的记述。就像村上桑说的一样，小说家都是骗子，他们说谎，用自己在脑子里面架构的世界观来描述事物。当然，我有的时候也喜欢看，可是比起小说，我更喜欢看杂记，我可以先看看标题，看看哪个标题更吸引我，我就先看哪一个，然而小说就不能给我这种乐趣（呵呵，也许不是所有人都觉得这叫乐趣）。&lt;br /&gt;
niclas&lt;br /&gt;
2014-03-20&lt;/p&gt;

</description>
          <pubDate>2014-03-20T00:00:00+08:00</pubDate>
          <link>/essay/2014/03/20/%E4%BB%8E%E5%9C%86%E8%81%8A%E5%88%B0%E7%88%B1%E7%9C%8B%E6%9D%82%E8%AE%B0.html</link>
          <guid isPermaLink="true">/essay/2014/03/20/%E4%BB%8E%E5%9C%86%E8%81%8A%E5%88%B0%E7%88%B1%E7%9C%8B%E6%9D%82%E8%AE%B0.html</guid>
        </item>
      
    
      
        <item>
          <title>shine</title>
          <description>&lt;p&gt;今天我早早的来到图书馆，霸占了一个在下午能晒到太阳的位置，好吧，我能够晒到的就只是下午3~4点钟的太阳。&lt;br /&gt;
一般这个时候的太阳已经不是这么毒辣了，再加上现在才是苏中地区的初春，其实如果没有穿外套的话会有点冷。&lt;br /&gt;
好几天了，我好像已经好久没有开始我的正式工作的意思，一直在默默的改变这自己的生活方式，我企图拖慢自己的节奏，我不想就这样莫名的被一些莫名的考试考证占据着我宝贵而得之不易的时光，&lt;br /&gt;
不知不觉，我打成自己的目的已经1年了。&lt;br /&gt;
一个学期已经默默的过去了。我的大学生涯可能跟大多数人都不一样，从大三我又重获新生得到了不能说是自己想要的生活。只能说自己圆了自己在别人面前吹过的牛，&lt;br /&gt;
我现在也能淡定沉稳的对别人说，当年我怎么怎么样了。&lt;br /&gt;
以获得一些无谓的自豪感(这不算是病态吧，笑)&lt;br /&gt;
我每次写文章起名字都是很随便的，想到什么就写什么。聊天工具里面有一个朋友名字叫yourSunshine突然想到，其实这里的shine也许是杀人的激光也说不定呢。&lt;br /&gt;
今天完成了，这学期选修课的任务没有多难，反倒说还很简单，可能是我在不悦的状态下所以工作效率变高的原因吧，&lt;br /&gt;
明天开始自己的事情吧，我记得有人说过，人啊，其实就是一直做自己的主角，一直做别人的配角的存在。&lt;br /&gt;
无论你是谁在别人那里只是整篇故事里面的一章，也许你运气不好，最多也就是一个插画哈。&lt;br /&gt;
不必太认真，认真就输了。&lt;br /&gt;
可我又没跟谁比呀。&lt;br /&gt;
niclas &lt;br /&gt;
2014-03-18&lt;/p&gt;

</description>
          <pubDate>2014-03-18T00:00:00+08:00</pubDate>
          <link>/essay/2014/03/18/shine.html</link>
          <guid isPermaLink="true">/essay/2014/03/18/shine.html</guid>
        </item>
      
    
      
        <item>
          <title>忘</title>
          <description>&lt;p&gt;这几天过的还不错，充实。&lt;br /&gt;
有人说过，你可以像猪一样懒，但是你没办法像猪一样懒得心安理得。&lt;br /&gt;
可能因为自己把自己压的太充实了，所以有些事情转脸就忘了，也许是因为自己还在逃避，不肯面对所以才会发生这样的反应，因为靠近了就像跑，想躲，想离开，所以靠近了就只能跑只能躲，只能离开。&lt;br /&gt;
所以忘记了自己之前说的话，我最近一直在给自己找理由，找到的都是一些无关痛痒，语无伦次的荒诞的理由，老是把自己放在弱者的地方想问题，却又要表现出自己谁也欺负不了的架势。&lt;br /&gt;
我都快忘了，我是谁了。&lt;br /&gt;
和别人一样，工作已经成了我的麻醉剂，就像关节疼痛只能打封闭治疗一样，你只能希望它的持续时间变得很长，很长。可是，和一般的止痛剂治疗一样，工作也是有自己的持续时间的。&lt;br /&gt;
而我，就有点像病入膏肓的瘾君子。在它失效前就想着怎样才能获得下一次治疗以满足我对孤独的渴望，&lt;br /&gt;
其实，与其说我是对孤独渴望，不如说其实我更渴望你。我不想任何人因为同情而对我有任何恻隐之心。&lt;br /&gt;
这样对我来说，已经无法用是否尊重来定义了。&lt;br /&gt;
所以，我宁可没有也不想这样。&lt;br /&gt;
也许，这个题目应该叫宁缺毋滥，呵呵。&lt;br /&gt;
其实我不太能看的起那些说自己是宁缺毋滥的人，这些拿着自认为高尚的理由，在单身汉中获得优越感，其实还不是找不到吗。&lt;br /&gt;
大家都一样，什么宁缺毋滥。呸&lt;br /&gt;
呵。&lt;br /&gt;
好像越来越偏离主题了啊，最近我看上去被工作压的都不能喘息了，其实都是我自己自找的，我想尽办法找东西做，不管有用没有用，根据经验这样我会变得不那么伤心。&lt;br /&gt;
其实，我还是第一次有妹子三番五次问我喜不喜欢她。对呀，我就是喜欢了，但是我不觉得我能给你幸福。所以我选择对她矢口否认。&lt;br /&gt;
我怎么会喜欢你，你看看你长成这样，又笨，又呆。&lt;br /&gt;
	我很高兴你没有看出来我这句话说得是假话，因为你就是这么单纯，善良。虽然经历过很多但是依然这么阳光，其实我说的都是你的优点呀。好了，我知道你肯定会认真对待这份感情的。&lt;br /&gt;
mine sunsine.bless you.&lt;br /&gt;
niclas  2014-3-16&lt;/p&gt;

</description>
          <pubDate>2014-03-16T00:00:00+08:00</pubDate>
          <link>/essay/2014/03/16/%E5%BF%98.html</link>
          <guid isPermaLink="true">/essay/2014/03/16/%E5%BF%98.html</guid>
        </item>
      
    
      
        <item>
          <title>总结OSX上面配置VIM + slimv的common Lisp环境</title>
          <description>&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;作者本人是一个vim使用者，一直想学函数式的语言于是就挑了Common Lisp，可是问题是CL对vim支持不想Emacs这么好，不过爱折腾的我肯定不会罢休的。&lt;/p&gt;

&lt;p&gt;如果你急着配置你的环境请移步&lt;strong&gt;总结&lt;/strong&gt;  &lt;br /&gt;
准备工作&lt;br /&gt;
——&lt;br /&gt;
1.Python环境（作者使用的是Python 2.7.x的版本）&lt;/p&gt;

&lt;p&gt;2.重新编译的Vim需要支持Python&lt;/p&gt;

&lt;p&gt;3.下载slimv的插件&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;折腾过程&lt;/h2&gt;

&lt;p&gt;作者在这些准备齐全过后按照&lt;a href=&quot;(http://www.vim.org/scripts/script.php?script_id=2531)&quot;&gt;官网&lt;/a&gt;上面的介绍解压到.vim文件夹之后使用“,c”这个快捷键呼出STREAM结果没有任何反应。然后我就在作者制作的&lt;a href=&quot;(http://kovisoft.bitbucket.org/tutorial.html)&quot;&gt;Slimv Tutorial&lt;/a&gt;第一篇里面看到原来需要一个common Lisp的编译器于是连忙用Home brew下了sbcl&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install sbcl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;安装完sbcl之后很明显还是不能用(╯‵□′)╯︵┻━┻于是我就在怀疑是不是我的VIM的配置的问题果然我又在&lt;a href=&quot;(http://kovisoft.bitbucket.org/tutorial.html)&quot;&gt;Tutorial&lt;/a&gt;里面找到了可能需要在.vimrc文件里面添加一段代码&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On Linux this can be something like:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;let g:slimv_swank_cmd =’! xterm -e sbcl –load /usr/share/common-lisp/source/slime/start-swank.lisp &amp;amp;’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里我只介绍怎么在Mac的环境里面配置所以就不管别的平台下面的配置了所以我在我的.vimrc文件里面添加了作者给的代码&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let g:slimv_swank_cmd =&#39;! xterm -e sbcl --load /usr/share/common-lisp/source/slime/start-swank.lisp &amp;amp;&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我们可以简单的看一下这个代码貌似是用一个终端控制台在后台开启什么东西的样子（其实是在后台开启slime这个我们后面会知道）。于是我填了代码之后还是没有什么用处。好吧，于是我就求助了Baidu和Google这两个大神了，得到的结果很不理想，基本上common Lisp环境配置都是在Emacs上面的只有很少的页面是讲怎么在OSX上面配置VIM+slimv的兜兜转转我在豆瓣的读书笔记里面找到&lt;a href=&quot;(http://book.douban.com/annotation/15415332/)&quot;&gt;这篇&lt;/a&gt;文章，从笔记里面我知道原来不能用terminal里面的vim来使用slimv，其实好像是可以的只要加上&lt;code&gt;set guioptions+=m&lt;/code&gt;来打开菜单就能使用了（我的打不开也不知道为什么有知道的vimer记得告诉我，谢谢）言归正传，知道不能在终端打开vim我只能用Macvim来代替了，果然使用了MacVim之后就可以看到菜单栏里面的slimv的选项菜单了，但是（我已经不想看到这个词了）还是不能用，不过根据上面的笔记来说，我猜我这里出的问题可能是我的MacVim不支持Python于是我准备下一下MacVim的&lt;a href=&quot;(https://code.google.com/p/macvim/wiki/Building)&quot;&gt;源代码&lt;/a&gt;来自己编译&lt;strong&gt;具体编译流程url里面很详细&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;经过一会编译出来符合要求&lt;strong&gt;支持Python和是32位的vim&lt;/strong&gt;的MacVim后再实验还是不可以。&lt;br /&gt;
于是我就想会不会是common Lisp的编译器的问题于是我用&lt;strong&gt;Home brew&lt;/strong&gt;下载了ccl&lt;code&gt;brew install Clozure CL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把在.vimrc里面的脚本改成&lt;code&gt;let g:slimv_swank_cmd = &#39;!osascript -e &quot;tell application \&quot;Terminal\&quot; to do script \&quot;ccl --load ~/.vim/slime/start-swank.lisp\&quot;&quot;&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;再运行终于可以了。&lt;br /&gt;
~(≧▽≦)/~&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;这次对slimv的折腾，几番周折，主要没有中文的资料很麻烦后来在&lt;a href=&quot;(http://book.douban.com/annotation/15415332/)&quot;&gt;douban笔记&lt;/a&gt;里面找到了资料真的需要感谢下这个作者。&lt;br /&gt;
我在梳理一下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你需要一个支持Python和32位的MacVim （你可能需要自己编译&lt;a href=&quot;(https://code.google.com/p/macvim/wiki/Building)&quot;&gt;这里&lt;/a&gt;了解细节）&lt;/li&gt;
  &lt;li&gt;你需要一个Python的运行环境&lt;/li&gt;
  &lt;li&gt;你需要下载slimv的插件并且解压到.vim文件夹里&lt;code&gt;unzip xxx.zip -d ~/.vim&lt;/code&gt;（&lt;a href=&quot;(http://www.vim.org/scripts/script.php?script_id=2531)&quot;&gt;这里&lt;/a&gt;下载）&lt;/li&gt;
  &lt;li&gt;你需要一个ccl的common Lisp的解释器 &lt;code&gt;brew install Clozure CL&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在你的.vimrc文件里面添加&lt;code&gt;let g:slimv_swank_cmd = &#39;!osascript -e &quot;tell application \&quot;Terminal\&quot; to do script \&quot;ccl --load ~/.vim/slime/start-swank.lisp\&quot;&quot;&#39;&lt;/code&gt;（这不是必须得）&lt;/li&gt;
  &lt;li&gt;最后打开你的MacVim跟着作者的&lt;a href=&quot;(http://kovisoft.bitbucket.org/tutorial.html)&quot;&gt;tutorial&lt;/a&gt;来学习使用吧&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后，希望我的文章能给爱折腾的你一点用，希望你们能坚持common Lisp的学习，与你共勉&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;br /&gt;
&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2013-12-30 20:00&lt;/p&gt;

</description>
          <pubDate>2014-02-23T00:00:00+08:00</pubDate>
          <link>/2014/02/23/vim+slimv%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
          <guid isPermaLink="true">/2014/02/23/vim+slimv%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
        </item>
      
    
      
        <item>
          <title>Mac中安装配置bochs(with SDL)</title>
          <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;我为了做一些系统编程需要使用&lt;a href=&quot;www.&quot;&gt;bochs&lt;/a&gt;来做一些调试和模拟的工作,所以需要在自己的Mac上面安装bochs，因为需要debug的功能所以自己需要一个自己编译版本的bochs所以就在SF上面下载了&lt;a href=&quot;www.&quot;&gt;bochs-2.6&lt;/a&gt;来自己编译安装。&lt;/p&gt;

&lt;p&gt;几经波折。还是没有成功安装bochs最后只能求助&lt;a href=&quot;http://stackoverflow.com/questions/1677324/compiling-bochs-on-mac-os-x-snow-leopard/18544680#18544680&quot;&gt;StackOverflow&lt;/a&gt;。下面是我结合在爆栈上面看到的总结的步骤希望能帮到你。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;准备&lt;/h2&gt;
&lt;p&gt;1.下载&lt;a href=&quot;www.&quot;&gt;bochs-2.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.下载&lt;a href=&quot;http://www.libsdl.org&quot;&gt;Install the SDL 1.2 Library&lt;/a&gt; 或者可以使用&lt;strong&gt;Homebrew&lt;/strong&gt;安装 &lt;code&gt;brew install sdl&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;步骤&lt;/h2&gt;
&lt;p&gt;修改.conf.macx中的配置如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure --enable-ne2000 \
        --enable-all-optimizations \
        --enable-cpu-level=6 \
        --enable-x86-64 \
        --enable-vmx=2 \
        --enable-pci \
        --enable-usb \
        --enable-usb-ohci \
        --enable-e1000 \
        --enable-debugger \
        --enable-disasm \
        --disable-debugger-gui \
        --with-sdl \
        --prefix=$HOME/opt/bochs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后&lt;code&gt;chmod u+x .conf.macx &amp;amp;&amp;amp; ./.conf.macx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;直接&lt;code&gt;sudo make &amp;amp;&amp;amp; make install&lt;/code&gt; 就可以了&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;这里吐槽一下bochs的团队，因为Apple放弃了Carbon转投Cocoa就不做x64的版本的bochs了，还撂下话说反正bochs是开源软件你能自己添加就自己动手吧（&lt;a href=&quot;http://appleinsider.com/articles/12/02/18/mountain_lion_focuses_on_cocoa_drops_x11_and_deprecates_carbon&quot;&gt;傲娇脸&lt;/a&gt;。&lt;br /&gt;
好了，其实最后我还是希望有能力阅读外文的同学去StackOverflow注册一个账号，答答题问问问题比在X度和知乎靠谱多了。&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2014年2月23日 下午1:10&lt;/p&gt;

</description>
          <pubDate>2014-02-23T00:00:00+08:00</pubDate>
          <link>/2014/02/23/Mac%E4%B8%8A%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEbochs.html</link>
          <guid isPermaLink="true">/2014/02/23/Mac%E4%B8%8A%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEbochs.html</guid>
        </item>
      
    
      
        <item>
          <title>C中的const测试解析</title>
          <description>&lt;p&gt;===&lt;br /&gt;
前言&lt;br /&gt;
—&lt;/p&gt;

&lt;p&gt;刚刚我在逛Coolshell的时候看到一个人在评论里面提了一个问题，我修改了一下代码代码如下所示。&lt;br /&gt;
开始&lt;br /&gt;
–&lt;br /&gt;
    #include &lt;stdio.h&gt;
    int main(int argc, char **argv)
    {
      const int a = 10;
	  int *b = &amp;a;
	  //const int *c = &amp;a; /*P指向的数据是常量*/
	  //int const *c = &amp;a; /*P指向的数据是常量*/
      //int * const c = &amp;a;   /*P本身是常量*/&lt;/stdio.h&gt;&lt;/p&gt;

  	  printf(“ a %p:%d  b %p:%d\n”, &amp;amp;a, a, b, *b);&lt;br /&gt;
  	  *b = 5;&lt;br /&gt;
  	  printf(“ a %p:%d  b %p:%d\n”, &amp;amp;a, a, b, *b);&lt;br /&gt;
  	  return 0;&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，首先我们先看一下上面的代码，&lt;/p&gt;

&lt;p&gt;第一行定义了一个const修饰的int类型的变量a，然后定义一个指针b并赋值a，随后在打印a，b的地址和变量之后用指针b改变了&lt;br /&gt;
a的值，再继续打印b的值。&lt;/p&gt;

&lt;p&gt;然后我们使用gcc编译后加上-wall选项之后只有一句警告：initialization discards qualifiers from pointer target type.也就是被指针指过之后就会降低变量的资格（const的资格）具体是因为什么等我明天再网上查查就能知道。&lt;/p&gt;

&lt;p&gt;但是这里给出解决方案如果你想保护一个变量不被你的指针胡乱修改请再指针上修饰表示自己指向的值不能修改，而不是在值的地方修改。&lt;/p&gt;

&lt;p&gt;另外我实验了三种添加const的位置 首先const是一个左结合修饰符也就是标准写法应该像我注释的倒数两行一样书写。&lt;br /&gt;
第一种是不同的具体因为什么原因等我去找一找。&lt;/p&gt;

&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-nd/3.0/cn/80x15.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/3.0/cn/&quot;&gt;知识共享署名-非商业性使用-禁止演绎 3.0 中国大陆许可协议&lt;/a&gt;进行许可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文章遵循CC协议，请自觉遵守    -作者Niclas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2014年2月23日 下午11:18&lt;/p&gt;

</description>
          <pubDate>2014-02-23T00:00:00+08:00</pubDate>
          <link>/2014/02/23/C%E4%B8%AD%E7%9A%84const.html</link>
          <guid isPermaLink="true">/2014/02/23/C%E4%B8%AD%E7%9A%84const.html</guid>
        </item>
      
    
      
        <item>
          <title>Lose one‘s force</title>
          <description>&lt;p&gt;刚刚在LOFTER上面看到了 一个文章，它里面只有一张照片和一首诗。黑白照片上面只有一个手臂手臂上面贴着超市的价格标签。诗是这么写的&lt;br /&gt;
Price Tag&lt;br /&gt;
Seems like everybody’s got a price,&lt;br /&gt;
I wonder how they sleep at night&lt;br /&gt;
When the sale comes first&lt;br /&gt;
And the truth comes second.&lt;br /&gt;
Just stop for a minute and smile&lt;/p&gt;

&lt;p&gt;Why is everybody so serious?&lt;br /&gt;
Acting so damn mysterious?&lt;br /&gt;
Got your shades on your eyes&lt;br /&gt;
And your heels so high&lt;br /&gt;
That you can’t even have a good time&lt;/p&gt;

&lt;p&gt;Everybody look to their left &lt;br /&gt;
Everybody look to their right&lt;br /&gt;
Can you feel that &lt;br /&gt;
We’re paying with love tonight?&lt;/p&gt;

&lt;p&gt;It’s not about the money, money, money&lt;br /&gt;
We don’t need your money, money, money&lt;br /&gt;
We just wanna make the world dance,&lt;br /&gt;
Forget about the price tag&lt;br /&gt;
Ain’t about the cha-ching cha-ching&lt;br /&gt;
Ain’t about the ba-bling ba-bling&lt;br /&gt;
Wanna make the world dance,&lt;br /&gt;
Forget about the price tag OK?”&lt;br /&gt;
诗中作者一直在强调或者呼吁人们不要过度在意标签（价值）或者说不要太在意钱 “It’s not about the money, money money, money”诚然，现在的社会对钱的重视程度一直都是最大的，导致很多人忘记了初心（losethem force）忘记了一开始的自己只是想跳舞而已的，我也不知道为什么我的LOFTER里面很多文章都是在告诫自己不要忘记初心的文章，也许我就是通过这种方式来提醒自己不要做这些事情吧。&lt;br /&gt;
也许钱的确是很有使用价值的替代品，可是往往这种“万能”的替代品不能代替的总是一些无形的物品。&lt;br /&gt;
物质上的需求本身就是不能满足精神上得需求的，你永远不能用美食喂饱一个需要获取知识的人。物质只是底层需求，可能在我们能够分配底层需求的时候我才会对精神需求有足够的重视，换句话说其实精神需求应该如何划分都不好说，如果按是否能被金钱满足来划分其实绝大多数精神需求都是需要被金钱满足的（哦，经济是基础）。所以我们不能用“不能被金钱所购买来区分精神需求和物质需求”&lt;br /&gt;
所以呢，我不太理解。希望以后的我能给我解答。&lt;br /&gt;
2014 01 01  ——–Nicalis @Nanjing&lt;/p&gt;

</description>
          <pubDate>2014-01-01T00:00:00+08:00</pubDate>
          <link>/essay/2014/01/01/Lose%20one%E2%80%98s%20force.html</link>
          <guid isPermaLink="true">/essay/2014/01/01/Lose%20one%E2%80%98s%20force.html</guid>
        </item>
      
    
      
        <item>
          <title>杂记 ------ 这是什么标题</title>
          <description>&lt;p&gt;其实也没有什么想要记录的，就是想点开这个App看看写写感受一下，让自己沉浸其中。&lt;br /&gt;
冬天的晚上总是这么难熬，南方的冬天和北方不同（其实我没有资格说这个话，我只在北方度过过夏天我根本不知道北方的冬天是什么样子的），我也只能不能免俗的跟着大家说一声不同，而且还能煞有其事的找到一个两个真像什么样子的理由，像什么寒风刺骨呀什么水汽的饱和程度呀什么，其实怎么样呢，就算如此抱怨自己不还是在这里度过了20个冬夏也没有觉得度日如年，也不知道现在的人怎么了，有人说是大家矫情了不愿意吃苦，有人说我们应该提高国民素质云云。也许懒惰爱占便宜是写在我们的基因里面的。从某种意义上来说这么多年的选择没有筛选掉这样的品质，说明这些品质最少是可以为个体谋得利益的，所以携带这样的基因的人，或者是个体才能存活下来。也许从这个角度人们常说的7宗罪或者什么恶可能是优点呢。&lt;br /&gt;
哈，果然存活和道德根本就不是一个位面的东西，每一个个体都想要利益最大化可是往往在这个环境下得问题都不具有贪婪选择性质也就是说个体的一个人或者说一部分人不能得到才能保证别的个体获得资源，所以才出现了阶级关系吧。&lt;br /&gt;
我都不知道我在讨论个什么东西了。今天就这样吧，我也没有什么想写的了，总之，晚安，好梦。&lt;/p&gt;

&lt;p&gt;Niclas @宿舍’ 2013.12.30 00:00&lt;/p&gt;

</description>
          <pubDate>2013-12-30T00:00:00+08:00</pubDate>
          <link>/essay/2013/12/30/%E6%9D%82%E8%AE%B0.html</link>
          <guid isPermaLink="true">/essay/2013/12/30/%E6%9D%82%E8%AE%B0.html</guid>
        </item>
      
    
      
        <item>
          <title>My frist Document nightly</title>
          <description>&lt;p&gt;这是我第一次在这个软件里面写字，我也是第一次能如此震撼的写下文字，&lt;br /&gt;
这里的一切都显得这么和谐音乐，简约的风格，流畅的输入的感觉一切的一切都&lt;br /&gt;
显得这么自然。 ——————————————Niclas&lt;br /&gt;
也许像这软件的介绍一样，他能给我带来不一样的输入体验，一种全新的体验，我能在这里享受书写对我的刺激，加速进入心流的速度，减少时间，我知道这个软件对于english 的字体体验很是丰富，我会尽量使用英文来书写这里的文字，也许是因为太累的原因吧，我有点困了，今天就先到这里，我明天就下单入手这个App希望这个公司能够继续蓬勃发展，我也能慢慢沉淀，沉淀到我这桶水不至于这么黑。这么说我就明天在这里总结下我这一年的大大小小的事情吧，晚安。&lt;/p&gt;

</description>
          <pubDate>2013-12-28T00:00:00+08:00</pubDate>
          <link>/essay/2013/12/28/My%20frist%20Document.html</link>
          <guid isPermaLink="true">/essay/2013/12/28/My%20frist%20Document.html</guid>
        </item>
      
    
      
        <item>
          <title>2013 忆</title>
          <description>&lt;p&gt;对我来说2013算是一个转折点得一年了吧。大大小小的事情都是发生在这一年的，就跟我自己做着回忆的火车伴奏轰隆轰隆的杂鸣踏上我的回忆之路吧。———————Niclas&lt;br /&gt;
春：&lt;br /&gt;
我记得2013年的除夕是在2月的时候，1月的我好像刚刚才从失恋的事件里慢慢走出来，这件事情又要往回退3个月。2012年的11月1号（我本来忘记了这个日子后来因为Efan的提醒我又特地回去看了一下）跟我相恋的女友要跟我分手了，那时候很伤心，现在想想这未尝不是一种人生的体验呢（说这样的话真的是就是安慰自己吧）我没有告诉身边的朋友也尽量不要让自己的负能量传播出去，只是没有这么活泼换个接地气的词没有这么2了吧。就这样慢慢的调整自己的心情，收拾心情找一个没有认识的人的地方宣泄，于是我去了LOFTER，去了PaPa，我然我在那里遇到了很多朋友，他们热情阳光，这也改变了我对“网友”这个词的最初的印象，我是一个传统中国教育教育出来的小孩，也就是每天被教导的就是不要给别人添麻烦也不要给自己添麻烦是一种“自扫门前雪，勿扫别人挖上霜”的处事哲学（我本身不喜欢这样的方法），所以网络的朋友给我的理解就是“陌生人”对于陌生人的处理方式就是漠视无视。不过在我在这两个轻社区平台上面的经历让我知道，这世界上有这么一群人，他们不是这样的（不是像我一样），他们乐于认识交流乐于和陌生人交换经历，喜欢帮助别人，我想也就是因为这样，她们满满的热情才把我携带的负能量统统驱赶走。&lt;br /&gt;
说完了感情上得事情，其实2013年春天的时候是我学历上面的转折点，我成功的通过了升学测试考回了家。也许在我的同学眼里我就是一个什么都不用学但是每次考试都是考的很好的怪咖，也许在他们眼里我还是一个奇怪的人，从来看不到我洗漱睡觉，可是又每天早上看到我在床上睡觉。这点我想对我前面的舍友说声抱歉，其实最多的是想说声谢谢，说抱歉就是也许我对你们的处事的方法不对，有的时候没有顾及到你们的自尊心，说谢谢的原因是谢谢你们的宽容，谢谢你们能容忍我的怪习惯小心眼。我知道226已经没有人住了，我希望你们在学校的在工作岗位的好好的以后希望还能聚在一起。我知道我们宿舍其实是这么多宿舍里面最努力的，也许你们到大一才摸过电脑但是你们现在不是各个都可以使用SSH框架，Mysql数据库这些有些计算机牛人都不一定会得东西吗，总之，珍重，我走了，我会回来的。&lt;br /&gt;
夏：&lt;br /&gt;
关于夏天的回忆我都有些不记得了，有人说，记忆的缺失有一大部分原因是因为有不好的回忆。&lt;br /&gt;
秋：&lt;br /&gt;
冬：&lt;br /&gt;
说实话，比起夏天我更喜欢冬天，可能是缺乏安全感的关系吧，我喜欢被被子包围的感觉。&lt;br /&gt;
冬天，我接受了Chelsea的建议，不谈恋爱。我现在想想其实我应该付出更多才是。不应该然女生付出。&lt;br /&gt;
其实我现在想想终于知道为什么有的人找对象需要条条框框，可能是因为以前的失败经历吧，想我现在就想找一个不算丑也不算漂亮的姑娘，也不一定需要会什么但是一定要善良，我们谈恋爱一定是家里人赞同的不能是异地恋，至少两个人要能常常见面的这种距离就可以了。可能我再有这么几次失败的经历也许就会有更多的要求吧。&lt;/p&gt;

&lt;p&gt;总：&lt;br /&gt;
纵观我对2013的看法，还是情感上面的问题比较多，也不知道是因为就是这样还是最近我对这方面的感触多的原因呢，&lt;br /&gt;
结束吧，还有3天就跨年了，希望我能在2014年有新的感触，希望能看到2年约定的结果。我需要沉淀，无论从技术还是思想，都需要沉淀。&lt;/p&gt;

</description>
          <pubDate>2013-12-28T00:00:00+08:00</pubDate>
          <link>/essay/2013/12/28/2013MM.html</link>
          <guid isPermaLink="true">/essay/2013/12/28/2013MM.html</guid>
        </item>
      
    
  </channel>
</rss>
